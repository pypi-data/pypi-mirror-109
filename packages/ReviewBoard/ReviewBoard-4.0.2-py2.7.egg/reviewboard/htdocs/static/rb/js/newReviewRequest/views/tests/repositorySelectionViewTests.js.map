{"version":3,"sources":["repositorySelectionViewTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,mDAAN,EAA2D,YAAW;AAClE,QAAI,mBAAJ;AACA,QAAI,aAAJ;;AAEA,eAAW,YAAW;AAClB,qBAAa,IAAI,SAAS,UAAb,CAAwB,CACjC,EAAE,MAAM,QAAR,EADiC,EAEjC,EAAE,MAAM,QAAR,EAFiC,EAGjC,EAAE,MAAM,QAAR,EAHiC,CAAxB,EAIV;AACC,mBAAO,GAAG;AADX,SAJU,CAAb;;AAQA,eAAO,IAAI,GAAG,uBAAP,CAA+B;AAClC,wBAAY;AADsB,SAA/B,CAAP;AAGH,KAZD;;AAcA,aAAS,WAAT,EAAsB,YAAW;AAC7B,WAAG,YAAH,EAAiB,YAAW;AACxB,iBAAK,MAAL;AACA,gBAAM,WAAW,KAAK,GAAL,CAAS,IAAT,CAAc,aAAd,CAAjB;;AAEA,mBAAO,SAAS,MAAhB,EAAwB,IAAxB,CAA6B,WAAW,MAAX,CAAkB,MAA/C;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,oBAAM,OAAO,WAAW,MAAX,CAAkB,CAAlB,EAAqB,GAArB,CAAyB,MAAzB,CAAb;AACA,uBAAO,EAAE,SAAS,CAAT,CAAF,EAAe,IAAf,GAAsB,KAAtB,EAAP,EAAsC,IAAtC,CAA2C,IAA3C;AACH;AACJ,SAVD;AAWH,KAZD;;AAcA,aAAS,gBAAT,EAA2B,YAAW;AAClC,WAAG,cAAH,EAAmB,YAAW;AAC1B,gBAAI,gBAAgB,KAApB;;AAEA,iBAAK,MAAL;AACA,iBAAK,EAAL,CAAQ,UAAR,EAAoB,sBAAc;AAC9B,uBAAO,WAAW,GAAX,CAAe,MAAf,CAAP,EAA+B,IAA/B,CAAoC,QAApC;AACA,gCAAgB,IAAhB;AACH,aAHD;;AAKA,gBAAM,WAAW,KAAK,GAAL,CAAS,IAAT,CAAc,aAAd,CAAjB;AACA,cAAE,SAAS,CAAT,CAAF,EAAe,KAAf;;AAEA,mBAAO,aAAP,EAAsB,IAAtB,CAA2B,IAA3B;AACH,SAbD;AAcH,KAfD;AAgBH,CAhDD","file":"repositorySelectionViewTests.js","sourcesContent":["suite('rb/newReviewRequest/views/RepositorySelectionView', function() {\n    let collection;\n    let view;\n\n    beforeEach(function() {\n        collection = new Backbone.Collection([\n            { name: 'Repo 1' },\n            { name: 'Repo 2' },\n            { name: 'Repo 3' },\n        ], {\n            model: RB.Repository,\n        });\n\n        view = new RB.RepositorySelectionView({\n            collection: collection,\n        });\n    });\n\n    describe('Rendering', function() {\n        it('With items', function() {\n            view.render();\n            const children = view.$el.find('.repository');\n\n            expect(children.length).toBe(collection.models.length);\n\n            for (let i = 0; i < children.length; i++) {\n                const name = collection.models[i].get('name');\n                expect($(children[i]).text().strip()).toBe(name);\n            }\n        });\n    });\n\n    describe('Selected event', function() {\n        it('When clicked', function() {\n            let handlerCalled = false;\n\n            view.render();\n            view.on('selected', repository => {\n                expect(repository.get('name')).toBe('Repo 2');\n                handlerCalled = true;\n            });\n\n            const children = view.$el.find('.repository');\n            $(children[1]).click();\n\n            expect(handlerCalled).toBe(true);\n        });\n    });\n});\n"]}