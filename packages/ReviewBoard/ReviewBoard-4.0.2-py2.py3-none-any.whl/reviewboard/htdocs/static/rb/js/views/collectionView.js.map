{"version":3,"sources":["collectionView.es6.js"],"names":[],"mappings":"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","file":"collectionView.js","sourcesContent":["/**\n * An abstract view for rendering a collection.\n *\n * This provides core, reusable functionality for any view that wants to render\n * a collection and respond to add/remove events. Types that extend this should\n * make sure to define the 'itemViewType' attribute, which will be the view\n * instantiated for each model in the collection.\n *\n * Items are added to the view's :js:attr:`RB.CollectionView.$container`\n * element. By default, this is the view's :js:attr:`RB.CollectionView.$el`\n * element. Subclasses that want to add to an inner child should explicitly\n * set ``$container`` to the appropriate element.\n */\nRB.CollectionView = Backbone.View.extend({\n    /**\n     * The view that will be instantiated for rendering items in the collection.\n     */\n    itemViewType: null,\n\n    /**\n     * Initialize the CollectionView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     collection (Backbone.Collection):\n     *         The collection to display.\n     *\n     *     itemViewType (function):\n     *         The constructor for the child views.\n     *\n     *     itemViewOptions (object):\n     *         Options to pass into the item view constructor.\n     */\n    initialize(options) {\n        if (options.itemViewType) {\n            this.itemViewType = options.itemViewType;\n        }\n\n        this.itemViewOptions = options.itemViewOptions || {};\n\n        const collection = options.collection;\n        this.collection = collection;\n        this.views = [];\n\n        collection.each(this._onAdded, this);\n        this.listenTo(collection, 'add', this._onAdded);\n        this.listenTo(collection, 'remove', this._onRemoved);\n        this.listenTo(collection, 'sort', this._onSorted);\n        this.listenTo(collection, 'reset', this._onReset);\n\n        this.$container = this.$el;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will iterate over all the child views and render them as well.\n     *\n     * Returns:\n     *     RB.CollectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        this.$container.empty();\n        this.views.forEach(view => this.$container.append(view.render().el));\n\n        return this;\n    },\n\n    /**\n     * Add a view for an item in the collection.\n     *\n     * This will instantiate the itemViewType, and if the CollectionView has\n     * been rendered, render and append it as well.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to add.\n     */\n    _onAdded(item) {\n        console.assert(this.itemViewType,\n                       'itemViewType must be defined by the subclass');\n\n        const view = new this.itemViewType(_.defaults({\n            model: item,\n        }, this.itemViewOptions));\n        this.views.push(view);\n\n        if (this._rendered) {\n            this.$container.append(view.render().el);\n        }\n    },\n\n    /**\n     * Remove a view for an item in the collection.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to remove.\n     */\n    _onRemoved(item) {\n        const toRemove = _.find(this.views, view => view.model === item);\n        this.views = _.without(this.views, toRemove);\n\n        if (this._rendered) {\n            toRemove.remove();\n        }\n    },\n\n    /**\n     * Respond to a change in the collection's sort order.\n     *\n     * This will detach all of the child views and re-add them in the new\n     * order.\n     */\n    _onSorted() {\n        let views = this.views;\n\n        this.views = this.collection.map(model => {\n            const view = _.find(views, view => view.model === model);\n            views = _.without(views, view);\n\n            return view;\n        });\n\n        if (this._rendered) {\n            this.$container.children().detach();\n            this.views.forEach(view => this.$container.append(view.$el));\n        }\n    },\n\n    /**\n     * Handle the collection being reset.\n     *\n     * This will remove all existing views and create new ones for the new\n     * state of the collection.\n     */\n    _onReset() {\n        this.views.forEach(view => view.remove());\n        this.views = [];\n        this.collection.each(this._onAdded, this);\n    },\n});\n"]}