{"version":3,"sources":["commitsView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,GAAG,WAAH,GAAiB,GAAG,cAAH,CAAkB,MAAlB,CAAyB;AACtC,eAAW,SAD2B;AAEtC,kBAAc,GAAG,UAFqB;;AAItC;;;;;;;;;;;AAWA,cAfsC,sBAe3B,OAf2B,EAelB;AAChB,WAAG,cAAH,CAAkB,SAAlB,CAA4B,UAA5B,CAAuC,IAAvC,CAA4C,IAA5C,EAAkD,OAAlD;;AAEA,aAAK,iBAAL,GAAyB,QAAQ,gBAAjC;AACH,KAnBqC;;;AAqBtC;;;;;;;;;;AAUA,UA/BsC,oBA+B7B;AACL,WAAG,cAAH,CAAkB,SAAlB,CAA4B,MAA5B,CAAmC,IAAnC,CAAwC,IAAxC;;AAEA,aAAK,iBAAL,CAAuB,MAAvB,CAA8B,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAA9B;;AAEA,eAAO,IAAP;AACH,KArCqC;;;AAuCtC;;;;;;;;;;AAUA,cAjDsC,sBAiD3B,MAjD2B,EAiDnB;AACf,aAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACvB,gBAAI,KAAK,KAAL,KAAe,MAAnB,EAA2B;AACvB,qBAAK,YAAL;AACH,aAFD,MAEO;AACH,qBAAK,cAAL;AACH;AACJ,SAND;AAOH,KAzDqC;;;AA2DtC;;;AAGA,iBA9DsC,2BA8DtB;AACZ,aAAK,KAAL,CAAW,OAAX,CAAmB;AAAA,mBAAQ,KAAK,cAAL,EAAR;AAAA,SAAnB;AACH,KAhEqC;;;AAkEtC;;;;;;;;;;AAUA,aA5EsC,qBA4E5B,EA5E4B,EA4ExB;AACV,YAAM,oBAAoB,EAA1B;;AAEA,YAAK,GAAG,MAAH,CAAU,SAAV,GAAsB,GAAG,MAAH,CAAU,YAAjC,GACK,GAAG,MAAH,CAAU,YAAV,GAAyB,iBADlC,EACsD;AAClD,iBAAK,UAAL,CAAgB,SAAhB;AACH;AACJ;AAnFqC,CAAzB,CAAjB","file":"commitsView.js","sourcesContent":["/**\n * A view that lists a series of commits.\n *\n * This is intended to be used for creating new review requests from committed\n * revisions. The containing view can call setPending/cancelPending to ask an\n * individual commit to show a spinner.\n */\nRB.CommitsView = RB.CollectionView.extend({\n    className: 'commits',\n    itemViewType: RB.CommitView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $scrollContainer (jQuery):\n     *         The parent container handling all content scrolling.\n     */\n    initialize(options) {\n        RB.CollectionView.prototype.initialize.call(this, options);\n\n        this._$scrollContainer = options.$scrollContainer;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Delegates the hard work to the parent class, and sets up the scroll\n     * handler.\n     *\n     * Returns:\n     *     RB.CommitsView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.CollectionView.prototype.render.call(this);\n\n        this._$scrollContainer.scroll(this._onScroll.bind(this));\n\n        return this;\n    },\n\n    /**\n     * Set a given commit \"pending\".\n     *\n     * This is used while creating a new review request, and will ask the\n     * correct commit view to show a spinner.\n     *\n     * Args:\n     *     commit (RB.RepositoryCommit):\n     *         The selected commit.\n     */\n    setPending(commit) {\n        this.views.forEach(view => {\n            if (view.model === commit) {\n                view.showProgress();\n            } else {\n                view.cancelProgress();\n            }\n        });\n    },\n\n    /**\n     * Cancel the pending state on all commits.\n     */\n    cancelPending() {\n        this.views.forEach(view => view.cancelProgress());\n    },\n\n    /**\n     * Handler for a scroll event.\n     *\n     * If we get within 50px of the bottom, try to fetch the next page of\n     * commits.\n     *\n     * Args:\n     *     ev (Event):\n     *         The scroll event.\n     */\n    _onScroll(ev) {\n        const scrollThresholdPx = 50;\n\n        if ((ev.target.scrollTop + ev.target.offsetHeight) >\n                (ev.target.scrollHeight - scrollThresholdPx)) {\n            this.collection.fetchNext();\n        }\n    },\n});\n"]}