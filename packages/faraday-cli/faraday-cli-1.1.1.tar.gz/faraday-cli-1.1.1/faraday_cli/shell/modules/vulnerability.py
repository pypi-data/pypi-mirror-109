import json
import argparse
import sys
from collections import OrderedDict

from cmd2 import with_argparser, with_default_category, CommandSet
from simple_rest_client.exceptions import NotFoundError
from tabulate import tabulate

from faraday_cli.extras.halo.halo import Halo
from faraday_cli.shell.utils import (
    IGNORE_SEVERITIES,
    SEVERITIES,
)
from faraday_cli.api_client.filter import FaradayFilter
from faraday_cli.config import active_config


@with_default_category("Vulnerabilities")
class VulnerabilityCommands(CommandSet):
    def __init__(self):
        super().__init__()

    list_vulns_parser = argparse.ArgumentParser()
    list_vulns_parser.add_argument(
        "-j", "--json-output", action="store_true", help="Show output in json"
    )
    list_vulns_parser.add_argument(
        "-p",
        "--pretty",
        action="store_true",
        help="Show table in a pretty format",
    )
    list_vulns_parser.add_argument(
        "-w", "--workspace-name", type=str, help="Workspace"
    )
    list_vulns_parser.add_argument(
        "--ignore-info",
        action="store_true",
        help=f"Ignore {'/'.join(IGNORE_SEVERITIES)} vulnerabilities",
    )
    list_vulns_parser.add_argument(
        "--severity",
        type=str,
        help=f"Filter by severity {'/'.join(SEVERITIES)}",
        default=[],
        nargs="*",
    )
    list_vulns_parser.add_argument(
        "--confirmed",
        action="store_true",
        help="Show confirmed vulnerabilities",
    )

    @with_argparser(list_vulns_parser)
    def do_list_vulns(self, args):
        """List Vulnerabilities"""

        @Halo(
            text="Gathering data",
            text_color="green",
            spinner="dots",
            stream=sys.stderr,
        )
        def get_data(workspace_name, filter_to_apply):
            vulns = self._cmd.api_client.get_vulns(
                workspace_name, filter_to_apply
            )
            return vulns

        if not args.workspace_name:
            if active_config.workspace:
                workspace_name = active_config.workspace
            else:
                self._cmd.perror("No active Workspace")
                return
        else:
            workspace_name = args.workspace_name
        query_filter = FaradayFilter()
        selected_severities = set(map(lambda x: x.lower(), args.severity))
        if selected_severities:
            for severity in selected_severities:
                if severity not in SEVERITIES:
                    self._cmd.perror(f"Invalid severity: {severity}")
                    return
                else:
                    query_filter.require_severity(severity)
        if args.ignore_info:
            for severity in IGNORE_SEVERITIES:
                query_filter.ignore_severity(severity)
        if args.confirmed:
            query_filter.filter_confirmed()
        filter_to_apply = query_filter.get_filter()
        try:
            vulns = get_data(workspace_name, filter_to_apply)
        except NotFoundError:
            self._cmd.perror("Workspace not found")
        else:
            if args.json_output:
                self._cmd.poutput(
                    json.dumps(vulns["vulnerabilities"], indent=4)
                )
            else:
                if not vulns["count"]:
                    self._cmd.perror(
                        f"No vulnerabilities in workspace: {workspace_name}"
                    )
                else:
                    data = [
                        OrderedDict(
                            {
                                "ID": x["id"],
                                "NAME": x["value"]["name"],
                                "SEVERITY": x["value"]["severity"],
                                "STATUS": x["value"]["status"],
                                "CONFIRMED": x["value"]["confirmed"],
                                "ASSET": f"{x['value']['target']} [{x['value']['parent_type']} "  # noqa: E501
                                + (
                                    f"- ID:{x['value']['parent']}]"
                                    if x["value"]["parent_type"] == "Host"
                                    else f"- {x['value']['service']['summary']}]"  # noqa: E501
                                ),
                                "HOSTNAMES": ", ".join(
                                    x["value"]["hostnames"]
                                ),
                            }
                        )
                        for x in vulns["vulnerabilities"]
                    ]
                    self._cmd.poutput(
                        tabulate(
                            data,
                            headers="keys",
                            tablefmt="psql" if args.pretty else "simple",
                        )
                    )
