{"version":3,"sources":["static/model/experimentsManager.ts","components/managementExp/expFunction.ts","components/managementExp/experimentConst.ts","components/managementExp/Header.tsx","components/managementExp/TrialIdColumn.tsx","components/managementExp/FilterBtns.tsx","components/managementExp/ExperimentManager.tsx","components/overview/TitleContext.tsx","components/public-child/CopyButton.tsx","components/overview/Title.tsx"],"names":["ExperimentsManager","experimentList","platform","errorMessage","this","requestAxios","concat","MANAGER_IP","then","data","_step","platforms","Set","_iterator","_createForOfIteratorHelper","s","n","done","item","value","undefined","port","JSON","parse","add","err","e","f","_this","sort","a","b","startTime","Array","from","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","isArray","length","includes","fillOptions","arr","list","map","push","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","react_default","createElement","className","Stack","horizontal","StackItem","grow","styles","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","stackTokens","stackStyle","react_router_dom","to","CommandBarButton","iconProps","RevToggleKey","TrialIdColumn","props","Object","classCallCheck","_super","call","_this$props","id","status","hostname","window","location","protocol","webuiPortal","react","href","target","rel","CopyButton","React","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKeys","multiSelect","onChange","bind","placeholder","options","EXPERIMENTSTATUS","selectedKey","DatePicker","firstDayOfWeek","DayOfWeek","Sunday","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","onClick","Icon","iconName","expTokens","childrenGap","Experiment","onColumnClick","_ev","getColumn","_this$state","state","columns","newColumns","slice","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","setState","name","maxWidth","isResizable","onRender","experimentName","managementExp_TrialIdColumn","expformatTimestamp","endTime","commonSelectString","_this$state2","toConsumableArray","Date","_event","_this$state3","searchSource","newSelectedStatus","selected","result","_this$state4","hideFilter","searchInputVal","originExperimentList","EXPERIMENTMANAGER","init","getExperimentList","getPlatformList","getExpErrorMessage","_this$state5","style","minHeight","innerHeight","Header_Hearder","MessageInfo","info","typeInfo","TitleContext","Provider","icon","Title","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","managementExp_FilterBtns","DetailsList","items","setKey","compact","selectionMode","_e","sortedData","newValue","_this$state6","searchInput","trim","toLowerCase","sortedResult","date","_this$state7","hasPlatform","_this$state8","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__","copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","_fluentui_react__WEBPACK_IMPORTED_MODULE_4__","_static_const__WEBPACK_IMPORTED_MODULE_5__","_ref","hideTooltip","ref","useRef","fontSize","FontSizes","small","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","onMouseUp","hidden","content","componentRef","delay","tooltipProps","calloutProps","beak","background","TOOLTIP_BACKGROUND_COLOR","beakCurtain","calloutMain","_fluentui_react__WEBPACK_IMPORTED_MODULE_1__","_TitleContext__WEBPACK_IMPORTED_MODULE_4__","initializeIcons","Consumer"],"mappings":"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","file":"static/js/8.18fef498.chunk.js","sourcesContent":["import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '../../static/interface';\nimport { copyAndSort } from '../../static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (\n    val: string | string[],\n    type: string,\n    data: AllExperimentList[]\n): AllExperimentList[] => {\n    if (typeof val === 'string' && val !== '') {\n        return data.filter(temp => temp[type] === val);\n    }\n\n    if (Array.isArray(val) && val.length !== 0) {\n        return data.filter(temp => val.includes(temp[type]));\n    }\n\n    return data;\n};\n\nfunction fillOptions(arr: string[]): any {\n    const list: Array<object> = [];\n\n    arr.map(item => {\n        list.push({ key: item, text: item });\n    });\n\n    return list;\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\r\nimport { RevToggleKey } from '../buttons/Icon';\r\nimport { NNILOGO } from '../stateless-component/NNItabs';\r\nimport { stackTokens, stackStyle } from '../NavConst';\r\n\r\nexport const Hearder = (): any => (\r\n    <div className='header'>\r\n        <div className='headerCon'>\r\n            <Stack className='nav' horizontal>\r\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\r\n                    <span className='desktop-logo'>{NNILOGO}</span>\r\n                    <span className='logoTitle'>Neural Network Intelligence</span>\r\n                </StackItem>\r\n                <StackItem grow={70} className='navOptions'>\r\n                    <Stack horizontal horizontalAlign='end' tokens={stackTokens} styles={stackStyle}>\r\n                        <Link to='/oview' className='experiment'>\r\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\r\n                        </Link>\r\n                    </Stack>\r\n                </StackItem>\r\n            </Stack>\r\n        </div>\r\n    </div>\r\n);\r\n","import * as React from 'react';\r\nimport { Stack } from '@fluentui/react';\r\nimport CopyButton from '../public-child/CopyButton';\r\n\r\ninterface TrialIdColumnProps {\r\n    port: number;\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\r\n    constructor(props: TrialIdColumnProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { port, id, status } = this.props;\r\n        const hostname = window.location.hostname;\r\n        const protocol = window.location.protocol;\r\n        const webuiPortal = `${protocol}//${hostname}:${port}/oview`;\r\n        return (\r\n            <Stack horizontal className='ellipsis idCopy'>\r\n                {status === 'STOPPED' ? (\r\n                    <div className='idColor'>{id}</div>\r\n                ) : (\r\n                    <a\r\n                        href={webuiPortal}\r\n                        className='link toAnotherExp idColor'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                    >\r\n                        {id}\r\n                    </a>\r\n                )}\r\n                <CopyButton value={id} />\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrialIdColumn;\r\n","import * as React from 'react';\r\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\r\nimport { EXPERIMENTSTATUS } from '../../static/const';\r\nimport { fillOptions } from './expFunction';\r\n\r\ninterface FilterBtnsProps {\r\n    platform: string[];\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate: Date;\r\n    selectedEndDate: Date;\r\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\r\n    setSearchSource: () => void;\r\n}\r\n\r\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\r\n    constructor(props: FilterBtnsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            selectedStatus,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            selectStatus,\r\n            selectPlatform,\r\n            getSelectedData,\r\n            setSearchSource\r\n        } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Dropdown\r\n                    label='Status'\r\n                    selectedKeys={selectedStatus}\r\n                    multiSelect\r\n                    onChange={selectStatus.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(EXPERIMENTSTATUS)}\r\n                    className='filter-condition-status'\r\n                />\r\n                <Dropdown\r\n                    label='Platform'\r\n                    selectedKey={selectedPlatform}\r\n                    onChange={selectPlatform.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(platform)}\r\n                    className='filter-condition-platform'\r\n                />\r\n                <DatePicker\r\n                    label='Start time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedStartDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'start')}\r\n                />\r\n                <DatePicker\r\n                    label='End time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedEndDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'end')}\r\n                />\r\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\r\n                    <Icon iconName='Refresh' />\r\n                    <span className='margin'>Reset</span>\r\n                </DefaultButton>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBtns;\r\n","import * as React from 'react';\r\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn, IStackTokens } from '@fluentui/react';\r\nimport { ExperimentsManager } from '../../static/model/experimentsManager';\r\nimport { expformatTimestamp, copyAndSort } from '../../static/function';\r\nimport { AllExperimentList, SortInfo } from '../../static/interface';\r\nimport MessageInfo from '../modals/MessageInfo';\r\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\r\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\r\nimport { Hearder } from './Header';\r\nimport NameColumn from './TrialIdColumn';\r\nimport FilterBtns from './FilterBtns';\r\nimport { TitleContext } from '../overview/TitleContext';\r\nimport { Title } from '../overview/Title';\r\nimport '../../App.scss';\r\nimport '../../static/style/common.scss';\r\nimport '../../static/style/nav/nav.scss';\r\nimport '../../static/style/experiment/experiment.scss';\r\nimport '../../static/style/overview/probar.scss';\r\nimport '../../static/style/tableStatus.css';\r\n\r\nconst expTokens: IStackTokens = {\r\n    childrenGap: 25\r\n};\r\n\r\ninterface ExpListState {\r\n    columns: IColumn[];\r\n    platform: string[];\r\n    errorMessage: string;\r\n    hideFilter: boolean;\r\n    searchInputVal: string;\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate?: Date;\r\n    selectedEndDate?: Date;\r\n    sortInfo: SortInfo;\r\n    source: AllExperimentList[];\r\n    originExperimentList: AllExperimentList[];\r\n    searchSource: AllExperimentList[];\r\n}\r\n\r\nclass Experiment extends React.Component<{}, ExpListState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: [],\r\n            columns: this.columns,\r\n            errorMessage: '',\r\n            hideFilter: true,\r\n            searchInputVal: '',\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            source: [], // data in table\r\n            originExperimentList: [], // api /experiments-info\r\n            searchSource: [], // search box search result\r\n            sortInfo: { field: '', isDescend: false }\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const EXPERIMENTMANAGER = new ExperimentsManager();\r\n        await EXPERIMENTMANAGER.init();\r\n        const result = EXPERIMENTMANAGER.getExperimentList();\r\n        this.setState(() => ({\r\n            source: result,\r\n            originExperimentList: result,\r\n            searchSource: result,\r\n            platform: EXPERIMENTMANAGER.getPlatformList(),\r\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\r\n        }));\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            hideFilter,\r\n            selectedStatus,\r\n            source,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            errorMessage\r\n        } = this.state;\r\n        return (\r\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\r\n                <Hearder />\r\n                {errorMessage !== undefined ? (\r\n                    <div className='warning'>\r\n                        <MessageInfo info={errorMessage} typeInfo='error' />\r\n                    </div>\r\n                ) : null}\r\n                <Stack className='contentBox expBackground'>\r\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\r\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\r\n                        <Stack className='experimentList'>\r\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\r\n                                <Title />\r\n                            </TitleContext.Provider>\r\n                            <Stack className='box' horizontal>\r\n                                <div className='search'>\r\n                                    <SearchBox\r\n                                        className='search-input'\r\n                                        placeholder='Search the experiment by name or ID'\r\n                                        onEscape={this.setOriginSource.bind(this)}\r\n                                        onClear={this.setOriginSource.bind(this)}\r\n                                        onChange={this.searchNameAndId.bind(this)}\r\n                                    />\r\n                                </div>\r\n                                <div className='filter'>\r\n                                    <DefaultButton\r\n                                        onClick={this.clickFilter.bind(this)}\r\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\r\n                                    >\r\n                                        <Icon iconName='Equalizer' />\r\n                                        <span className='margin'>Filter</span>\r\n                                    </DefaultButton>\r\n                                </div>\r\n                            </Stack>\r\n                            <Stack\r\n                                className={`${hideFilter ? 'hidden' : ''} filter-condition`}\r\n                                horizontal\r\n                                tokens={expTokens}\r\n                            >\r\n                                <FilterBtns\r\n                                    platform={platform}\r\n                                    selectedStatus={selectedStatus}\r\n                                    selectedPlatform={selectedPlatform}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedStartDate={selectedStartDate!}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedEndDate={selectedEndDate!}\r\n                                    selectStatus={this.selectStatus.bind(this)}\r\n                                    selectPlatform={this.selectPlatform.bind(this)}\r\n                                    getSelectedData={this.getSelectedData.bind(this)}\r\n                                    setSearchSource={this.setSearchSource.bind(this)}\r\n                                />\r\n                            </Stack>\r\n                            <DetailsList\r\n                                columns={this.columns}\r\n                                items={source}\r\n                                setKey='set'\r\n                                compact={true}\r\n                                selectionMode={0} // close selector function\r\n                                className='table'\r\n                            />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\r\n        const { columns, source } = this.state;\r\n        const newColumns: IColumn[] = columns.slice();\r\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\r\n        newColumns.forEach((newCol: IColumn) => {\r\n            if (newCol === currColumn) {\r\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\r\n                currColumn.isSorted = true;\r\n            } else {\r\n                newCol.isSorted = false;\r\n                newCol.isSortedDescending = true;\r\n            }\r\n        });\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\r\n        this.setState(() => ({\r\n            columns: newColumns,\r\n            source: newItems,\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\r\n        }));\r\n    };\r\n\r\n    private columns: IColumn[] = [\r\n        {\r\n            name: 'Name',\r\n            key: 'experimentName',\r\n            fieldName: 'experimentName', // required!\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{item.experimentName}</div>\r\n        },\r\n        {\r\n            name: 'ID',\r\n            key: 'id',\r\n            fieldName: 'id',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            className: 'tableHead leftTitle',\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <NameColumn port={item.port} status={item.status} id={item.id} />\r\n        },\r\n        {\r\n            name: 'Status',\r\n            key: 'status',\r\n            fieldName: 'status',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className={`${item.status} commonStyle`}>{item.status}</div>\r\n        },\r\n        {\r\n            name: 'Port',\r\n            key: 'port',\r\n            fieldName: 'port',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\r\n                    {item.port !== undefined ? item.port : '--'}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            name: 'Platform',\r\n            key: 'platform',\r\n            fieldName: 'platform',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className='commonStyle'>{item.platform}</div>\r\n        },\r\n        {\r\n            name: 'Start time',\r\n            key: 'startTime',\r\n            fieldName: 'startTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.startTime)}</div>\r\n        },\r\n        {\r\n            name: 'End time',\r\n            key: 'endTime',\r\n            fieldName: 'endTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.endTime)}</div>\r\n        }\r\n    ];\r\n\r\n    private clickFilter(_e: any): void {\r\n        const { hideFilter } = this.state;\r\n        if (!hideFilter === true) {\r\n            this.setSearchSource();\r\n        }\r\n        this.setState(() => ({ hideFilter: !hideFilter }));\r\n    }\r\n\r\n    private setOriginSource(): void {\r\n        let { originExperimentList } = this.state;\r\n        const { sortInfo } = this.state;\r\n        if (originExperimentList !== undefined) {\r\n            originExperimentList = this.commonSelectString(originExperimentList, '');\r\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\r\n            this.setState(() => ({\r\n                source: sortedData\r\n            }));\r\n        }\r\n    }\r\n\r\n    private searchNameAndId(_event, newValue): void {\r\n        const { originExperimentList, sortInfo } = this.state;\r\n        if (newValue !== undefined) {\r\n            if (newValue === '') {\r\n                this.setOriginSource();\r\n            } else {\r\n                const searchInput = newValue.trim();\r\n                let result = originExperimentList.filter(\r\n                    item =>\r\n                        item.experimentName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\r\n                );\r\n                result = this.commonSelectString(result, '');\r\n                const sortedResult = getSortedSource(result, sortInfo);\r\n                this.setState(() => ({\r\n                    source: sortedResult,\r\n                    searchSource: sortedResult\r\n                }));\r\n            }\r\n            this.setState(() => ({\r\n                searchInputVal: newValue.trim()\r\n            }));\r\n        }\r\n    }\r\n\r\n    /***\r\n     * status, platform\r\n     * param\r\n     * data: searchSource\r\n     * field: no care selected filed\r\n     */\r\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\r\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\r\n\r\n        if (field === 'status') {\r\n            data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\r\n        }\r\n        if (field === 'platform') {\r\n            data = filterByStatusOrPlatform(selectedStatus, 'status', data);\r\n        }\r\n\r\n        if (field === '') {\r\n            data = Array.from(\r\n                new Set([\r\n                    ...filterByStatusOrPlatform(selectedPlatform, 'platform', data),\r\n                    ...filterByStatusOrPlatform(selectedStatus, 'status', data)\r\n                ])\r\n            );\r\n        }\r\n\r\n        data = data.filter(\r\n            item =>\r\n                (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate)) &&\r\n                (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n        );\r\n\r\n        return data;\r\n    };\r\n\r\n    // status platform startTime endTime\r\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo, selectedStatus } = this.state;\r\n            const newSelectedStatus = item.selected\r\n                ? [...selectedStatus, item.key as string]\r\n                : selectedStatus.filter(key => key !== item.key);\r\n            let result = filterByStatusOrPlatform(newSelectedStatus, 'status', searchSource);\r\n            result = this.commonSelectString(result, 'status');\r\n            this.setState({\r\n                selectedStatus: newSelectedStatus,\r\n                source: getSortedSource(result, sortInfo)\r\n            });\r\n        }\r\n    };\r\n\r\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo } = this.state;\r\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\r\n            result = this.commonSelectString(result, 'platform');\r\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\r\n        }\r\n    };\r\n\r\n    private getSelectedData(type: string, date: Date | null | undefined): void {\r\n        if (date !== null && date !== undefined) {\r\n            const {\r\n                selectedStatus,\r\n                selectedPlatform,\r\n                selectedStartDate,\r\n                selectedEndDate,\r\n                searchSource,\r\n                sortInfo\r\n            } = this.state;\r\n            const hasPlatform = selectedPlatform === '' ? false : true;\r\n\r\n            // filter status, platform\r\n            let result = filterByStatusOrPlatform(selectedStatus, 'status', searchSource);\r\n            if (hasPlatform) {\r\n                result = result.filter(temp => temp.platform === selectedPlatform);\r\n            }\r\n\r\n            if (type === 'start') {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.startTime), date) &&\r\n                        (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedStartDate: date\r\n                }));\r\n            } else {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.endTime), date) &&\r\n                        (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedEndDate: date\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset\r\n    private setSearchSource(): void {\r\n        const { sortInfo, originExperimentList } = this.state;\r\n        let { searchInputVal } = this.state;\r\n        searchInputVal = searchInputVal.trim();\r\n        // hert re-search data for fix this status: filter first -> searchBox search result null -> close filter\r\n        const result = originExperimentList.filter(\r\n            item =>\r\n                item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()) ||\r\n                item.id.toLowerCase().includes(searchInputVal.toLowerCase())\r\n        );\r\n        this.setState(() => ({\r\n            source: getSortedSource(result, sortInfo),\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            selectedStartDate: undefined,\r\n            selectedEndDate: undefined\r\n        }));\r\n    }\r\n}\r\n\r\nexport default Experiment;\r\n","import * as React from 'react';\r\n\r\nexport const TitleContext = React.createContext({\r\n    text: '',\r\n    icon: ''\r\n});\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport copy from 'copy-to-clipboard';\r\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\r\nimport { TOOLTIP_BACKGROUND_COLOR } from '../../static/const';\r\n\r\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\r\n\r\nconst CopyButton = ({ value, hideTooltip }): any => {\r\n    const ref = useRef(null);\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                iconProps={{ iconName: 'Copy' }}\r\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\r\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\r\n                    event.stopPropagation();\r\n                    copy(value);\r\n                    ref.current && (ref as any).current.show();\r\n                    setTimeout(() => {\r\n                        ref.current !== null && (ref as any).current.dismiss();\r\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\r\n                }}\r\n                onMouseDown={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n                onMouseUp={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n            />\r\n            <TooltipHost\r\n                hidden={hideTooltip}\r\n                content='Copied'\r\n                componentRef={ref}\r\n                delay={0}\r\n                tooltipProps={{\r\n                    calloutProps: {\r\n                        styles: {\r\n                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nCopyButton.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    hideTooltip: PropTypes.bool\r\n};\r\n\r\nexport default CopyButton;\r\n","import React from 'react';\r\nimport { Stack, Icon, initializeIcons } from '@fluentui/react';\r\nimport { TitleContext } from './TitleContext';\r\nimport '../../static/style/overview/overviewTitle.scss';\r\ninitializeIcons();\r\n\r\nexport const Title = (): any => (\r\n    <TitleContext.Consumer>\r\n        {(value): React.ReactNode => (\r\n            <Stack horizontal className='panelTitle'>\r\n                <Icon iconName={value.icon} />\r\n                <span>{value.text}</span>\r\n            </Stack>\r\n        )}\r\n    </TitleContext.Consumer>\r\n);\r\n"],"sourceRoot":""}