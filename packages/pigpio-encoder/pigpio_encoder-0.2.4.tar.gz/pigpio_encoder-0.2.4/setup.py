# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['pigpio_encoder']

package_data = \
{'': ['*']}

install_requires = \
['pigpio']

setup_kwargs = {
    'name': 'pigpio-encoder',
    'version': '0.2.4',
    'description': 'Python module for quickly interface a KY040 rotary encoder with Raspberry Pi and Micropython on ESP32.',
    'long_description': '# Pigpio Encoder\n\nVersion: 0.2.4\n### Requires Python 3\n\n#### Python module for the KY040 rotary encoder.\nThis module has been developed for quickly interface a rotary encoder with Raspberry Pi.\nIt\'s based on the [pigpio library](http://abyz.me.uk/rpi/pigpio/python.html) (cause it proved to be faster than rpi.GPIO or gpiozero libraries) so you need to install pigpio library and run pigpio daemon before starting your script.\n\n## Features\n- Easy to setup callback functions for the Rotary Encoder and the Switch.\n- The Rotary Encoder has customizable min and max values (default 0-100).\n- The Rotary Encoder increase/decrease value is customizable (default 1).\n- The Switch can be activated or not.\n- The Switch can have two different functions for short press or long press.\n- Both Rotary and Switch have a customizable debounce value (default 300ms)\n\n## Installation\n- Install the pigpio library *(check [pigpio documentation](http://abyz.me.uk/rpi/pigpio/download.html) for alternative installation method)*\n - `sudo apt-get update`\n - `sudo apt-get install pigpio python-pigpio python3-pigpio`\n- Install the pigpio_encoder library\n - `python3 -mpip install pigpio_encoder` (consider add --user option)\n- start pigpio daemon\n - `sudo pigpiod`\n\n## How to use\n- import the module\n    ```python\n    from pigpio_encoder.rotary import Rotary\n    ```\n- create a callback function for the Rotary Encoder counter.\n    > You must pass a positional argument to retrieve the counter value.\n\n    ```python\n    def rotary_callback(counter):\n        # some action with counter...\n    ```\n\n- create a callback function for Up-Rotation events.\n\n    ```python\n    def up_callback():\n        # some action if rotated upward\n    ```\n\n- create a callback function for Down-Rotation events.\n\n    ```python\n    def down_callback():\n        # some action if rotated downward\n    ```\n\n- create callbacks functions for the Switch\n    > If you intend to use the switch you must create at least the "short press" callback. The "long press" callback is necessary if you want to use that feature.\n\n    ```python\n    def sw_short_callback():\n        # some action...\n    ```\n    ```python\n    def sw_long_callback():\n        # some action...\n      ```\n- create the rotary object\n    > here you setup the gpio id as keyword argument. If you don\'t pass the switch parameter the switch won\'t be activated.\n\n    ```python\n    my_rotary = Rotary(\n            clk_gpio=<gpio_id of clk signal>,\n            dt_gpio=<gpio_id of dt signal>,\n            sw_gpio=<gpio_id of switch signal>\n            )\n    ```\n- setup the rotary encoder for counting\n    > here you can setup min and max values for the encoder, the increase/decrease value, a debounce value (default 300ms) and the callback function.\n\n    ```python\n    my_rotary.setup_rotary(\n            min=<min_value>,\n            max=<max_value>,\n            scale=<scale_value>,\n            debounce=<debounce_value>,\n            rotary_callback=<rotary_callback>\n            )\n    ```\n\n- Optional setup for up and down rotation events\n    > here you can setup min and max values for the encoder, the increase/decrease value, a debounce value (default 300ms) and the callback functions.\n\n    ```python\n    my_rotary.setup_rotary(\n            min=<min_value>,\n            max=<max_value>,\n            scale=<scale_value>,\n            debounce=<debounce_value>,\n            up_callback=<up_callback>\n            down_callback=<down_callback>\n            )\n    ```\n\n\n- setup the switch\n    > if you have specified the switch pin when creating the encoder object, here you can setup the debounce value, the long press option and the callbacks.\n\n    ```python\n    my_rotary.setup_switch(\n            debounce=<debounce_value>,\n            long_press=<True>,\n            sw_short_callback=<sw_short_callback>,\n            sw_long_callback=<sw_long_callback>\n            )\n    ```\n\n- start the listener\n    ```python\n    my_rotary.watch()\n    ```\n  Please note that calling .watch() this is only for demostration purposes. It is not neccessary for the encoder to operate it can even cause problems.\n\n\n___\n#### Basic example using default values\n\n```python\nfrom pigpio_encoder.rotary import Rotary\n\n\ndef rotary_callback(counter):\n  print("Counter value: ", counter)\n\n\ndef sw_short():\n  print("Switch pressed")\n\n\ndef up_callback():\n  print("Up rotation")\n\n\ndef down_callback():\n  print("Down rotation")\n\n\nmy_rotary = Rotary(clk_gpio=27, dt_gpio=22, sw_gpio=17)\nmy_rotary.setup_rotary(\n  rotary_callback=rotary_callback,\n  up_callback=up_callback,\n  down_callback=down_callback,\n)\nmy_rotary.setup_switch(sw_short_callback=sw_short)\n\nmy_rotary.watch()\n```\n  Please note that calling .watch() this is only for demostration purposes. It is not neccessary for the encoder to operate it can even cause problems.\n\n\n___\n\n#### Example using all the Features\n\n```python\nfrom pigpio_encoder.rotary import Rotary\n\n\ndef rotary_callback(counter):\n  print("Counter value: ", counter)\n\n\ndef sw_short():\n  print("Switch short press")\n\n\ndef sw_long():\n  print("Switch long press")\n\n\nmy_rotary = Rotary(\n  clk_gpio=27,\n  dt_gpio=22,\n  sw_gpio=17\n)\nmy_rotary.setup_rotary(\n  min=10,\n  max=300,\n  scale=5,\n  debounce=200,\n  rotary_callback=rotary_callback\n)\nmy_rotary.setup_switch(\n  debounce=200,\n  long_press=True,\n  sw_short_callback=sw_short,\n  sw_long_callback=sw_long\n)\n\nmy_rotary.watch()\n\n```\n  Please note that calling .watch() this is only for demostration purposes. It is not neccessary for the encoder to operate it can even cause problems.\n\n___\n\n## Thanks to...\n- [joan2937](https://github.com/joan2937) for the awesome [pigpio library](https://github.com/joan2937/pigpio)\n- [Raphael Yancey](https://github.com/raphaelyancey) for inspiring me this library with his [similar project](https://github.com/raphaelyancey/pyKY040)\n',
    'author': 'volker Jaenisch',
    'author_email': 'volker.jaenisch@inqbus.de',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/vash3d/pigpio_encoder',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
}


setup(**setup_kwargs)
