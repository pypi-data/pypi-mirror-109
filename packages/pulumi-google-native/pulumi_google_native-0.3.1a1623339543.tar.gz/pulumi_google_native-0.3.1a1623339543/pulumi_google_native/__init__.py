# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .provider import *

# Make subpackages available:
from . import (
    accesscontextmanager,
    apigateway,
    apigee,
    apikeys,
    appengine,
    artifactregistry,
    assuredworkloads,
    bigquery,
    bigqueryconnection,
    bigquerydatatransfer,
    bigqueryreservation,
    bigtableadmin,
    billingbudgets,
    binaryauthorization,
    cloudasset,
    cloudbilling,
    cloudbuild,
    cloudchannel,
    cloudfunctions,
    cloudidentity,
    cloudiot,
    cloudkms,
    cloudresourcemanager,
    cloudscheduler,
    cloudsearch,
    cloudtasks,
    cloudtrace,
    composer,
    compute,
    container,
    containeranalysis,
    datacatalog,
    dataflow,
    datafusion,
    datalabeling,
    datamigration,
    dataproc,
    datastore,
    deploymentmanager,
    dialogflow,
    dlp,
    dns,
    domains,
    essentialcontacts,
    eventarc,
    file,
    firebase,
    firebasedatabase,
    firebasehosting,
    firebaseml,
    firebaserules,
    firestore,
    gameservices,
    genomics,
    gkehub,
    healthcare,
    iam,
    iap,
    jobs,
    logging,
    managedidentities,
    memcache,
    metastore,
    ml,
    monitoring,
    networkconnectivity,
    networkmanagement,
    notebooks,
    orgpolicy,
    osconfig,
    policysimulator,
    privateca,
    pubsub,
    pubsublite,
    recommendationengine,
    redis,
    remotebuildexecution,
    retail,
    run,
    runtimeconfig,
    secretmanager,
    securitycenter,
    servicedirectory,
    servicemanagement,
    sourcerepo,
    spanner,
    sqladmin,
    storage,
    storagetransfer,
    testing,
    toolresults,
    tpu,
    transcoder,
    translate,
    vision,
    vpcaccess,
    websecurityscanner,
    workflowexecutions,
    workflows,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:google-native":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("google-native", Package())

_register_module()
