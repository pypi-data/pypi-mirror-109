# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelServiceTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'description': 'str',
        'edges': 'ModelServiceTemplateEdges',
        'env_vars': 'dict(str, object)',
        'id': 'int',
        'image_execute_type': 'str',
        'immutable_slug': 'str',
        'is_public': 'bool',
        'is_savvihub_managed': 'bool',
        'name': 'str',
        'ports': 'dict(str, object)',
        'service_config': 'dict(str, object)',
        'service_template_created_by': 'int',
        'service_template_kernel_image': 'int',
        'service_template_kernel_resource_spec': 'int',
        'service_template_organization': 'int',
        'service_type': 'str',
        'start_command': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'description': 'description',
        'edges': 'edges',
        'env_vars': 'env_vars',
        'id': 'id',
        'image_execute_type': 'image_execute_type',
        'immutable_slug': 'immutable_slug',
        'is_public': 'is_public',
        'is_savvihub_managed': 'is_savvihub_managed',
        'name': 'name',
        'ports': 'ports',
        'service_config': 'service_config',
        'service_template_created_by': 'service_template_created_by',
        'service_template_kernel_image': 'service_template_kernel_image',
        'service_template_kernel_resource_spec': 'service_template_kernel_resource_spec',
        'service_template_organization': 'service_template_organization',
        'service_type': 'service_type',
        'start_command': 'start_command',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, description=None, edges=None, env_vars=None, id=None, image_execute_type=None, immutable_slug=None, is_public=None, is_savvihub_managed=None, name=None, ports=None, service_config=None, service_template_created_by=None, service_template_kernel_image=None, service_template_kernel_resource_spec=None, service_template_organization=None, service_type=None, start_command=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ModelServiceTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._description = None
        self._edges = None
        self._env_vars = None
        self._id = None
        self._image_execute_type = None
        self._immutable_slug = None
        self._is_public = None
        self._is_savvihub_managed = None
        self._name = None
        self._ports = None
        self._service_config = None
        self._service_template_created_by = None
        self._service_template_kernel_image = None
        self._service_template_kernel_resource_spec = None
        self._service_template_organization = None
        self._service_type = None
        self._start_command = None
        self._updated_dt = None
        self.discriminator = None

        self.created_dt = created_dt
        self.description = description
        if edges is not None:
            self.edges = edges
        if env_vars is not None:
            self.env_vars = env_vars
        if id is not None:
            self.id = id
        self.image_execute_type = image_execute_type
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_public is not None:
            self.is_public = is_public
        if is_savvihub_managed is not None:
            self.is_savvihub_managed = is_savvihub_managed
        if name is not None:
            self.name = name
        if ports is not None:
            self.ports = ports
        if service_config is not None:
            self.service_config = service_config
        if service_template_created_by is not None:
            self.service_template_created_by = service_template_created_by
        self.service_template_kernel_image = service_template_kernel_image
        self.service_template_kernel_resource_spec = service_template_kernel_resource_spec
        if service_template_organization is not None:
            self.service_template_organization = service_template_organization
        if service_type is not None:
            self.service_type = service_type
        self.start_command = start_command
        self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this ModelServiceTemplate.  # noqa: E501


        :return: The created_dt of this ModelServiceTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ModelServiceTemplate.


        :param created_dt: The created_dt of this ModelServiceTemplate.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this ModelServiceTemplate.  # noqa: E501


        :return: The description of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelServiceTemplate.


        :param description: The description of this ModelServiceTemplate.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def edges(self):
        """Gets the edges of this ModelServiceTemplate.  # noqa: E501


        :return: The edges of this ModelServiceTemplate.  # noqa: E501
        :rtype: ModelServiceTemplateEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this ModelServiceTemplate.


        :param edges: The edges of this ModelServiceTemplate.  # noqa: E501
        :type edges: ModelServiceTemplateEdges
        """

        self._edges = edges

    @property
    def env_vars(self):
        """Gets the env_vars of this ModelServiceTemplate.  # noqa: E501


        :return: The env_vars of this ModelServiceTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ModelServiceTemplate.


        :param env_vars: The env_vars of this ModelServiceTemplate.  # noqa: E501
        :type env_vars: dict(str, object)
        """

        self._env_vars = env_vars

    @property
    def id(self):
        """Gets the id of this ModelServiceTemplate.  # noqa: E501


        :return: The id of this ModelServiceTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelServiceTemplate.


        :param id: The id of this ModelServiceTemplate.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def image_execute_type(self):
        """Gets the image_execute_type of this ModelServiceTemplate.  # noqa: E501


        :return: The image_execute_type of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._image_execute_type

    @image_execute_type.setter
    def image_execute_type(self, image_execute_type):
        """Sets the image_execute_type of this ModelServiceTemplate.


        :param image_execute_type: The image_execute_type of this ModelServiceTemplate.  # noqa: E501
        :type image_execute_type: str
        """

        self._image_execute_type = image_execute_type

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ModelServiceTemplate.  # noqa: E501


        :return: The immutable_slug of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ModelServiceTemplate.


        :param immutable_slug: The immutable_slug of this ModelServiceTemplate.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_public(self):
        """Gets the is_public of this ModelServiceTemplate.  # noqa: E501


        :return: The is_public of this ModelServiceTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ModelServiceTemplate.


        :param is_public: The is_public of this ModelServiceTemplate.  # noqa: E501
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def is_savvihub_managed(self):
        """Gets the is_savvihub_managed of this ModelServiceTemplate.  # noqa: E501


        :return: The is_savvihub_managed of this ModelServiceTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_savvihub_managed

    @is_savvihub_managed.setter
    def is_savvihub_managed(self, is_savvihub_managed):
        """Sets the is_savvihub_managed of this ModelServiceTemplate.


        :param is_savvihub_managed: The is_savvihub_managed of this ModelServiceTemplate.  # noqa: E501
        :type is_savvihub_managed: bool
        """

        self._is_savvihub_managed = is_savvihub_managed

    @property
    def name(self):
        """Gets the name of this ModelServiceTemplate.  # noqa: E501


        :return: The name of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelServiceTemplate.


        :param name: The name of this ModelServiceTemplate.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this ModelServiceTemplate.  # noqa: E501


        :return: The ports of this ModelServiceTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ModelServiceTemplate.


        :param ports: The ports of this ModelServiceTemplate.  # noqa: E501
        :type ports: dict(str, object)
        """

        self._ports = ports

    @property
    def service_config(self):
        """Gets the service_config of this ModelServiceTemplate.  # noqa: E501


        :return: The service_config of this ModelServiceTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._service_config

    @service_config.setter
    def service_config(self, service_config):
        """Sets the service_config of this ModelServiceTemplate.


        :param service_config: The service_config of this ModelServiceTemplate.  # noqa: E501
        :type service_config: dict(str, object)
        """

        self._service_config = service_config

    @property
    def service_template_created_by(self):
        """Gets the service_template_created_by of this ModelServiceTemplate.  # noqa: E501


        :return: The service_template_created_by of this ModelServiceTemplate.  # noqa: E501
        :rtype: int
        """
        return self._service_template_created_by

    @service_template_created_by.setter
    def service_template_created_by(self, service_template_created_by):
        """Sets the service_template_created_by of this ModelServiceTemplate.


        :param service_template_created_by: The service_template_created_by of this ModelServiceTemplate.  # noqa: E501
        :type service_template_created_by: int
        """

        self._service_template_created_by = service_template_created_by

    @property
    def service_template_kernel_image(self):
        """Gets the service_template_kernel_image of this ModelServiceTemplate.  # noqa: E501


        :return: The service_template_kernel_image of this ModelServiceTemplate.  # noqa: E501
        :rtype: int
        """
        return self._service_template_kernel_image

    @service_template_kernel_image.setter
    def service_template_kernel_image(self, service_template_kernel_image):
        """Sets the service_template_kernel_image of this ModelServiceTemplate.


        :param service_template_kernel_image: The service_template_kernel_image of this ModelServiceTemplate.  # noqa: E501
        :type service_template_kernel_image: int
        """

        self._service_template_kernel_image = service_template_kernel_image

    @property
    def service_template_kernel_resource_spec(self):
        """Gets the service_template_kernel_resource_spec of this ModelServiceTemplate.  # noqa: E501


        :return: The service_template_kernel_resource_spec of this ModelServiceTemplate.  # noqa: E501
        :rtype: int
        """
        return self._service_template_kernel_resource_spec

    @service_template_kernel_resource_spec.setter
    def service_template_kernel_resource_spec(self, service_template_kernel_resource_spec):
        """Sets the service_template_kernel_resource_spec of this ModelServiceTemplate.


        :param service_template_kernel_resource_spec: The service_template_kernel_resource_spec of this ModelServiceTemplate.  # noqa: E501
        :type service_template_kernel_resource_spec: int
        """

        self._service_template_kernel_resource_spec = service_template_kernel_resource_spec

    @property
    def service_template_organization(self):
        """Gets the service_template_organization of this ModelServiceTemplate.  # noqa: E501


        :return: The service_template_organization of this ModelServiceTemplate.  # noqa: E501
        :rtype: int
        """
        return self._service_template_organization

    @service_template_organization.setter
    def service_template_organization(self, service_template_organization):
        """Sets the service_template_organization of this ModelServiceTemplate.


        :param service_template_organization: The service_template_organization of this ModelServiceTemplate.  # noqa: E501
        :type service_template_organization: int
        """

        self._service_template_organization = service_template_organization

    @property
    def service_type(self):
        """Gets the service_type of this ModelServiceTemplate.  # noqa: E501


        :return: The service_type of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ModelServiceTemplate.


        :param service_type: The service_type of this ModelServiceTemplate.  # noqa: E501
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def start_command(self):
        """Gets the start_command of this ModelServiceTemplate.  # noqa: E501


        :return: The start_command of this ModelServiceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ModelServiceTemplate.


        :param start_command: The start_command of this ModelServiceTemplate.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ModelServiceTemplate.  # noqa: E501


        :return: The updated_dt of this ModelServiceTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ModelServiceTemplate.


        :param updated_dt: The updated_dt of this ModelServiceTemplate.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelServiceTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelServiceTemplate):
            return True

        return self.to_dict() != other.to_dict()
