# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelExperimentConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'ModelExperimentConfigEdges',
        'env_vars': 'dict(str, object)',
        'experiment_config_kernel_image': 'int',
        'experiment_config_kernel_resource_spec': 'int',
        'id': 'int',
        'immutable_slug': 'str',
        'kernel_cluster_select_policies': 'dict(str, object)',
        'start_command': 'str',
        'termination_protection': 'bool',
        'updated_dt': 'datetime',
        'volume_mounts': 'dict(str, object)'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'env_vars': 'env_vars',
        'experiment_config_kernel_image': 'experiment_config_kernel_image',
        'experiment_config_kernel_resource_spec': 'experiment_config_kernel_resource_spec',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'start_command': 'start_command',
        'termination_protection': 'termination_protection',
        'updated_dt': 'updated_dt',
        'volume_mounts': 'volume_mounts'
    }

    def __init__(self, created_dt=None, edges=None, env_vars=None, experiment_config_kernel_image=None, experiment_config_kernel_resource_spec=None, id=None, immutable_slug=None, kernel_cluster_select_policies=None, start_command=None, termination_protection=None, updated_dt=None, volume_mounts=None, local_vars_configuration=None):  # noqa: E501
        """ModelExperimentConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._env_vars = None
        self._experiment_config_kernel_image = None
        self._experiment_config_kernel_resource_spec = None
        self._id = None
        self._immutable_slug = None
        self._kernel_cluster_select_policies = None
        self._start_command = None
        self._termination_protection = None
        self._updated_dt = None
        self._volume_mounts = None
        self.discriminator = None

        self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if env_vars is not None:
            self.env_vars = env_vars
        if experiment_config_kernel_image is not None:
            self.experiment_config_kernel_image = experiment_config_kernel_image
        self.experiment_config_kernel_resource_spec = experiment_config_kernel_resource_spec
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        if start_command is not None:
            self.start_command = start_command
        if termination_protection is not None:
            self.termination_protection = termination_protection
        self.updated_dt = updated_dt
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def created_dt(self):
        """Gets the created_dt of this ModelExperimentConfig.  # noqa: E501


        :return: The created_dt of this ModelExperimentConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ModelExperimentConfig.


        :param created_dt: The created_dt of this ModelExperimentConfig.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this ModelExperimentConfig.  # noqa: E501


        :return: The edges of this ModelExperimentConfig.  # noqa: E501
        :rtype: ModelExperimentConfigEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this ModelExperimentConfig.


        :param edges: The edges of this ModelExperimentConfig.  # noqa: E501
        :type edges: ModelExperimentConfigEdges
        """

        self._edges = edges

    @property
    def env_vars(self):
        """Gets the env_vars of this ModelExperimentConfig.  # noqa: E501


        :return: The env_vars of this ModelExperimentConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ModelExperimentConfig.


        :param env_vars: The env_vars of this ModelExperimentConfig.  # noqa: E501
        :type env_vars: dict(str, object)
        """

        self._env_vars = env_vars

    @property
    def experiment_config_kernel_image(self):
        """Gets the experiment_config_kernel_image of this ModelExperimentConfig.  # noqa: E501


        :return: The experiment_config_kernel_image of this ModelExperimentConfig.  # noqa: E501
        :rtype: int
        """
        return self._experiment_config_kernel_image

    @experiment_config_kernel_image.setter
    def experiment_config_kernel_image(self, experiment_config_kernel_image):
        """Sets the experiment_config_kernel_image of this ModelExperimentConfig.


        :param experiment_config_kernel_image: The experiment_config_kernel_image of this ModelExperimentConfig.  # noqa: E501
        :type experiment_config_kernel_image: int
        """

        self._experiment_config_kernel_image = experiment_config_kernel_image

    @property
    def experiment_config_kernel_resource_spec(self):
        """Gets the experiment_config_kernel_resource_spec of this ModelExperimentConfig.  # noqa: E501


        :return: The experiment_config_kernel_resource_spec of this ModelExperimentConfig.  # noqa: E501
        :rtype: int
        """
        return self._experiment_config_kernel_resource_spec

    @experiment_config_kernel_resource_spec.setter
    def experiment_config_kernel_resource_spec(self, experiment_config_kernel_resource_spec):
        """Sets the experiment_config_kernel_resource_spec of this ModelExperimentConfig.


        :param experiment_config_kernel_resource_spec: The experiment_config_kernel_resource_spec of this ModelExperimentConfig.  # noqa: E501
        :type experiment_config_kernel_resource_spec: int
        """

        self._experiment_config_kernel_resource_spec = experiment_config_kernel_resource_spec

    @property
    def id(self):
        """Gets the id of this ModelExperimentConfig.  # noqa: E501


        :return: The id of this ModelExperimentConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelExperimentConfig.


        :param id: The id of this ModelExperimentConfig.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ModelExperimentConfig.  # noqa: E501


        :return: The immutable_slug of this ModelExperimentConfig.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ModelExperimentConfig.


        :param immutable_slug: The immutable_slug of this ModelExperimentConfig.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ModelExperimentConfig.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ModelExperimentConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ModelExperimentConfig.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ModelExperimentConfig.  # noqa: E501
        :type kernel_cluster_select_policies: dict(str, object)
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def start_command(self):
        """Gets the start_command of this ModelExperimentConfig.  # noqa: E501


        :return: The start_command of this ModelExperimentConfig.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ModelExperimentConfig.


        :param start_command: The start_command of this ModelExperimentConfig.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def termination_protection(self):
        """Gets the termination_protection of this ModelExperimentConfig.  # noqa: E501


        :return: The termination_protection of this ModelExperimentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this ModelExperimentConfig.


        :param termination_protection: The termination_protection of this ModelExperimentConfig.  # noqa: E501
        :type termination_protection: bool
        """

        self._termination_protection = termination_protection

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ModelExperimentConfig.  # noqa: E501


        :return: The updated_dt of this ModelExperimentConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ModelExperimentConfig.


        :param updated_dt: The updated_dt of this ModelExperimentConfig.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ModelExperimentConfig.  # noqa: E501


        :return: The volume_mounts of this ModelExperimentConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ModelExperimentConfig.


        :param volume_mounts: The volume_mounts of this ModelExperimentConfig.  # noqa: E501
        :type volume_mounts: dict(str, object)
        """

        self._volume_mounts = volume_mounts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelExperimentConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelExperimentConfig):
            return True

        return self.to_dict() != other.to_dict()
