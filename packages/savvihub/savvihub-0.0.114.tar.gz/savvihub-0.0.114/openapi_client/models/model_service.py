# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'ModelServiceEdges',
        'endpoints': 'dict(str, object)',
        'env_vars': 'dict(str, object)',
        'exit_code': 'int',
        'final_cost': 'float',
        'id': 'int',
        'immutable_slug': 'str',
        'kernel_cluster_select_policies': 'dict(str, object)',
        'name': 'str',
        'ports': 'dict(str, object)',
        'service_access_token': 'int',
        'service_config': 'dict(str, object)',
        'service_created_by': 'int',
        'service_dataset': 'int',
        'service_experiment': 'int',
        'service_kernel_cluster': 'int',
        'service_kernel_cluster_node': 'int',
        'service_kernel_image': 'int',
        'service_kernel_resource_spec': 'int',
        'service_organization': 'int',
        'service_project': 'int',
        'service_ssh_credentials_organizations': 'int',
        'service_template': 'int',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'type': 'str',
        'updated_dt': 'datetime',
        'volume_mounts': 'dict(str, object)'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'endpoints': 'endpoints',
        'env_vars': 'env_vars',
        'exit_code': 'exit_code',
        'final_cost': 'final_cost',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'name': 'name',
        'ports': 'ports',
        'service_access_token': 'service_access_token',
        'service_config': 'service_config',
        'service_created_by': 'service_created_by',
        'service_dataset': 'service_dataset',
        'service_experiment': 'service_experiment',
        'service_kernel_cluster': 'service_kernel_cluster',
        'service_kernel_cluster_node': 'service_kernel_cluster_node',
        'service_kernel_image': 'service_kernel_image',
        'service_kernel_resource_spec': 'service_kernel_resource_spec',
        'service_organization': 'service_organization',
        'service_project': 'service_project',
        'service_ssh_credentials_organizations': 'service_ssh_credentials_organizations',
        'service_template': 'service_template',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'volume_mounts': 'volume_mounts'
    }

    def __init__(self, created_dt=None, edges=None, endpoints=None, env_vars=None, exit_code=None, final_cost=None, id=None, immutable_slug=None, kernel_cluster_select_policies=None, name=None, ports=None, service_access_token=None, service_config=None, service_created_by=None, service_dataset=None, service_experiment=None, service_kernel_cluster=None, service_kernel_cluster_node=None, service_kernel_image=None, service_kernel_resource_spec=None, service_organization=None, service_project=None, service_ssh_credentials_organizations=None, service_template=None, start_command=None, status=None, status_last_updated=None, status_reason=None, type=None, updated_dt=None, volume_mounts=None, local_vars_configuration=None):  # noqa: E501
        """ModelService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._endpoints = None
        self._env_vars = None
        self._exit_code = None
        self._final_cost = None
        self._id = None
        self._immutable_slug = None
        self._kernel_cluster_select_policies = None
        self._name = None
        self._ports = None
        self._service_access_token = None
        self._service_config = None
        self._service_created_by = None
        self._service_dataset = None
        self._service_experiment = None
        self._service_kernel_cluster = None
        self._service_kernel_cluster_node = None
        self._service_kernel_image = None
        self._service_kernel_resource_spec = None
        self._service_organization = None
        self._service_project = None
        self._service_ssh_credentials_organizations = None
        self._service_template = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._type = None
        self._updated_dt = None
        self._volume_mounts = None
        self.discriminator = None

        self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if endpoints is not None:
            self.endpoints = endpoints
        if env_vars is not None:
            self.env_vars = env_vars
        self.exit_code = exit_code
        self.final_cost = final_cost
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        if name is not None:
            self.name = name
        if ports is not None:
            self.ports = ports
        self.service_access_token = service_access_token
        if service_config is not None:
            self.service_config = service_config
        if service_created_by is not None:
            self.service_created_by = service_created_by
        self.service_dataset = service_dataset
        self.service_experiment = service_experiment
        self.service_kernel_cluster = service_kernel_cluster
        self.service_kernel_cluster_node = service_kernel_cluster_node
        if service_kernel_image is not None:
            self.service_kernel_image = service_kernel_image
        self.service_kernel_resource_spec = service_kernel_resource_spec
        if service_organization is not None:
            self.service_organization = service_organization
        self.service_project = service_project
        self.service_ssh_credentials_organizations = service_ssh_credentials_organizations
        self.service_template = service_template
        if start_command is not None:
            self.start_command = start_command
        if status is not None:
            self.status = status
        if status_last_updated is not None:
            self.status_last_updated = status_last_updated
        if status_reason is not None:
            self.status_reason = status_reason
        if type is not None:
            self.type = type
        self.updated_dt = updated_dt
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def created_dt(self):
        """Gets the created_dt of this ModelService.  # noqa: E501


        :return: The created_dt of this ModelService.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ModelService.


        :param created_dt: The created_dt of this ModelService.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this ModelService.  # noqa: E501


        :return: The edges of this ModelService.  # noqa: E501
        :rtype: ModelServiceEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this ModelService.


        :param edges: The edges of this ModelService.  # noqa: E501
        :type edges: ModelServiceEdges
        """

        self._edges = edges

    @property
    def endpoints(self):
        """Gets the endpoints of this ModelService.  # noqa: E501


        :return: The endpoints of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ModelService.


        :param endpoints: The endpoints of this ModelService.  # noqa: E501
        :type endpoints: dict(str, object)
        """

        self._endpoints = endpoints

    @property
    def env_vars(self):
        """Gets the env_vars of this ModelService.  # noqa: E501


        :return: The env_vars of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ModelService.


        :param env_vars: The env_vars of this ModelService.  # noqa: E501
        :type env_vars: dict(str, object)
        """

        self._env_vars = env_vars

    @property
    def exit_code(self):
        """Gets the exit_code of this ModelService.  # noqa: E501


        :return: The exit_code of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ModelService.


        :param exit_code: The exit_code of this ModelService.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def final_cost(self):
        """Gets the final_cost of this ModelService.  # noqa: E501


        :return: The final_cost of this ModelService.  # noqa: E501
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """Sets the final_cost of this ModelService.


        :param final_cost: The final_cost of this ModelService.  # noqa: E501
        :type final_cost: float
        """

        self._final_cost = final_cost

    @property
    def id(self):
        """Gets the id of this ModelService.  # noqa: E501


        :return: The id of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelService.


        :param id: The id of this ModelService.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ModelService.  # noqa: E501


        :return: The immutable_slug of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ModelService.


        :param immutable_slug: The immutable_slug of this ModelService.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ModelService.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ModelService.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ModelService.  # noqa: E501
        :type kernel_cluster_select_policies: dict(str, object)
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def name(self):
        """Gets the name of this ModelService.  # noqa: E501


        :return: The name of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelService.


        :param name: The name of this ModelService.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this ModelService.  # noqa: E501


        :return: The ports of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ModelService.


        :param ports: The ports of this ModelService.  # noqa: E501
        :type ports: dict(str, object)
        """

        self._ports = ports

    @property
    def service_access_token(self):
        """Gets the service_access_token of this ModelService.  # noqa: E501


        :return: The service_access_token of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_access_token

    @service_access_token.setter
    def service_access_token(self, service_access_token):
        """Sets the service_access_token of this ModelService.


        :param service_access_token: The service_access_token of this ModelService.  # noqa: E501
        :type service_access_token: int
        """

        self._service_access_token = service_access_token

    @property
    def service_config(self):
        """Gets the service_config of this ModelService.  # noqa: E501


        :return: The service_config of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._service_config

    @service_config.setter
    def service_config(self, service_config):
        """Sets the service_config of this ModelService.


        :param service_config: The service_config of this ModelService.  # noqa: E501
        :type service_config: dict(str, object)
        """

        self._service_config = service_config

    @property
    def service_created_by(self):
        """Gets the service_created_by of this ModelService.  # noqa: E501


        :return: The service_created_by of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_created_by

    @service_created_by.setter
    def service_created_by(self, service_created_by):
        """Sets the service_created_by of this ModelService.


        :param service_created_by: The service_created_by of this ModelService.  # noqa: E501
        :type service_created_by: int
        """

        self._service_created_by = service_created_by

    @property
    def service_dataset(self):
        """Gets the service_dataset of this ModelService.  # noqa: E501


        :return: The service_dataset of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_dataset

    @service_dataset.setter
    def service_dataset(self, service_dataset):
        """Sets the service_dataset of this ModelService.


        :param service_dataset: The service_dataset of this ModelService.  # noqa: E501
        :type service_dataset: int
        """

        self._service_dataset = service_dataset

    @property
    def service_experiment(self):
        """Gets the service_experiment of this ModelService.  # noqa: E501


        :return: The service_experiment of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_experiment

    @service_experiment.setter
    def service_experiment(self, service_experiment):
        """Sets the service_experiment of this ModelService.


        :param service_experiment: The service_experiment of this ModelService.  # noqa: E501
        :type service_experiment: int
        """

        self._service_experiment = service_experiment

    @property
    def service_kernel_cluster(self):
        """Gets the service_kernel_cluster of this ModelService.  # noqa: E501


        :return: The service_kernel_cluster of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_kernel_cluster

    @service_kernel_cluster.setter
    def service_kernel_cluster(self, service_kernel_cluster):
        """Sets the service_kernel_cluster of this ModelService.


        :param service_kernel_cluster: The service_kernel_cluster of this ModelService.  # noqa: E501
        :type service_kernel_cluster: int
        """

        self._service_kernel_cluster = service_kernel_cluster

    @property
    def service_kernel_cluster_node(self):
        """Gets the service_kernel_cluster_node of this ModelService.  # noqa: E501


        :return: The service_kernel_cluster_node of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_kernel_cluster_node

    @service_kernel_cluster_node.setter
    def service_kernel_cluster_node(self, service_kernel_cluster_node):
        """Sets the service_kernel_cluster_node of this ModelService.


        :param service_kernel_cluster_node: The service_kernel_cluster_node of this ModelService.  # noqa: E501
        :type service_kernel_cluster_node: int
        """

        self._service_kernel_cluster_node = service_kernel_cluster_node

    @property
    def service_kernel_image(self):
        """Gets the service_kernel_image of this ModelService.  # noqa: E501


        :return: The service_kernel_image of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_kernel_image

    @service_kernel_image.setter
    def service_kernel_image(self, service_kernel_image):
        """Sets the service_kernel_image of this ModelService.


        :param service_kernel_image: The service_kernel_image of this ModelService.  # noqa: E501
        :type service_kernel_image: int
        """

        self._service_kernel_image = service_kernel_image

    @property
    def service_kernel_resource_spec(self):
        """Gets the service_kernel_resource_spec of this ModelService.  # noqa: E501


        :return: The service_kernel_resource_spec of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_kernel_resource_spec

    @service_kernel_resource_spec.setter
    def service_kernel_resource_spec(self, service_kernel_resource_spec):
        """Sets the service_kernel_resource_spec of this ModelService.


        :param service_kernel_resource_spec: The service_kernel_resource_spec of this ModelService.  # noqa: E501
        :type service_kernel_resource_spec: int
        """

        self._service_kernel_resource_spec = service_kernel_resource_spec

    @property
    def service_organization(self):
        """Gets the service_organization of this ModelService.  # noqa: E501


        :return: The service_organization of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_organization

    @service_organization.setter
    def service_organization(self, service_organization):
        """Sets the service_organization of this ModelService.


        :param service_organization: The service_organization of this ModelService.  # noqa: E501
        :type service_organization: int
        """

        self._service_organization = service_organization

    @property
    def service_project(self):
        """Gets the service_project of this ModelService.  # noqa: E501


        :return: The service_project of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_project

    @service_project.setter
    def service_project(self, service_project):
        """Sets the service_project of this ModelService.


        :param service_project: The service_project of this ModelService.  # noqa: E501
        :type service_project: int
        """

        self._service_project = service_project

    @property
    def service_ssh_credentials_organizations(self):
        """Gets the service_ssh_credentials_organizations of this ModelService.  # noqa: E501


        :return: The service_ssh_credentials_organizations of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_ssh_credentials_organizations

    @service_ssh_credentials_organizations.setter
    def service_ssh_credentials_organizations(self, service_ssh_credentials_organizations):
        """Sets the service_ssh_credentials_organizations of this ModelService.


        :param service_ssh_credentials_organizations: The service_ssh_credentials_organizations of this ModelService.  # noqa: E501
        :type service_ssh_credentials_organizations: int
        """

        self._service_ssh_credentials_organizations = service_ssh_credentials_organizations

    @property
    def service_template(self):
        """Gets the service_template of this ModelService.  # noqa: E501


        :return: The service_template of this ModelService.  # noqa: E501
        :rtype: int
        """
        return self._service_template

    @service_template.setter
    def service_template(self, service_template):
        """Sets the service_template of this ModelService.


        :param service_template: The service_template of this ModelService.  # noqa: E501
        :type service_template: int
        """

        self._service_template = service_template

    @property
    def start_command(self):
        """Gets the start_command of this ModelService.  # noqa: E501


        :return: The start_command of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ModelService.


        :param start_command: The start_command of this ModelService.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ModelService.  # noqa: E501


        :return: The status of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelService.


        :param status: The status of this ModelService.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ModelService.  # noqa: E501


        :return: The status_last_updated of this ModelService.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ModelService.


        :param status_last_updated: The status_last_updated of this ModelService.  # noqa: E501
        :type status_last_updated: datetime
        """

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this ModelService.  # noqa: E501


        :return: The status_reason of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ModelService.


        :param status_reason: The status_reason of this ModelService.  # noqa: E501
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def type(self):
        """Gets the type of this ModelService.  # noqa: E501


        :return: The type of this ModelService.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelService.


        :param type: The type of this ModelService.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ModelService.  # noqa: E501


        :return: The updated_dt of this ModelService.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ModelService.


        :param updated_dt: The updated_dt of this ModelService.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ModelService.  # noqa: E501


        :return: The volume_mounts of this ModelService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ModelService.


        :param volume_mounts: The volume_mounts of this ModelService.  # noqa: E501
        :type volume_mounts: dict(str, object)
        """

        self._volume_mounts = volume_mounts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelService):
            return True

        return self.to_dict() != other.to_dict()
