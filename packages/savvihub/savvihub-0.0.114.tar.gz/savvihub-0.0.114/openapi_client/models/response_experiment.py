# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseExperiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token_id': 'int',
        'config_id': 'int',
        'created_by_id': 'int',
        'created_dt': 'datetime',
        'endpoints': 'ModelServiceEndpoints',
        'exit_code': 'int',
        'experiment_access_token': 'int',
        'experiment_config': 'int',
        'experiment_created_by': 'int',
        'experiment_kernel_cluster': 'int',
        'experiment_kernel_cluster_node': 'int',
        'experiment_organization': 'int',
        'experiment_project': 'int',
        'final_cost': 'float',
        'id': 'int',
        'immutable_slug': 'str',
        'kernel_cluster_id': 'int',
        'kernel_cluster_node_id': 'int',
        'message': 'str',
        'metrics_summary': 'ModelExperimentMetricsSummary',
        'name': 'str',
        'number': 'int',
        'organization_id': 'int',
        'plot_volume_id': 'int',
        'project_id': 'int',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'access_token_id': 'access_token_id',
        'config_id': 'config_id',
        'created_by_id': 'created_by_id',
        'created_dt': 'created_dt',
        'endpoints': 'endpoints',
        'exit_code': 'exit_code',
        'experiment_access_token': 'experiment_access_token',
        'experiment_config': 'experiment_config',
        'experiment_created_by': 'experiment_created_by',
        'experiment_kernel_cluster': 'experiment_kernel_cluster',
        'experiment_kernel_cluster_node': 'experiment_kernel_cluster_node',
        'experiment_organization': 'experiment_organization',
        'experiment_project': 'experiment_project',
        'final_cost': 'final_cost',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'kernel_cluster_id': 'kernel_cluster_id',
        'kernel_cluster_node_id': 'kernel_cluster_node_id',
        'message': 'message',
        'metrics_summary': 'metrics_summary',
        'name': 'name',
        'number': 'number',
        'organization_id': 'organization_id',
        'plot_volume_id': 'plot_volume_id',
        'project_id': 'project_id',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, access_token_id=None, config_id=None, created_by_id=None, created_dt=None, endpoints=None, exit_code=None, experiment_access_token=None, experiment_config=None, experiment_created_by=None, experiment_kernel_cluster=None, experiment_kernel_cluster_node=None, experiment_organization=None, experiment_project=None, final_cost=None, id=None, immutable_slug=None, kernel_cluster_id=None, kernel_cluster_node_id=None, message=None, metrics_summary=None, name=None, number=None, organization_id=None, plot_volume_id=None, project_id=None, status=None, status_last_updated=None, status_reason=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseExperiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token_id = None
        self._config_id = None
        self._created_by_id = None
        self._created_dt = None
        self._endpoints = None
        self._exit_code = None
        self._experiment_access_token = None
        self._experiment_config = None
        self._experiment_created_by = None
        self._experiment_kernel_cluster = None
        self._experiment_kernel_cluster_node = None
        self._experiment_organization = None
        self._experiment_project = None
        self._final_cost = None
        self._id = None
        self._immutable_slug = None
        self._kernel_cluster_id = None
        self._kernel_cluster_node_id = None
        self._message = None
        self._metrics_summary = None
        self._name = None
        self._number = None
        self._organization_id = None
        self._plot_volume_id = None
        self._project_id = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._updated_dt = None
        self.discriminator = None

        self.access_token_id = access_token_id
        self.config_id = config_id
        self.created_by_id = created_by_id
        self.created_dt = created_dt
        if endpoints is not None:
            self.endpoints = endpoints
        self.exit_code = exit_code
        self.experiment_access_token = experiment_access_token
        self.experiment_config = experiment_config
        self.experiment_created_by = experiment_created_by
        self.experiment_kernel_cluster = experiment_kernel_cluster
        self.experiment_kernel_cluster_node = experiment_kernel_cluster_node
        self.experiment_organization = experiment_organization
        self.experiment_project = experiment_project
        self.final_cost = final_cost
        self.id = id
        self.immutable_slug = immutable_slug
        self.kernel_cluster_id = kernel_cluster_id
        self.kernel_cluster_node_id = kernel_cluster_node_id
        self.message = message
        if metrics_summary is not None:
            self.metrics_summary = metrics_summary
        self.name = name
        self.number = number
        self.organization_id = organization_id
        self.plot_volume_id = plot_volume_id
        self.project_id = project_id
        self.status = status
        self.status_last_updated = status_last_updated
        self.status_reason = status_reason
        self.updated_dt = updated_dt

    @property
    def access_token_id(self):
        """Gets the access_token_id of this ResponseExperiment.  # noqa: E501


        :return: The access_token_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._access_token_id

    @access_token_id.setter
    def access_token_id(self, access_token_id):
        """Sets the access_token_id of this ResponseExperiment.


        :param access_token_id: The access_token_id of this ResponseExperiment.  # noqa: E501
        :type access_token_id: int
        """

        self._access_token_id = access_token_id

    @property
    def config_id(self):
        """Gets the config_id of this ResponseExperiment.  # noqa: E501


        :return: The config_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this ResponseExperiment.


        :param config_id: The config_id of this ResponseExperiment.  # noqa: E501
        :type config_id: int
        """
        if self.local_vars_configuration.client_side_validation and config_id is None:  # noqa: E501
            raise ValueError("Invalid value for `config_id`, must not be `None`")  # noqa: E501

        self._config_id = config_id

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ResponseExperiment.  # noqa: E501


        :return: The created_by_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ResponseExperiment.


        :param created_by_id: The created_by_id of this ResponseExperiment.  # noqa: E501
        :type created_by_id: int
        """
        if self.local_vars_configuration.client_side_validation and created_by_id is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseExperiment.  # noqa: E501


        :return: The created_dt of this ResponseExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseExperiment.


        :param created_dt: The created_dt of this ResponseExperiment.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def endpoints(self):
        """Gets the endpoints of this ResponseExperiment.  # noqa: E501


        :return: The endpoints of this ResponseExperiment.  # noqa: E501
        :rtype: ModelServiceEndpoints
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ResponseExperiment.


        :param endpoints: The endpoints of this ResponseExperiment.  # noqa: E501
        :type endpoints: ModelServiceEndpoints
        """

        self._endpoints = endpoints

    @property
    def exit_code(self):
        """Gets the exit_code of this ResponseExperiment.  # noqa: E501


        :return: The exit_code of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ResponseExperiment.


        :param exit_code: The exit_code of this ResponseExperiment.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_access_token(self):
        """Gets the experiment_access_token of this ResponseExperiment.  # noqa: E501


        :return: The experiment_access_token of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_access_token

    @experiment_access_token.setter
    def experiment_access_token(self, experiment_access_token):
        """Sets the experiment_access_token of this ResponseExperiment.


        :param experiment_access_token: The experiment_access_token of this ResponseExperiment.  # noqa: E501
        :type experiment_access_token: int
        """

        self._experiment_access_token = experiment_access_token

    @property
    def experiment_config(self):
        """Gets the experiment_config of this ResponseExperiment.  # noqa: E501


        :return: The experiment_config of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_config

    @experiment_config.setter
    def experiment_config(self, experiment_config):
        """Sets the experiment_config of this ResponseExperiment.


        :param experiment_config: The experiment_config of this ResponseExperiment.  # noqa: E501
        :type experiment_config: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_config is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_config`, must not be `None`")  # noqa: E501

        self._experiment_config = experiment_config

    @property
    def experiment_created_by(self):
        """Gets the experiment_created_by of this ResponseExperiment.  # noqa: E501


        :return: The experiment_created_by of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_created_by

    @experiment_created_by.setter
    def experiment_created_by(self, experiment_created_by):
        """Sets the experiment_created_by of this ResponseExperiment.


        :param experiment_created_by: The experiment_created_by of this ResponseExperiment.  # noqa: E501
        :type experiment_created_by: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_created_by`, must not be `None`")  # noqa: E501

        self._experiment_created_by = experiment_created_by

    @property
    def experiment_kernel_cluster(self):
        """Gets the experiment_kernel_cluster of this ResponseExperiment.  # noqa: E501


        :return: The experiment_kernel_cluster of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_kernel_cluster

    @experiment_kernel_cluster.setter
    def experiment_kernel_cluster(self, experiment_kernel_cluster):
        """Sets the experiment_kernel_cluster of this ResponseExperiment.


        :param experiment_kernel_cluster: The experiment_kernel_cluster of this ResponseExperiment.  # noqa: E501
        :type experiment_kernel_cluster: int
        """

        self._experiment_kernel_cluster = experiment_kernel_cluster

    @property
    def experiment_kernel_cluster_node(self):
        """Gets the experiment_kernel_cluster_node of this ResponseExperiment.  # noqa: E501


        :return: The experiment_kernel_cluster_node of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_kernel_cluster_node

    @experiment_kernel_cluster_node.setter
    def experiment_kernel_cluster_node(self, experiment_kernel_cluster_node):
        """Sets the experiment_kernel_cluster_node of this ResponseExperiment.


        :param experiment_kernel_cluster_node: The experiment_kernel_cluster_node of this ResponseExperiment.  # noqa: E501
        :type experiment_kernel_cluster_node: int
        """

        self._experiment_kernel_cluster_node = experiment_kernel_cluster_node

    @property
    def experiment_organization(self):
        """Gets the experiment_organization of this ResponseExperiment.  # noqa: E501


        :return: The experiment_organization of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_organization

    @experiment_organization.setter
    def experiment_organization(self, experiment_organization):
        """Sets the experiment_organization of this ResponseExperiment.


        :param experiment_organization: The experiment_organization of this ResponseExperiment.  # noqa: E501
        :type experiment_organization: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_organization is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_organization`, must not be `None`")  # noqa: E501

        self._experiment_organization = experiment_organization

    @property
    def experiment_project(self):
        """Gets the experiment_project of this ResponseExperiment.  # noqa: E501


        :return: The experiment_project of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_project

    @experiment_project.setter
    def experiment_project(self, experiment_project):
        """Sets the experiment_project of this ResponseExperiment.


        :param experiment_project: The experiment_project of this ResponseExperiment.  # noqa: E501
        :type experiment_project: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_project is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_project`, must not be `None`")  # noqa: E501

        self._experiment_project = experiment_project

    @property
    def final_cost(self):
        """Gets the final_cost of this ResponseExperiment.  # noqa: E501


        :return: The final_cost of this ResponseExperiment.  # noqa: E501
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """Sets the final_cost of this ResponseExperiment.


        :param final_cost: The final_cost of this ResponseExperiment.  # noqa: E501
        :type final_cost: float
        """

        self._final_cost = final_cost

    @property
    def id(self):
        """Gets the id of this ResponseExperiment.  # noqa: E501


        :return: The id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseExperiment.


        :param id: The id of this ResponseExperiment.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ResponseExperiment.  # noqa: E501


        :return: The immutable_slug of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ResponseExperiment.


        :param immutable_slug: The immutable_slug of this ResponseExperiment.  # noqa: E501
        :type immutable_slug: str
        """
        if self.local_vars_configuration.client_side_validation and immutable_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `immutable_slug`, must not be `None`")  # noqa: E501

        self._immutable_slug = immutable_slug

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseExperiment.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseExperiment.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseExperiment.  # noqa: E501
        :type kernel_cluster_id: int
        """

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def kernel_cluster_node_id(self):
        """Gets the kernel_cluster_node_id of this ResponseExperiment.  # noqa: E501


        :return: The kernel_cluster_node_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_node_id

    @kernel_cluster_node_id.setter
    def kernel_cluster_node_id(self, kernel_cluster_node_id):
        """Sets the kernel_cluster_node_id of this ResponseExperiment.


        :param kernel_cluster_node_id: The kernel_cluster_node_id of this ResponseExperiment.  # noqa: E501
        :type kernel_cluster_node_id: int
        """

        self._kernel_cluster_node_id = kernel_cluster_node_id

    @property
    def message(self):
        """Gets the message of this ResponseExperiment.  # noqa: E501


        :return: The message of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseExperiment.


        :param message: The message of this ResponseExperiment.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this ResponseExperiment.  # noqa: E501


        :return: The metrics_summary of this ResponseExperiment.  # noqa: E501
        :rtype: ModelExperimentMetricsSummary
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this ResponseExperiment.


        :param metrics_summary: The metrics_summary of this ResponseExperiment.  # noqa: E501
        :type metrics_summary: ModelExperimentMetricsSummary
        """

        self._metrics_summary = metrics_summary

    @property
    def name(self):
        """Gets the name of this ResponseExperiment.  # noqa: E501


        :return: The name of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseExperiment.


        :param name: The name of this ResponseExperiment.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this ResponseExperiment.  # noqa: E501


        :return: The number of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseExperiment.


        :param number: The number of this ResponseExperiment.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def organization_id(self):
        """Gets the organization_id of this ResponseExperiment.  # noqa: E501


        :return: The organization_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ResponseExperiment.


        :param organization_id: The organization_id of this ResponseExperiment.  # noqa: E501
        :type organization_id: int
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def plot_volume_id(self):
        """Gets the plot_volume_id of this ResponseExperiment.  # noqa: E501


        :return: The plot_volume_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._plot_volume_id

    @plot_volume_id.setter
    def plot_volume_id(self, plot_volume_id):
        """Sets the plot_volume_id of this ResponseExperiment.


        :param plot_volume_id: The plot_volume_id of this ResponseExperiment.  # noqa: E501
        :type plot_volume_id: int
        """
        if self.local_vars_configuration.client_side_validation and plot_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `plot_volume_id`, must not be `None`")  # noqa: E501

        self._plot_volume_id = plot_volume_id

    @property
    def project_id(self):
        """Gets the project_id of this ResponseExperiment.  # noqa: E501


        :return: The project_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ResponseExperiment.


        :param project_id: The project_id of this ResponseExperiment.  # noqa: E501
        :type project_id: int
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this ResponseExperiment.  # noqa: E501


        :return: The status of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseExperiment.


        :param status: The status of this ResponseExperiment.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseExperiment.  # noqa: E501


        :return: The status_last_updated of this ResponseExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseExperiment.


        :param status_last_updated: The status_last_updated of this ResponseExperiment.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this ResponseExperiment.  # noqa: E501


        :return: The status_reason of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ResponseExperiment.


        :param status_reason: The status_reason of this ResponseExperiment.  # noqa: E501
        :type status_reason: str
        """
        if self.local_vars_configuration.client_side_validation and status_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501

        self._status_reason = status_reason

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseExperiment.  # noqa: E501


        :return: The updated_dt of this ResponseExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseExperiment.


        :param updated_dt: The updated_dt of this ResponseExperiment.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseExperiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseExperiment):
            return True

        return self.to_dict() != other.to_dict()
