{"version":3,"sources":["webpack:///./app/components/discover/transactionsTable.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/views/performance/styles.tsx"],"names":["TransactionsTable","this","props","eventView","titles","getFields","tableData","columnOrder","baselineTransactionName","tableMeta","meta","generateSortLink","headers","getTitles","map","title","index","column","align","fieldAlignment","name","type","key","HeadCellContainer","target","t","StyledIconQuestion","size","color","direction","undefined","canSort","push","row","rowIndex","organization","location","generateLink","baselineData","handleBaselineClick","handleCellAction","fields","length","slice","resultsRow","field","String","fieldName","getAggregateAlias","fieldType","rendered","getFieldRenderer","fieldRenderer","query","data-test-id","to","isNumeric","includes","dataRow","BodyCellContainer","currentTransactionDuration","Number","duration","delta","Math","abs","relativeSpeed","getTransactionComparisonUrl","baselineEventSlug","generateEventSlug","regressionEventSlug","transaction","style","textAlign","onClick","getDuration","isLoading","cells","data","forEach","i","concat","renderRow","hasResults","loader","margin","isEmpty","emptyMessage","renderHeader","disablePadding","renderResults","React","space","overflowEllipsis","IconQuestion","DiscoverQuery","route","withApi","GridCell","GridCellNumber","DoubleHeaderContainer","ErrorPanel"],"mappings":"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","file":"app_components_discover_transactionsTable_tsx-app_utils_discover_discoverQuery_tsx.caeab6b54c4c77fe95f4.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, Query} from 'history';\n\nimport GuideAnchor from 'app/components/assistant/guideAnchor';\nimport SortLink from 'app/components/gridEditable/sortLink';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PanelTable from 'app/components/panels/panelTable';\nimport Tooltip from 'app/components/tooltip';\nimport {IconQuestion} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {TableData, TableDataRow} from 'app/utils/discover/discoverQuery';\nimport EventView, {MetaType} from 'app/utils/discover/eventView';\nimport {getFieldRenderer} from 'app/utils/discover/fieldRenderers';\nimport {Alignments, fieldAlignment, getAggregateAlias} from 'app/utils/discover/fields';\nimport {generateEventSlug} from 'app/utils/discover/urls';\nimport {getDuration} from 'app/utils/formatters';\nimport {BaselineQueryResults} from 'app/utils/performance/baseline/baselineQuery';\nimport CellAction, {Actions} from 'app/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'app/views/eventsV2/table/types';\nimport {GridCell, GridCellNumber} from 'app/views/performance/styles';\nimport {TrendsDataEvents} from 'app/views/performance/trends/types';\nimport {getTransactionComparisonUrl} from 'app/views/performance/utils';\n\ntype Props = {\n  eventView: EventView;\n  organization: Organization;\n  location: Location;\n  isLoading: boolean;\n  tableData: TableData | TrendsDataEvents | null;\n  columnOrder: TableColumn<React.ReactText>[];\n  titles?: string[];\n  baselineTransactionName: string | null;\n  baselineData: BaselineQueryResults | null;\n  handleBaselineClick?: (e: React.MouseEvent<Element>) => void;\n  generateLink?: Record<\n    string,\n    (\n      organization: Organization,\n      tableRow: TableDataRow,\n      query: Query\n    ) => LocationDescriptor\n  >;\n  handleCellAction?: (\n    c: TableColumn<React.ReactText>\n  ) => (a: Actions, v: React.ReactText) => void;\n};\n\nclass TransactionsTable extends React.PureComponent<Props> {\n  getTitles() {\n    const {eventView, titles} = this.props;\n    return titles ?? eventView.getFields();\n  }\n\n  renderHeader() {\n    const {tableData, columnOrder, baselineTransactionName} = this.props;\n\n    const tableMeta = tableData?.meta;\n    const generateSortLink = () => undefined;\n    const tableTitles = this.getTitles();\n\n    const headers = tableTitles.map((title, index) => {\n      const column = columnOrder[index];\n      const align: Alignments = fieldAlignment(column.name, column.type, tableMeta);\n\n      if (column.key === 'span_ops_breakdown.relative') {\n        return (\n          <HeadCellContainer key={index}>\n            <GuideAnchor target=\"span_op_relative_breakdowns\">\n              <SortLink\n                align={align}\n                title={\n                  title === t('operation duration') ? (\n                    <React.Fragment>\n                      {title}\n                      <Tooltip\n                        title={t(\n                          'Durations are calculated by summing span durations over the course of the transaction. Percentages are then calculated by dividing the individual op duration by the sum of total op durations. Overlapping/parallel spans are only counted once.'\n                        )}\n                      >\n                        <StyledIconQuestion size=\"xs\" color=\"gray400\" />\n                      </Tooltip>\n                    </React.Fragment>\n                  ) : (\n                    title\n                  )\n                }\n                direction={undefined}\n                canSort={false}\n                generateSortLink={generateSortLink}\n              />\n            </GuideAnchor>\n          </HeadCellContainer>\n        );\n      }\n\n      return (\n        <HeadCellContainer key={index}>\n          <SortLink\n            align={align}\n            title={title}\n            direction={undefined}\n            canSort={false}\n            generateSortLink={generateSortLink}\n          />\n        </HeadCellContainer>\n      );\n    });\n\n    if (baselineTransactionName) {\n      headers.push(\n        <HeadCellContainer key=\"baseline\">\n          <SortLink\n            align=\"right\"\n            title={t('Compared to Baseline')}\n            direction={undefined}\n            canSort={false}\n            generateSortLink={generateSortLink}\n          />\n        </HeadCellContainer>\n      );\n    }\n\n    return headers;\n  }\n\n  renderRow(\n    row: TableDataRow,\n    rowIndex: number,\n    columnOrder: TableColumn<React.ReactText>[],\n    tableMeta: MetaType\n  ): React.ReactNode[] {\n    const {\n      eventView,\n      organization,\n      location,\n      generateLink,\n      baselineTransactionName,\n      baselineData,\n      handleBaselineClick,\n      handleCellAction,\n      titles,\n    } = this.props;\n    const fields = eventView.getFields();\n\n    if (titles && titles.length) {\n      // Slice to match length of given titles\n      columnOrder = columnOrder.slice(0, titles.length);\n    }\n\n    const resultsRow = columnOrder.map((column, index) => {\n      const field = String(column.key);\n      // TODO add a better abstraction for this in fieldRenderers.\n      const fieldName = getAggregateAlias(field);\n      const fieldType = tableMeta[fieldName];\n\n      const fieldRenderer = getFieldRenderer(field, tableMeta);\n      let rendered = fieldRenderer(row, {organization, location});\n\n      const target = generateLink?.[field]?.(organization, row, location.query);\n\n      if (target) {\n        rendered = (\n          <Link data-test-id={`view-${fields[index]}`} to={target}>\n            {rendered}\n          </Link>\n        );\n      }\n\n      const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);\n      const key = `${rowIndex}:${column.key}:${index}`;\n      rendered = isNumeric ? (\n        <GridCellNumber>{rendered}</GridCellNumber>\n      ) : (\n        <GridCell>{rendered}</GridCell>\n      );\n\n      if (handleCellAction) {\n        rendered = (\n          <CellAction\n            column={column}\n            dataRow={row}\n            handleCellAction={handleCellAction(column)}\n          >\n            {rendered}\n          </CellAction>\n        );\n      }\n\n      return <BodyCellContainer key={key}>{rendered}</BodyCellContainer>;\n    });\n\n    if (baselineTransactionName) {\n      if (baselineData) {\n        const currentTransactionDuration: number =\n          Number(row['transaction.duration']) || 0;\n        const duration = baselineData['transaction.duration'];\n\n        const delta = Math.abs(currentTransactionDuration - duration);\n\n        const relativeSpeed =\n          currentTransactionDuration < duration\n            ? t('faster')\n            : currentTransactionDuration > duration\n            ? t('slower')\n            : '';\n\n        const target = getTransactionComparisonUrl({\n          organization,\n          baselineEventSlug: generateEventSlug(baselineData),\n          regressionEventSlug: generateEventSlug(row),\n          transaction: baselineTransactionName,\n          query: location.query,\n        });\n\n        resultsRow.push(\n          <BodyCellContainer\n            data-test-id=\"baseline-cell\"\n            key={`${rowIndex}-baseline`}\n            style={{textAlign: 'right'}}\n          >\n            <GridCell>\n              <Link to={target} onClick={handleBaselineClick}>\n                {`${getDuration(delta / 1000, delta < 1000 ? 0 : 2)} ${relativeSpeed}`}\n              </Link>\n            </GridCell>\n          </BodyCellContainer>\n        );\n      } else {\n        resultsRow.push(\n          <BodyCellContainer data-test-id=\"baseline-cell\" key={`${rowIndex}-baseline`}>\n            {'\\u2014'}\n          </BodyCellContainer>\n        );\n      }\n    }\n\n    return resultsRow;\n  }\n\n  renderResults() {\n    const {isLoading, tableData, columnOrder} = this.props;\n    let cells: React.ReactNode[] = [];\n\n    if (isLoading) {\n      return cells;\n    }\n    if (!tableData || !tableData.meta || !tableData.data) {\n      return cells;\n    }\n\n    tableData.data.forEach((row, i: number) => {\n      // Another check to appease tsc\n      if (!tableData.meta) {\n        return;\n      }\n      cells = cells.concat(this.renderRow(row, i, columnOrder, tableData.meta));\n    });\n    return cells;\n  }\n\n  render() {\n    const {isLoading, tableData} = this.props;\n\n    const hasResults =\n      tableData && tableData.data && tableData.meta && tableData.data.length > 0;\n\n    // Custom set the height so we don't have layout shift when results are loaded.\n    const loader = <LoadingIndicator style={{margin: '70px auto'}} />;\n\n    return (\n      <PanelTable\n        isEmpty={!hasResults}\n        emptyMessage={t('No transactions found')}\n        headers={this.renderHeader()}\n        isLoading={isLoading}\n        disablePadding\n        loader={loader}\n      >\n        {this.renderResults()}\n      </PanelTable>\n    );\n  }\n}\n\nconst HeadCellContainer = styled('div')`\n  padding: ${space(2)};\n`;\n\nconst BodyCellContainer = styled('div')`\n  padding: ${space(1)} ${space(2)};\n  ${overflowEllipsis};\n`;\n\nconst StyledIconQuestion = styled(IconQuestion)`\n  position: relative;\n  top: 2px;\n  left: 4px;\n`;\n\nexport default TransactionsTable;\n","import * as React from 'react';\n\nimport {MetaType} from 'app/utils/discover/eventView';\nimport withApi from 'app/utils/withApi';\n\nimport GenericDiscoverQuery, {DiscoverQueryProps} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nfunction DiscoverQuery(props: DiscoverQueryProps) {\n  return <GenericDiscoverQuery<TableData, {}> route=\"eventsv2\" {...props} />;\n}\n\nexport default withApi(DiscoverQuery);\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nexport const GridCell = styled('div')`\n  font-size: 14px;\n`;\n\nexport const GridCellNumber = styled(GridCell)`\n  text-align: right;\n`;\n\nexport const DoubleHeaderContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  padding: ${space(2)} ${space(3)} ${space(1)} ${space(3)};\n  grid-gap: ${space(3)};\n`;\n\nexport const ErrorPanel = styled('div')`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: 200px;\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n"],"sourceRoot":""}