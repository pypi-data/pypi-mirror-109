{"version":3,"sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/eventsV2/table/queryField.tsx"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","memoize","tag","query","endpointParams","props","api","organization","projectIds","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","this","getEventFieldValues","cache","clear","prevProps","isEqual","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","React","withApi","withTags","MEASUREMENTS","entries","WEB_VITAL_DETAILS","Measurements","children","WrappedComponent","WithTags","TagStore","setState","undefined","unsubscribe","state","getDisplayName","QueryField","selected","value","current","fieldValue","cloneDeep","kind","FieldValueKind","meta","function","parameters","forEach","param","i","getFieldOrTagOrMeasurementValue","defaultValue","validateColumnTypes","columnTypes","length","triggerChange","newColumn","onChange","fieldOptions","fieldName","measurementName","spanOperationBreakdownName","tagName","indexOf","dataType","unknown","funcName","appendFieldIfUnknown","parameterDescriptions","index","fieldParameter","required","options","label","disabled","inFieldLabels","filterAggregateParameters","hideParameterSelector","inputs","descriptor","aggregateParameters","placeholder","t","handleFieldParameterChange","inFieldLabel","handler","handleScalarParameterChange","handleRefinementChange","inputProps","onUpdate","BufferedInput","type","inputMode","pattern","gridColumns","requiredInputs","push","BlankSpace","text","tagType","shouldRenderTag","className","takeFocus","filterPrimaryOptions","hidePrimarySelector","getFieldData","allFieldOptions","selectProps","handleFieldChange","autoFocus","styles","singleValue","provided","display","justifyContent","alignItems","width","option","renderParameterInputs","Container","handleEquationChange","components","Option","data","data-test-id","renderTag","SingleValue","input","p","space","isValid","event","target","validity","valid","StyledInput","ref","handleChange","onBlur","handleBlur","Input","theme","backgroundSecondary","borderRadius","fontSizeMedium","gray300"],"mappings":"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","file":"app_components_events_searchBar_tsx-app_views_eventsV2_table_queryField_tsx.bacf9aab68a98560eb53.js","sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    return (\n      <Measurements>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  {...this.props}\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\n\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\nconst MEASUREMENTS: MeasurementCollection = Object.fromEntries(\n  Object.entries(WEB_VITAL_DETAILS).map(([key, value]) => {\n    const newValue: Measurement = {\n      name: value.name,\n      key,\n    };\n    return [key, newValue];\n  })\n);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements(props: Props) {\n  return (\n    <React.Fragment>\n      {props.children({\n        measurements: MEASUREMENTS,\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default Measurements;\n","import * as React from 'react';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {CSSProperties} from 'react';\nimport * as React from 'react';\nimport {components, OptionProps, SingleValueProps} from 'react-select';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport Tag from 'app/components/tag';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {SelectValue} from 'app/types';\nimport {\n  AggregateParameter,\n  AggregationKey,\n  ColumnType,\n  QueryFieldValue,\n  ValidateColumnTypes,\n} from 'app/utils/discover/fields';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\nimport {FieldValue, FieldValueColumns, FieldValueKind} from './types';\n\ntype FieldValueOption = SelectValue<FieldValue>;\n\ntype FieldOptions = Record<string, FieldValueOption>;\n\n// Intermediate type that combines the current column\n// data with the AggregateParameter type.\ntype ParameterDescription =\n  | {\n      kind: 'value';\n      value: string;\n      dataType: ColumnType;\n      required: boolean;\n    }\n  | {\n      kind: 'column';\n      value: FieldValue | null;\n      options: FieldValueOption[];\n      required: boolean;\n    };\n\ntype Props = {\n  className?: string;\n  takeFocus?: boolean;\n  fieldValue: QueryFieldValue;\n  fieldOptions: FieldOptions;\n  /**\n   * The number of columns to render. Columns that do not have a parameter will\n   * render an empty parameter placeholder. Leave blank to avoid adding spacers.\n   */\n  gridColumns?: number;\n  /**\n   * Filter the options in the primary selector. Useful if you only want to\n   * show a subset of selectable items.\n   *\n   * NOTE: This is different from passing an already filtered fieldOptions\n   * list, as tag items in the list may be used as parameters to functions.\n   */\n  filterPrimaryOptions?: (option: FieldValueOption) => boolean;\n  /**\n   * Function to filter the options that are used as parameters for function/aggregate.\n   */\n  filterAggregateParameters?: (option: FieldValueOption) => boolean;\n  /**\n   * Whether or not to add labels inside of the input fields, currently only\n   * used for the metric alert builder.\n   */\n  inFieldLabels?: boolean;\n  /**\n   * Whether or not to add the tag explaining the FieldValueKind of each field\n   */\n  shouldRenderTag?: boolean;\n  onChange: (fieldValue: QueryFieldValue) => void;\n  disabled?: boolean;\n  hidePrimarySelector?: boolean;\n  hideParameterSelector?: boolean;\n};\n\n// Type for completing generics in react-select\ntype OptionType = {\n  label: string;\n  value: FieldValue;\n};\n\nclass QueryField extends React.Component<Props> {\n  handleFieldChange = (selected?: FieldValueOption | null) => {\n    if (!selected) {\n      return;\n    }\n    const {value} = selected;\n    const current = this.props.fieldValue;\n    let fieldValue: QueryFieldValue = cloneDeep(this.props.fieldValue);\n\n    switch (value.kind) {\n      case FieldValueKind.TAG:\n      case FieldValueKind.MEASUREMENT:\n      case FieldValueKind.BREAKDOWN:\n      case FieldValueKind.FIELD:\n        fieldValue = {kind: 'field', field: value.meta.name};\n        break;\n      case FieldValueKind.FUNCTION:\n        if (current.kind === 'field') {\n          fieldValue = {\n            kind: 'function',\n            function: [value.meta.name as AggregationKey, '', undefined],\n          };\n        } else if (current.kind === 'function') {\n          fieldValue = {\n            kind: 'function',\n            function: [\n              value.meta.name as AggregationKey,\n              current.function[1],\n              current.function[2],\n            ],\n          };\n        }\n        break;\n      default:\n        throw new Error('Invalid field type found in column picker');\n    }\n\n    if (value.kind === FieldValueKind.FUNCTION) {\n      value.meta.parameters.forEach((param: AggregateParameter, i: number) => {\n        if (fieldValue.kind !== 'function') {\n          return;\n        }\n        if (param.kind === 'column') {\n          const field = this.getFieldOrTagOrMeasurementValue(fieldValue.function[i + 1]);\n          if (field === null) {\n            fieldValue.function[i + 1] = param.defaultValue || '';\n          } else if (\n            (field.kind === FieldValueKind.FIELD ||\n              field.kind === FieldValueKind.TAG ||\n              field.kind === FieldValueKind.MEASUREMENT ||\n              field.kind === FieldValueKind.BREAKDOWN) &&\n            validateColumnTypes(param.columnTypes as ValidateColumnTypes, field)\n          ) {\n            // New function accepts current field.\n            fieldValue.function[i + 1] = field.meta.name;\n          } else {\n            // field does not fit within new function requirements, use the default.\n            fieldValue.function[i + 1] = param.defaultValue || '';\n            fieldValue.function[i + 2] = undefined;\n          }\n        } else if (param.kind === 'value') {\n          fieldValue.function[i + 1] = param.defaultValue || '';\n        }\n      });\n\n      if (fieldValue.kind === 'function') {\n        if (value.meta.parameters.length === 0) {\n          fieldValue.function = [fieldValue.function[0], '', undefined];\n        } else if (value.meta.parameters.length === 1) {\n          fieldValue.function[2] = undefined;\n        }\n      }\n    }\n\n    this.triggerChange(fieldValue);\n  };\n\n  handleEquationChange = (value: string) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === FieldValueKind.EQUATION) {\n      newColumn.field = value;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  handleFieldParameterChange = ({value}) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === 'function') {\n      newColumn.function[1] = value.meta.name;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  handleScalarParameterChange = (value: string) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === 'function') {\n      newColumn.function[1] = value;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  handleRefinementChange = (value: string) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === 'function') {\n      newColumn.function[2] = value;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  triggerChange(fieldValue: QueryFieldValue) {\n    this.props.onChange(fieldValue);\n  }\n\n  getFieldOrTagOrMeasurementValue(name: string | undefined): FieldValue | null {\n    const {fieldOptions} = this.props;\n    if (name === undefined) {\n      return null;\n    }\n\n    const fieldName = `field:${name}`;\n    if (fieldOptions[fieldName]) {\n      return fieldOptions[fieldName].value;\n    }\n\n    const measurementName = `measurement:${name}`;\n    if (fieldOptions[measurementName]) {\n      return fieldOptions[measurementName].value;\n    }\n\n    const spanOperationBreakdownName = `span_op_breakdown:${name}`;\n    if (fieldOptions[spanOperationBreakdownName]) {\n      return fieldOptions[spanOperationBreakdownName].value;\n    }\n\n    const tagName =\n      name.indexOf('tags[') === 0\n        ? `tag:${name.replace(/tags\\[(.*?)\\]/, '$1')}`\n        : `tag:${name}`;\n\n    if (fieldOptions[tagName]) {\n      return fieldOptions[tagName].value;\n    }\n\n    // Likely a tag that was deleted but left behind in a saved query\n    // Cook up a tag option so select control works.\n    if (name.length > 0) {\n      return {\n        kind: FieldValueKind.TAG,\n        meta: {\n          name,\n          dataType: 'string',\n          unknown: true,\n        },\n      };\n    }\n    return null;\n  }\n\n  getFieldData() {\n    let field: FieldValue | null = null;\n\n    const {fieldValue} = this.props;\n    let {fieldOptions} = this.props;\n\n    if (fieldValue.kind === 'function') {\n      const funcName = `function:${fieldValue.function[0]}`;\n      if (fieldOptions[funcName] !== undefined) {\n        field = fieldOptions[funcName].value;\n      }\n    }\n\n    if (fieldValue.kind === 'field') {\n      field = this.getFieldOrTagOrMeasurementValue(fieldValue.field);\n      fieldOptions = this.appendFieldIfUnknown(fieldOptions, field);\n    }\n\n    let parameterDescriptions: ParameterDescription[] = [];\n    // Generate options and values for each parameter.\n    if (\n      field &&\n      field.kind === FieldValueKind.FUNCTION &&\n      field.meta.parameters.length > 0 &&\n      fieldValue.kind === FieldValueKind.FUNCTION\n    ) {\n      parameterDescriptions = field.meta.parameters.map(\n        (param, index: number): ParameterDescription => {\n          if (param.kind === 'column') {\n            const fieldParameter = this.getFieldOrTagOrMeasurementValue(\n              fieldValue.function[1]\n            );\n            fieldOptions = this.appendFieldIfUnknown(fieldOptions, fieldParameter);\n            return {\n              kind: 'column',\n              value: fieldParameter,\n              required: param.required,\n              options: Object.values(fieldOptions).filter(\n                ({value}) =>\n                  (value.kind === FieldValueKind.FIELD ||\n                    value.kind === FieldValueKind.TAG ||\n                    value.kind === FieldValueKind.MEASUREMENT ||\n                    value.kind === FieldValueKind.BREAKDOWN) &&\n                  validateColumnTypes(param.columnTypes as ValidateColumnTypes, value)\n              ),\n            };\n          }\n\n          return {\n            kind: 'value',\n            value:\n              (fieldValue.kind === 'function' && fieldValue.function[index + 1]) ||\n              param.defaultValue ||\n              '',\n            dataType: param.dataType,\n            required: param.required,\n          };\n        }\n      );\n    }\n    return {field, fieldOptions, parameterDescriptions};\n  }\n\n  appendFieldIfUnknown(\n    fieldOptions: FieldOptions,\n    field: FieldValue | null\n  ): FieldOptions {\n    if (!field) {\n      return fieldOptions;\n    }\n\n    if (field && field.kind === FieldValueKind.TAG && field.meta.unknown) {\n      // Clone the options so we don't mutate other rows.\n      fieldOptions = Object.assign({}, fieldOptions);\n      fieldOptions[field.meta.name] = {label: field.meta.name, value: field};\n    }\n\n    return fieldOptions;\n  }\n\n  renderParameterInputs(parameters: ParameterDescription[]): React.ReactNode[] {\n    const {\n      disabled,\n      inFieldLabels,\n      filterAggregateParameters,\n      hideParameterSelector,\n    } = this.props;\n    const inputs = parameters.map((descriptor: ParameterDescription, index: number) => {\n      if (descriptor.kind === 'column' && descriptor.options.length > 0) {\n        if (hideParameterSelector) {\n          return null;\n        }\n        const aggregateParameters = filterAggregateParameters\n          ? descriptor.options.filter(filterAggregateParameters)\n          : descriptor.options;\n\n        return (\n          <SelectControl\n            key=\"select\"\n            name=\"parameter\"\n            placeholder={t('Select value')}\n            options={aggregateParameters}\n            value={descriptor.value}\n            required={descriptor.required}\n            onChange={this.handleFieldParameterChange}\n            inFieldLabel={inFieldLabels ? t('Parameter: ') : undefined}\n            disabled={disabled}\n          />\n        );\n      }\n      if (descriptor.kind === 'value') {\n        const handler =\n          index === 0 ? this.handleScalarParameterChange : this.handleRefinementChange;\n\n        const inputProps = {\n          required: descriptor.required,\n          value: descriptor.value,\n          onUpdate: handler,\n          disabled,\n        };\n        switch (descriptor.dataType) {\n          case 'number':\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:number\"\n                type=\"text\"\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*(\\.[0-9]*)?\"\n                {...inputProps}\n              />\n            );\n          case 'integer':\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:integer\"\n                type=\"text\"\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*\"\n                {...inputProps}\n              />\n            );\n          default:\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:text\"\n                type=\"text\"\n                {...inputProps}\n              />\n            );\n        }\n      }\n      throw new Error(`Unknown parameter type encountered for ${this.props.fieldValue}`);\n    });\n\n    // Add enough disabled inputs to fill the grid up.\n    // We always have 1 input.\n    const {gridColumns} = this.props;\n    const requiredInputs = (gridColumns ?? inputs.length + 1) - inputs.length - 1;\n    if (gridColumns !== undefined && requiredInputs > 0) {\n      for (let i = 0; i < requiredInputs; i++) {\n        inputs.push(<BlankSpace key={i} />);\n      }\n    }\n\n    return inputs;\n  }\n\n  renderTag(kind) {\n    const {shouldRenderTag} = this.props;\n    if (shouldRenderTag === false) {\n      return null;\n    }\n    let text, tagType;\n    switch (kind) {\n      case FieldValueKind.FUNCTION:\n        text = 'f(x)';\n        tagType = 'success';\n        break;\n      case FieldValueKind.MEASUREMENT:\n        text = 'measure';\n        tagType = 'info';\n        break;\n      case FieldValueKind.BREAKDOWN:\n        text = 'breakdown';\n        tagType = 'error';\n        break;\n      case FieldValueKind.TAG:\n        text = kind;\n        tagType = 'warning';\n        break;\n      case FieldValueKind.FIELD:\n        text = kind;\n        tagType = 'highlight';\n        break;\n      default:\n        text = kind;\n    }\n    return <Tag type={tagType}>{text}</Tag>;\n  }\n\n  render() {\n    const {\n      className,\n      takeFocus,\n      filterPrimaryOptions,\n      fieldValue,\n      inFieldLabels,\n      disabled,\n      hidePrimarySelector,\n      gridColumns,\n    } = this.props;\n    const {field, fieldOptions, parameterDescriptions} = this.getFieldData();\n\n    const allFieldOptions = filterPrimaryOptions\n      ? Object.values(fieldOptions).filter(filterPrimaryOptions)\n      : Object.values(fieldOptions);\n\n    const selectProps: ControlProps<FieldValueOption> = {\n      name: 'field',\n      options: Object.values(allFieldOptions),\n      placeholder: t('(Required)'),\n      value: field,\n      onChange: this.handleFieldChange,\n      inFieldLabel: inFieldLabels ? t('Function: ') : undefined,\n      disabled,\n    };\n    if (takeFocus && field === null) {\n      selectProps.autoFocus = true;\n    }\n\n    const styles = {\n      singleValue(provided: CSSProperties) {\n        const custom = {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: 'calc(100% - 10px)',\n        };\n        return {...provided, ...custom};\n      },\n      option(provided: CSSProperties) {\n        const custom = {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: '100%',\n        };\n        return {...provided, ...custom};\n      },\n    };\n\n    const parameters = this.renderParameterInputs(parameterDescriptions);\n\n    if (fieldValue.kind === FieldValueKind.EQUATION) {\n      return (\n        <Container className={className} gridColumns={1}>\n          <BufferedInput\n            name=\"refinement\"\n            key=\"parameter:text\"\n            type=\"text\"\n            required\n            value={fieldValue.field}\n            onUpdate={this.handleEquationChange}\n          />\n        </Container>\n      );\n    }\n\n    return (\n      <Container\n        className={className}\n        gridColumns={gridColumns ? gridColumns : parameters.length + 1}\n      >\n        {!hidePrimarySelector && (\n          <SelectControl\n            {...selectProps}\n            styles={!inFieldLabels ? styles : undefined}\n            components={{\n              Option: ({label, data, ...props}: OptionProps<OptionType>) => (\n                <components.Option label={label} data={data} {...props}>\n                  <span data-test-id=\"label\">{label}</span>\n                  {this.renderTag(data.value.kind)}\n                </components.Option>\n              ),\n              SingleValue: ({data, ...props}: SingleValueProps<OptionType>) => (\n                <components.SingleValue data={data} {...props}>\n                  <span data-test-id=\"label\">{data.label}</span>\n                  {this.renderTag(data.value.kind)}\n                </components.SingleValue>\n              ),\n            }}\n          />\n        )}\n        {parameters}\n      </Container>\n    );\n  }\n}\n\nfunction validateColumnTypes(\n  columnTypes: ValidateColumnTypes,\n  input: FieldValueColumns\n): boolean {\n  if (typeof columnTypes === 'function') {\n    return columnTypes({name: input.meta.name, dataType: input.meta.dataType});\n  }\n\n  return columnTypes.includes(input.meta.dataType);\n}\n\nconst Container = styled('div')<{gridColumns: number}>`\n  display: grid;\n  grid-template-columns: repeat(${p => p.gridColumns}, 1fr);\n  grid-column-gap: ${space(1)};\n  align-items: center;\n\n  flex-grow: 1;\n`;\n\ntype InputProps = React.HTMLProps<HTMLInputElement> & {\n  onUpdate: (value: string) => void;\n  value: string;\n};\ntype InputState = {value: string};\n\n/**\n * Because controlled inputs fire onChange on every key stroke,\n * we can't update the QueryField that often as it would re-render\n * the input elements causing focus to be lost.\n *\n * Using a buffered input lets us throttle rendering and enforce data\n * constraints better.\n */\nclass BufferedInput extends React.Component<InputProps, InputState> {\n  constructor(props: InputProps) {\n    super(props);\n    this.input = React.createRef();\n  }\n\n  state: InputState = {\n    value: this.props.value,\n  };\n\n  private input: React.RefObject<HTMLInputElement>;\n\n  get isValid() {\n    if (!this.input.current) {\n      return true;\n    }\n    return this.input.current.validity.valid;\n  }\n\n  handleBlur = () => {\n    if (this.isValid) {\n      this.props.onUpdate(this.state.value);\n    } else {\n      this.setState({value: this.props.value});\n    }\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.isValid) {\n      this.setState({value: event.target.value});\n    }\n  };\n\n  render() {\n    const {onUpdate: _, ...props} = this.props;\n    return (\n      <StyledInput\n        {...props}\n        ref={this.input}\n        className=\"form-control\"\n        value={this.state.value}\n        onChange={this.handleChange}\n        onBlur={this.handleBlur}\n      />\n    );\n  }\n}\n\n// Set a min-width to allow shrinkage in grid.\nconst StyledInput = styled(Input)`\n  /* Match the height of the select boxes */\n  height: 41px;\n  min-width: 50px;\n`;\n\nconst BlankSpace = styled('div')`\n  /* Match the height of the select boxes */\n  height: 41px;\n  min-width: 50px;\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:after {\n    font-size: ${p => p.theme.fontSizeMedium};\n    content: '${t('No parameter')}';\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nexport {QueryField};\n"],"sourceRoot":""}