{"version":3,"sources":["webpack:///./app/components/modals/emailVerificationModal.tsx","webpack:///./app/components/tag.tsx","webpack:///./app/utils/withApi.tsx"],"names":["EmailVerificationModal","Header","Body","actionMessage","closeButton","t","tct","link","to","data-test-id","EmailAddresses","withRouter","withApi","TAG_HEIGHT","Tag","type","icon","tooltipText","onClick","href","onDismiss","children","textMaxWidth","props","iconsProps","size","color","theme","iconColor","tag","title","containerDisplayMode","Background","React","IconWrapper","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","label","isCircled","TagWrapper","p","fontSizeSmall","background","space","includes","white","gray500","Button","WrappedComponent","persistInFlight","api","Client","this","clear","getDisplayName"],"mappings":"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","file":"app_components_modals_emailVerificationModal_tsx-app_components_tag_tsx.4a7f345048f6648cab2c.js","sourcesContent":["import * as React from 'react';\nimport {withRouter} from 'react-router';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Link from 'app/components/links/link';\nimport {t, tct} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport {EmailAddresses} from 'app/views/settings/account/accountEmails';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    actionMessage?: string;\n  };\n\nfunction EmailVerificationModal({\n  Header,\n  Body,\n  actionMessage = 'taking this action',\n}: Props) {\n  return (\n    <React.Fragment>\n      <Header closeButton>{t('Action Required')}</Header>\n      <Body>\n        <TextBlock>\n          {tct('Please verify your email before [actionMessage], or [link].', {\n            actionMessage,\n            link: (\n              <Link to=\"/settings/account/emails/\" data-test-id=\"email-settings-link\">\n                {t('go to your email settings')}\n              </Link>\n            ),\n          })}\n        </TextBlock>\n        <EmailAddresses />\n      </Body>\n    </React.Fragment>\n  );\n}\n\nexport default withRouter(withApi(EmailVerificationModal));\nexport {EmailVerificationModal};\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport Tooltip from 'app/components/tooltip';\nimport {IconClose, IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {defined} from 'app/utils';\nimport theme, {Color, Theme} from 'app/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ntype Props = React.HTMLAttributes<HTMLSpanElement> & {\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: React.ComponentProps<typeof Link>['to'];\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n};\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  function tagIcon() {\n    if (React.isValidElement(icon)) {\n      return <IconWrapper>{React.cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    } else if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return <TagWrapper {...props}>{tagWithParent()}</TagWrapper>;\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p => (['black', 'focus'].includes(p.type) ? p.theme.white : p.theme.gray500)};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n"],"sourceRoot":""}