{"version":3,"sources":["webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/components/forms/input.tsx","webpack:///./app/views/alerts/rules/filter.tsx","webpack:///./app/views/alerts/rules/teamFilter.tsx"],"names":["AlertHeader","router","organization","activeTab","alertRulesLink","className","to","slug","t","BorderlessHeader","StyledLayoutHeaderContent","StyledLayoutTitle","Actions","gap","iconProps","size","priority","referrer","showPermissionGuide","onClick","e","preventDefault","navigateTo","href","icon","aria-label","TabLayoutHeader","underlined","features","hasFeature","Layout","p","theme","breakpoints","space","ButtonBar","Input","otherProps","classNames","omit","FilterSection","id","label","items","toggleSection","toggleFilter","checkedItemsCount","filter","item","checked","length","Fragment","Header","isChecked","isIndeterminate","event","stopPropagation","map","ListItem","value","TeamName","Filter","sectionId","props","onFilterChange","section","dropdownSections","find","dropdownSection","newSelection","Set","has","add","activeItems","flat","this","dropdownItems","header","checkedQuantity","getNumberOfActiveFilters","dropDownButtonProps","children","hasDarkBorderBottomColor","tn","menuWidth","blendWithActor","alwaysRenderMenu","button","isOpen","getActorProps","StyledDropdownButton","showChevron","data-test-id","getMenuProps","MenuContent","blendCorner","alignMenu","width","List","Component","Content","backgroundSecondary","gray300","fontSizeMedium","border","DropdownButton","zIndex","dropdown","CheckboxFancy","blue300","overflowEllipsis","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","undefined","Array","isArray","TeamFilter","teams","selectedTeams","showStatus","selectedStatus","handleChangeFilter","useState","teamFilterSearch","setTeamFilterSearch","statusOptions","filtered","additionalOptions","teamItems","name","toLowerCase","includes","StyledInput","autoFocus","placeholder","onChange","target","gray200"],"mappings":"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","file":"app_views_alerts_list_header_tsx-app_views_alerts_rules_teamFilter_tsx.f389a8155dbb79d6d497.js","sourcesContent":["import * as React from 'react';\nimport {InjectedRouter} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport * as Layout from 'app/components/layouts/thirds';\nimport {IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\n\ntype Props = {\n  router: InjectedRouter;\n  organization: Organization;\n  activeTab: 'stream' | 'rules';\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <React.Fragment>\n      <BorderlessHeader>\n        <StyledLayoutHeaderContent>\n          <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n        </StyledLayoutHeaderContent>\n        <Layout.HeaderActions>\n          <Actions gap={1}>\n            <CreateAlertButton\n              organization={organization}\n              iconProps={{size: 'sm'}}\n              priority=\"primary\"\n              referrer=\"alert_stream\"\n              showPermissionGuide\n            >\n              {t('Create Alert Rule')}\n            </CreateAlertButton>\n            <Button\n              onClick={handleNavigateToSettings}\n              href=\"#\"\n              icon={<IconSettings size=\"sm\" />}\n              aria-label=\"Settings\"\n            />\n          </Actions>\n        </Layout.HeaderActions>\n      </BorderlessHeader>\n      <TabLayoutHeader>\n        <Layout.HeaderNavTabs underlined>\n          <Feature features={['alert-details-redesign']} organization={organization}>\n            {({hasFeature}) =>\n              !hasFeature ? (\n                <React.Fragment>\n                  <Feature features={['incidents']} organization={organization}>\n                    <li className={activeTab === 'stream' ? 'active' : ''}>\n                      <GlobalSelectionLink\n                        to={`/organizations/${organization.slug}/alerts/`}\n                      >\n                        {t('Metric Alerts')}\n                      </GlobalSelectionLink>\n                    </li>\n                  </Feature>\n                  {alertRulesLink}\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  {alertRulesLink}\n                  <li className={activeTab === 'stream' ? 'active' : ''}>\n                    <GlobalSelectionLink\n                      to={`/organizations/${organization.slug}/alerts/`}\n                    >\n                      {t('History')}\n                    </GlobalSelectionLink>\n                  </li>\n                </React.Fragment>\n              )\n            }\n          </Feature>\n        </Layout.HeaderNavTabs>\n      </TabLayoutHeader>\n    </React.Fragment>\n  );\n};\n\nexport default AlertHeader;\n\nconst BorderlessHeader = styled(Layout.Header)`\n  border-bottom: 0;\n\n  /* Not enough buttons to change direction for tablet view */\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: 1fr auto;\n  }\n`;\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: 0;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst TabLayoutHeader = styled(Layout.Header)`\n  padding-top: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    padding-top: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\ntype Props = {\n  className?: string;\n} & React.HTMLProps<HTMLInputElement>;\n\nexport default function Input({className, ...otherProps}: Props) {\n  return (\n    <input\n      className={classNames('form-control', className)}\n      {...omit(otherProps, 'children')}\n    />\n  );\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';\nimport DropdownButton from 'app/components/dropdownButton';\nimport DropdownControl, {Content} from 'app/components/dropdownControl';\nimport {IconFilter} from 'app/icons';\nimport {t, tn} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\n\ntype DropdownButtonProps = React.ComponentProps<typeof DropdownButton>;\n\nexport type RenderProps = {\n  toggleFilter: (filter: string) => void;\n};\n\ntype DropdownSection = {\n  id: string;\n  label: string;\n  items: Array<{label: string; value: string; checked: boolean; filtered: boolean}>;\n};\n\ntype SectionProps = DropdownSection & {\n  toggleSection: (id: string) => void;\n  toggleFilter: (section: string, value: string) => void;\n};\n\nfunction FilterSection({id, label, items, toggleSection, toggleFilter}: SectionProps) {\n  const checkedItemsCount = items.filter(item => item.checked).length;\n  return (\n    <Fragment>\n      <Header>\n        <span>{label}</span>\n        <CheckboxFancy\n          isChecked={checkedItemsCount === items.length}\n          isIndeterminate={checkedItemsCount > 0 && checkedItemsCount !== items.length}\n          onClick={event => {\n            event.stopPropagation();\n            toggleSection(id);\n          }}\n        />\n      </Header>\n      {items.map(item => (\n        <ListItem\n          key={item.value}\n          isChecked={item.checked}\n          onClick={event => {\n            event.stopPropagation();\n            toggleFilter(id, item.value);\n          }}\n        >\n          <TeamName>{item.label}</TeamName>\n          <CheckboxFancy isChecked={item.checked} />\n        </ListItem>\n      ))}\n    </Fragment>\n  );\n}\n\ntype Props = {\n  header: React.ReactElement;\n  onFilterChange: (section: string, filterSelection: Set<string>) => void;\n  dropdownSections: DropdownSection[];\n};\n\nclass Filter extends Component<Props> {\n  toggleFilter = (sectionId: string, value: string) => {\n    const {onFilterChange, dropdownSections} = this.props;\n    const section = dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const newSelection = new Set(\n      section.items.filter(item => item.checked).map(item => item.value)\n    );\n    if (newSelection.has(value)) {\n      newSelection.delete(value);\n    } else {\n      newSelection.add(value);\n    }\n    onFilterChange(sectionId, newSelection);\n  };\n\n  toggleSection = (sectionId: string) => {\n    const {onFilterChange} = this.props;\n    const section = this.props.dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const activeItems = section.items.filter(item => item.checked);\n\n    const newSelection =\n      section.items.length === activeItems.length\n        ? new Set<string>()\n        : new Set(section.items.map(item => item.value));\n\n    onFilterChange(sectionId, newSelection);\n  };\n\n  getNumberOfActiveFilters = (): number => {\n    return this.props.dropdownSections\n      .map(section => section.items)\n      .flat()\n      .filter(item => item.checked).length;\n  };\n\n  render() {\n    const {dropdownSections: dropdownItems, header} = this.props;\n    const checkedQuantity = this.getNumberOfActiveFilters();\n\n    const dropDownButtonProps: Pick<DropdownButtonProps, 'children' | 'priority'> & {\n      hasDarkBorderBottomColor: boolean;\n    } = {\n      children: t('Filter'),\n      priority: 'default',\n      hasDarkBorderBottomColor: false,\n    };\n\n    if (checkedQuantity > 0) {\n      dropDownButtonProps.children = tn(\n        '%s Active Filter',\n        '%s Active Filters',\n        checkedQuantity\n      );\n      dropDownButtonProps.hasDarkBorderBottomColor = true;\n    }\n\n    return (\n      <DropdownControl\n        menuWidth=\"240px\"\n        blendWithActor\n        alwaysRenderMenu={false}\n        button={({isOpen, getActorProps}) => (\n          <StyledDropdownButton\n            {...getActorProps()}\n            showChevron={false}\n            isOpen={isOpen}\n            icon={<IconFilter size=\"xs\" />}\n            hasDarkBorderBottomColor={dropDownButtonProps.hasDarkBorderBottomColor}\n            priority={dropDownButtonProps.priority as DropdownButtonProps['priority']}\n            data-test-id=\"filter-button\"\n          >\n            {dropDownButtonProps.children}\n          </StyledDropdownButton>\n        )}\n      >\n        {({isOpen, getMenuProps}) => (\n          <MenuContent\n            {...getMenuProps()}\n            isOpen={isOpen}\n            blendCorner\n            alignMenu=\"left\"\n            width=\"240px\"\n          >\n            <List>\n              {header}\n              {dropdownItems.map(section => (\n                <FilterSection\n                  key={section.id}\n                  {...section}\n                  toggleSection={this.toggleSection}\n                  toggleFilter={this.toggleFilter}\n                />\n              ))}\n            </List>\n          </MenuContent>\n        )}\n      </DropdownControl>\n    );\n  }\n}\n\nconst MenuContent = styled(Content)`\n  max-height: 290px;\n  overflow-y: auto;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: auto min-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n\n  margin: 0;\n  background-color: ${p => p.theme.backgroundSecondary};\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`\n  white-space: nowrap;\n  max-width: 200px;\n\n  z-index: ${p => p.theme.zIndex.dropdown};\n`;\n\nconst List = styled('ul')`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled('li')<{isChecked?: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  :hover {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n  ${CheckboxFancy} {\n    opacity: ${p => (p.isChecked ? 1 : 0.3)};\n  }\n\n  &:hover ${CheckboxFancy} {\n    opacity: 1;\n  }\n\n  &:hover span {\n    color: ${p => p.theme.blue300};\n    text-decoration: underline;\n  }\n`;\n\nconst TeamName = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  ${overflowEllipsis};\n`;\n\nexport default Filter;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Input from 'app/components/forms/input';\nimport {t} from 'app/locale';\nimport {Team} from 'app/types';\n\nimport Filter from './filter';\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\ntype Props = {\n  teams: Team[];\n  selectedTeams: Set<string>;\n  handleChangeFilter: (sectionId: string, activeFilters: Set<string>) => void;\n  showStatus?: boolean;\n  selectedStatus?: Set<string>;\n};\n\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n\nfunction TeamFilter({\n  teams,\n  selectedTeams,\n  showStatus = false,\n  selectedStatus = new Set(),\n  handleChangeFilter,\n}: Props) {\n  const [teamFilterSearch, setTeamFilterSearch] = useState<string | undefined>();\n\n  const statusOptions = [\n    {\n      label: t('Unresolved'),\n      value: 'open',\n      checked: selectedStatus.has('open'),\n      filtered: false,\n    },\n    {\n      label: t('Resolved'),\n      value: 'closed',\n      checked: selectedStatus.has('closed'),\n      filtered: false,\n    },\n  ];\n\n  const additionalOptions = [\n    {\n      label: t('My Teams'),\n      value: 'myteams',\n      checked: selectedTeams.has('myteams'),\n      filtered: false,\n    },\n    {\n      label: t('Unassigned'),\n      value: 'unassigned',\n      checked: selectedTeams.has('unassigned'),\n      filtered: false,\n    },\n  ];\n  const teamItems = teams.map(({id, name}) => ({\n    label: name,\n    value: id,\n    filtered: teamFilterSearch\n      ? name.toLowerCase().includes(teamFilterSearch.toLowerCase())\n      : true,\n    checked: selectedTeams.has(id),\n  }));\n\n  return (\n    <Filter\n      header={\n        <StyledInput\n          autoFocus\n          placeholder={t('Filter by team name')}\n          onClick={event => {\n            event.stopPropagation();\n          }}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setTeamFilterSearch(event.target.value);\n          }}\n          value={teamFilterSearch || ''}\n        />\n      }\n      onFilterChange={handleChangeFilter}\n      dropdownSections={[\n        ...(showStatus\n          ? [\n              {\n                id: 'status',\n                label: t('Status'),\n                items: statusOptions,\n              },\n            ]\n          : []),\n        {\n          id: 'teams',\n          label: t('Teams'),\n          items: [...additionalOptions, ...teamItems],\n        },\n      ]}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst StyledInput = styled(Input)`\n  border: none;\n  border-bottom: 1px solid ${p => p.theme.gray200};\n  border-radius: 0;\n`;\n"],"sourceRoot":""}