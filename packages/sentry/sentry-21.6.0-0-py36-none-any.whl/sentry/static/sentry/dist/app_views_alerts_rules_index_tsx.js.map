{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/alerts/alertBadge.tsx","webpack:///./app/views/alerts/rules/row.tsx","webpack:///./app/views/alerts/rules/index.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconWarning","Wrapper","displayFlex","AlertIconWrapper","icon","IncidentStatusValue","p","undefined","theme","borderRadius","space","RuleListRow","memoize","slug","projects","find","project","rule","this","props","latestIncident","includes","isIssueAlert","activeIncident","date","dateCreated","dateClosed","criticalTrigger","triggers","label","warningTrigger","trigger","iconColor","thresholdTypeText","thresholdType","AlertRuleThresholdType","FlexCenter","direction","TriggerText","alertThreshold","toLocaleString","projectsLoaded","organization","orgId","onDelete","userTeams","editLink","id","hasRedesign","features","detailsLink","ownerId","owner","split","teamActor","type","name","canEdit","has","hasAlertOwnership","hasAlertList","alertLink","TitleLink","to","IssueStatusText","AlertNameWrapper","isIncident","tct","AlertNameAndStatus","AlertName","renderLastIncidentDate","renderAlertRuleStatus","RuleType","Title","ProjectBadgeContainer","ProjectBadge","avatarSize","getProject","actor","size","CreatedBy","createdBy","getDynamicText","value","fixed","Date","format","ActionsRow","access","hasAccess","StyledDropdownLink","anchorRight","caret","tooltipProps","containerDisplayMode","aria-label","disabled","message","header","priority","confirmText","onConfirm","StyledButtonBar","gap","React","columnCss","fontSizeSmall","gray300","Link","overflowEllipsis","fontSizeLarge","breakpoints","IdBadge","ButtonBar","AlertRulesList","_sectionId","activeFilters","router","location","query","currentQuery","cursor","page","teams","push","pathname","team","length","projectId","params","alertPath","api","requestPromise","method","reloadData","addErrorMessage","expand","getTeamParams","sort","ruleList","state","Fragment","IconWrapper","isCircled","Description","link","href","renderBody","selectedTeams","Set","FilterWrapper","handleChangeFilter","StyledSearchBar","placeholder","onSearch","handleChangeSearch","loading","ruleListPageLinks","allProjectsFromIncidents","flatten","map","asc","field","isAlertRuleSort","sortArrow","filter","isMember","StyledLayoutBody","fullWidth","renderFilterBar","StyledPanelTable","headers","StyledSortLink","isLoading","isEmpty","emptyMessage","tryRenderEmpty","showTeamCol","slugs","Array","from","initiallyLoaded","handleDeleteRule","pageLinks","showDateSelector","showEnvironmentSelector","activeTab","renderList","AsyncComponent","AlertRulesListContainer","trackView","prevProps","trackAnalyticsEvent","eventKey","eventName","organization_id","isArray","join","Component","withGlobalSelection","withTeams","Layout","SearchBar","PanelTable","PanelTableHeader","fontSizeMedium","gray200","fontSizeExtraLarge"],"mappings":"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","file":"app_views_alerts_rules_index_tsx.f90859a1f753cc7db082.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import styled from '@emotion/styled';\n\nimport {IconCheckmark, IconFire, IconIssues, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Color} from 'app/utils/theme';\n\nimport {IncidentStatus} from './types';\n\ntype Props = {\n  status?: IncidentStatus;\n  hideText?: boolean;\n  isIssue?: boolean;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconWarning;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper displayFlex={!hideText}>\n      <AlertIconWrapper color={color} icon={Icon}>\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')<{displayFlex: boolean}>`\n  display: ${p => (p.displayFlex ? `flex` : `block`)};\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  /* icon warning needs to be treated differently to look visually centered */\n  line-height: ${p => (p.icon === IconWarning ? undefined : 1)};\n  left: 3px;\n  min-width: 30px;\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 22px;\n    height: 22px;\n    border-radius: ${p => p.theme.borderRadius};\n    background-color: ${p => p.theme[p.color]};\n    transform: rotate(45deg);\n  }\n\n  svg {\n    width: ${p => (p.icon === IconIssues ? '11px' : '13px')};\n    z-index: 1;\n  }\n`;\n\nconst IncidentStatusValue = styled('div')<{color: Color}>`\n  margin-left: ${space(1)};\n  color: ${p => p.theme[p.color]};\n`;\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport Access from 'app/components/acl/access';\nimport MenuItemActionLink from 'app/components/actions/menuItemActionLink';\nimport ActorAvatar from 'app/components/avatar/actorAvatar';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport DropdownLink from 'app/components/dropdownLink';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconArrow, IconDelete, IconEllipsis, IconSettings} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Actor, Organization, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {Color} from 'app/utils/theme';\nimport {AlertRuleThresholdType} from 'app/views/settings/incidentRules/types';\n\nimport AlertBadge from '../alertBadge';\nimport {CombinedMetricIssueAlerts, IncidentStatus} from '../types';\nimport {isIssueAlert} from '../utils';\n\ntype Props = {\n  rule: CombinedMetricIssueAlerts;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  organization: Organization;\n  onDelete: (projectId: string, rule: CombinedMetricIssueAlerts) => void;\n  // Set of team ids that the user belongs to\n  userTeams: Set<string>;\n};\n\ntype State = {};\n\nclass RuleListRow extends React.Component<Props, State> {\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  activeIncident() {\n    const {rule} = this.props;\n    return (\n      rule.latestIncident?.status !== undefined &&\n      [IncidentStatus.CRITICAL, IncidentStatus.WARNING].includes(\n        rule.latestIncident.status\n      )\n    );\n  }\n\n  renderLastIncidentDate(): React.ReactNode {\n    const {rule} = this.props;\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    if (!rule.latestIncident) {\n      return '-';\n    }\n\n    if (this.activeIncident()) {\n      return (\n        <div>\n          {t('Triggered ')}\n          <TimeSince date={rule.latestIncident.dateCreated} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {t('Resolved ')}\n        <TimeSince date={rule.latestIncident.dateClosed!} />\n      </div>\n    );\n  }\n\n  renderAlertRuleStatus(): React.ReactNode {\n    const {rule} = this.props;\n\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    const activeIncident = this.activeIncident();\n    const criticalTrigger = rule?.triggers.find(({label}) => label === 'critical');\n    const warningTrigger = rule?.triggers.find(({label}) => label === 'warning');\n    const trigger =\n      activeIncident && rule.latestIncident?.status === IncidentStatus.CRITICAL\n        ? criticalTrigger\n        : warningTrigger ?? criticalTrigger;\n\n    let iconColor: Color = 'green300';\n    if (activeIncident) {\n      iconColor =\n        trigger?.label === 'critical'\n          ? 'red300'\n          : trigger?.label === 'warning'\n          ? 'yellow300'\n          : 'green300';\n    }\n\n    const thresholdTypeText =\n      activeIncident && rule.thresholdType === AlertRuleThresholdType.ABOVE\n        ? t('Above')\n        : t('Below');\n\n    return (\n      <FlexCenter>\n        <IconArrow\n          color={iconColor}\n          direction={\n            activeIncident && rule.thresholdType === AlertRuleThresholdType.ABOVE\n              ? 'up'\n              : 'down'\n          }\n        />\n        <TriggerText>{`${thresholdTypeText} ${trigger?.alertThreshold?.toLocaleString()}`}</TriggerText>\n      </FlexCenter>\n    );\n  }\n\n  render() {\n    const {\n      rule,\n      projectsLoaded,\n      projects,\n      organization,\n      orgId,\n      onDelete,\n      userTeams,\n    } = this.props;\n    const slug = rule.projects[0];\n    const editLink = `/organizations/${orgId}/alerts/${\n      isIssueAlert(rule) ? 'rules' : 'metric-rules'\n    }/${slug}/${rule.id}/`;\n\n    const hasRedesign =\n      !isIssueAlert(rule) && organization.features.includes('alert-details-redesign');\n    const detailsLink = `/organizations/${orgId}/alerts/rules/details/${rule.id}/`;\n\n    const ownerId = rule.owner?.split(':')[1];\n    const teamActor = ownerId\n      ? {type: 'team' as Actor['type'], id: ownerId, name: ''}\n      : null;\n\n    const canEdit = ownerId ? userTeams.has(ownerId) : true;\n    const hasAlertOwnership = organization.features.includes('team-alerts-ownership');\n    const hasAlertList = organization.features.includes('alert-details-redesign');\n    const alertLink = isIssueAlert(rule) ? (\n      rule.name\n    ) : (\n      <TitleLink to={hasRedesign ? detailsLink : editLink}>{rule.name}</TitleLink>\n    );\n\n    const IssueStatusText: Record<IncidentStatus, string> = {\n      [IncidentStatus.CRITICAL]: t('Critical'),\n      [IncidentStatus.WARNING]: t('Warning'),\n      [IncidentStatus.CLOSED]: t('Resolved'),\n      [IncidentStatus.OPENED]: t('Resolved'),\n    };\n\n    return (\n      <ErrorBoundary>\n        {!hasAlertList ? (\n          <React.Fragment>\n            <RuleType>{isIssueAlert(rule) ? t('Issue') : t('Metric')}</RuleType>\n            <Title>{alertLink}</Title>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <AlertNameWrapper isIncident={isIssueAlert(rule)}>\n              <FlexCenter>\n                <Tooltip\n                  title={\n                    isIssueAlert(rule)\n                      ? t('Issue Alert')\n                      : tct('Metric Alert Status: [status]', {\n                          status:\n                            IssueStatusText[\n                              rule?.latestIncident?.status ?? IncidentStatus.CLOSED\n                            ],\n                        })\n                  }\n                >\n                  <AlertBadge\n                    status={rule?.latestIncident?.status}\n                    isIssue={isIssueAlert(rule)}\n                    hideText\n                  />\n                </Tooltip>\n              </FlexCenter>\n              <AlertNameAndStatus>\n                <AlertName>{alertLink}</AlertName>\n                {!isIssueAlert(rule) && this.renderLastIncidentDate()}\n              </AlertNameAndStatus>\n            </AlertNameWrapper>\n            <FlexCenter>{this.renderAlertRuleStatus()}</FlexCenter>\n          </React.Fragment>\n        )}\n\n        <FlexCenter>\n          <ProjectBadgeContainer>\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n          </ProjectBadgeContainer>\n        </FlexCenter>\n        {hasAlertOwnership && (\n          <FlexCenter>\n            {teamActor ? <ActorAvatar actor={teamActor} size={24} /> : '-'}\n          </FlexCenter>\n        )}\n        {!hasAlertList && <CreatedBy>{rule?.createdBy?.name ?? '-'}</CreatedBy>}\n        <FlexCenter>\n          <DateTime\n            date={getDynamicText({\n              value: rule.dateCreated,\n              fixed: new Date('2021-04-20'),\n            })}\n            format=\"ll\"\n          />\n        </FlexCenter>\n        <ActionsRow>\n          <Access access={['alerts:write']}>\n            {({hasAccess}) => (\n              <React.Fragment>\n                <StyledDropdownLink>\n                  <DropdownLink\n                    anchorRight\n                    caret={false}\n                    title={\n                      <Button\n                        tooltipProps={{\n                          containerDisplayMode: 'flex',\n                        }}\n                        size=\"small\"\n                        type=\"button\"\n                        aria-label={t('Show more')}\n                        icon={<IconEllipsis size=\"xs\" />}\n                      />\n                    }\n                  >\n                    <li>\n                      <Link to={editLink}>{t('Edit')}</Link>\n                    </li>\n                    <Confirm\n                      disabled={!hasAccess || !canEdit}\n                      message={tct(\n                        \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n                        {\n                          name: rule.name,\n                        }\n                      )}\n                      header={t('Delete Alert Rule?')}\n                      priority=\"danger\"\n                      confirmText={t('Delete Rule')}\n                      onConfirm={() => onDelete(slug, rule)}\n                    >\n                      <MenuItemActionLink title={t('Delete')}>\n                        {t('Delete')}\n                      </MenuItemActionLink>\n                    </Confirm>\n                  </DropdownLink>\n                </StyledDropdownLink>\n\n                {/* Small screen actions */}\n                <StyledButtonBar gap={1}>\n                  <Confirm\n                    disabled={!hasAccess || !canEdit}\n                    message={tct(\n                      \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n                      {\n                        name: rule.name,\n                      }\n                    )}\n                    header={t('Delete Alert Rule?')}\n                    priority=\"danger\"\n                    confirmText={t('Delete Rule')}\n                    onConfirm={() => onDelete(slug, rule)}\n                  >\n                    <Button\n                      type=\"button\"\n                      icon={<IconDelete />}\n                      size=\"small\"\n                      title={t('Delete')}\n                    />\n                  </Confirm>\n                  <Tooltip title={t('Edit')}>\n                    <Button\n                      size=\"small\"\n                      type=\"button\"\n                      icon={<IconSettings />}\n                      to={editLink}\n                    />\n                  </Tooltip>\n                </StyledButtonBar>\n              </React.Fragment>\n            )}\n          </Access>\n        </ActionsRow>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst columnCss = css`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  height: 100%;\n`;\n\nconst RuleType = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 400;\n  color: ${p => p.theme.gray300};\n  text-transform: uppercase;\n  ${columnCss}\n`;\n\nconst Title = styled('div')`\n  ${columnCss}\n`;\n\nconst TitleLink = styled(Link)`\n  ${overflowEllipsis}\n`;\n\nconst CreatedBy = styled('div')`\n  ${overflowEllipsis}\n  ${columnCss}\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertNameWrapper = styled(FlexCenter)<{isIncident?: boolean}>`\n  ${p => p.isIncident && `padding: ${space(3)} ${space(2)}; line-height: 2.4;`}\n`;\n\nconst AlertNameAndStatus = styled('div')`\n  ${overflowEllipsis}\n  margin-left: ${space(1.5)};\n  line-height: 1.35;\n`;\n\nconst AlertName = styled('div')`\n  ${overflowEllipsis}\n  font-size: ${p => p.theme.fontSizeLarge};\n\n  @media (max-width: ${p => p.theme.breakpoints[3]}) {\n    max-width: 300px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[2]}) {\n    max-width: 165px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    max-width: 100px;\n  }\n`;\n\nconst ProjectBadgeContainer = styled('div')`\n  width: 100%;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst TriggerText = styled('div')`\n  margin-left: ${space(1)};\n  white-space: nowrap;\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  display: none;\n  justify-content: flex-start;\n  align-items: center;\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    display: flex;\n  }\n`;\n\nconst StyledDropdownLink = styled('div')`\n  display: none;\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: block;\n  }\n`;\n\nconst ActionsRow = styled(FlexCenter)`\n  justify-content: center;\n  padding: ${space(1)};\n`;\n\nexport default RuleListRow;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {PanelTable, PanelTableHeader} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconArrow, IconCheckmark} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withTeams from 'app/utils/withTeams';\n\nimport AlertHeader from '../list/header';\nimport {CombinedMetricIssueAlerts} from '../types';\nimport {isIssueAlert} from '../utils';\n\nimport RuleListRow from './row';\nimport TeamFilter, {getTeamParams} from './teamFilter';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/alerts-notifications/metric-alerts/';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  selection: GlobalSelection;\n  teams: Team[];\n};\n\ntype State = {\n  ruleList?: CombinedMetricIssueAlerts[];\n  teamFilterSearch?: string;\n};\n\nclass AlertRulesList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location, organization} = this.props;\n    const {query} = location;\n\n    if (organization.features.includes('alert-details-redesign')) {\n      query.expand = ['latestIncident'];\n    }\n\n    if (organization.features.includes('team-alerts-ownership')) {\n      query.team = getTeamParams(query.team);\n    }\n\n    if (organization.features.includes('alert-details-redesign') && !query.sort) {\n      query.sort = ['incident_status', 'date_triggered'];\n    }\n\n    return [\n      [\n        'ruleList',\n        `/organizations/${params && params.orgId}/combined-rules/`,\n        {\n          query,\n        },\n      ],\n    ];\n  }\n\n  tryRenderEmpty() {\n    const {ruleList} = this.state;\n    if (ruleList && ruleList.length > 0) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <IconWrapper>\n          <IconCheckmark isCircled size=\"48\" />\n        </IconWrapper>\n\n        <Title>{t('No alert rules exist for these projects.')}</Title>\n        <Description>\n          {tct('Learn more about [link:Alerts]', {\n            link: <ExternalLink href={DOCS_URL} />,\n          })}\n        </Description>\n      </Fragment>\n    );\n  }\n\n  handleChangeFilter = (_sectionId: string, activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    const teams = [...activeFilters];\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        team: teams.length ? teams : '',\n      },\n    });\n  };\n\n  handleChangeSearch = (name: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        name,\n      },\n    });\n  };\n\n  handleDeleteRule = async (projectId: string, rule: CombinedMetricIssueAlerts) => {\n    const {params} = this.props;\n    const {orgId} = params;\n    const alertPath = isIssueAlert(rule) ? 'rules' : 'alert-rules';\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/${alertPath}/${rule.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      this.reloadData();\n    } catch (_err) {\n      addErrorMessage(t('Error deleting rule'));\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderFilterBar() {\n    const {teams, location} = this.props;\n    const selectedTeams = new Set(getTeamParams(location.query.team));\n\n    return (\n      <FilterWrapper>\n        <TeamFilter\n          teams={teams}\n          selectedTeams={selectedTeams}\n          handleChangeFilter={this.handleChangeFilter}\n        />\n        <StyledSearchBar\n          placeholder={t('Search by name')}\n          query={location.query?.name}\n          onSearch={this.handleChangeSearch}\n        />\n      </FilterWrapper>\n    );\n  }\n\n  renderList() {\n    const {\n      params: {orgId},\n      location: {query},\n      organization,\n      teams,\n    } = this.props;\n    const {loading, ruleList = [], ruleListPageLinks} = this.state;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(ruleList?.map(({projects}) => projects))\n    );\n\n    const sort: {\n      asc: boolean;\n      field: 'date_added' | 'name' | ['incident_status', 'date_triggered'];\n    } = {\n      asc: query.asc === '1',\n      field: query.sort || 'date_added',\n    };\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n    const hasAlertOwnership = organization.features.includes('team-alerts-ownership');\n    const hasAlertList = organization.features.includes('alert-details-redesign');\n    const isAlertRuleSort =\n      sort.field.includes('incident_status') || sort.field.includes('date_triggered');\n    const sortArrow = (\n      <IconArrow color=\"gray300\" size=\"xs\" direction={sort.asc ? 'up' : 'down'} />\n    );\n\n    const userTeams = new Set(teams.filter(({isMember}) => isMember).map(({id}) => id));\n    return (\n      <StyledLayoutBody>\n        <Layout.Main fullWidth>\n          {hasAlertOwnership && this.renderFilterBar()}\n          <StyledPanelTable\n            headers={[\n              ...(hasAlertList\n                ? [\n                    // eslint-disable-next-line react/jsx-key\n                    <StyledSortLink\n                      to={{\n                        pathname: location.pathname,\n                        query: {\n                          ...currentQuery,\n                          asc: sort.field === 'name' && !sort.asc ? '1' : undefined,\n                          sort: 'name',\n                        },\n                      }}\n                    >\n                      {t('Alert Rule')} {sort.field === 'name' && sortArrow}\n                    </StyledSortLink>,\n                    // eslint-disable-next-line react/jsx-key\n                    <StyledSortLink\n                      to={{\n                        pathname: location.pathname,\n                        query: {\n                          ...currentQuery,\n                          asc: isAlertRuleSort && !sort.asc ? '1' : undefined,\n                          sort: ['incident_status', 'date_triggered'],\n                        },\n                      }}\n                    >\n                      {t('Status')} {isAlertRuleSort && sortArrow}\n                    </StyledSortLink>,\n                  ]\n                : [\n                    t('Type'),\n                    // eslint-disable-next-line react/jsx-key\n                    <StyledSortLink\n                      to={{\n                        pathname: location.pathname,\n                        query: {\n                          ...currentQuery,\n                          asc: sort.field === 'name' && !sort.asc ? '1' : undefined,\n                          sort: 'name',\n                        },\n                      }}\n                    >\n                      {t('Alert Name')} {sort.field === 'name' && sortArrow}\n                    </StyledSortLink>,\n                  ]),\n              t('Project'),\n              ...(hasAlertOwnership ? [t('Team')] : []),\n              ...(hasAlertList ? [] : [t('Created By')]),\n              // eslint-disable-next-line react/jsx-key\n              <StyledSortLink\n                to={{\n                  pathname: location.pathname,\n                  query: {\n                    ...currentQuery,\n                    asc: sort.field === 'date_added' && !sort.asc ? '1' : undefined,\n                    sort: 'date_added',\n                  },\n                }}\n              >\n                {t('Created')} {sort.field === 'date_added' && sortArrow}\n              </StyledSortLink>,\n              t('Actions'),\n            ]}\n            isLoading={loading}\n            isEmpty={ruleList?.length === 0}\n            emptyMessage={this.tryRenderEmpty()}\n            showTeamCol={hasAlertOwnership}\n            hasAlertList={hasAlertList}\n          >\n            <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n              {({initiallyLoaded, projects}) =>\n                ruleList.map(rule => (\n                  <RuleListRow\n                    // Metric and issue alerts can have the same id\n                    key={`${isIssueAlert(rule) ? 'metric' : 'issue'}-${rule.id}`}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    rule={rule}\n                    orgId={orgId}\n                    onDelete={this.handleDeleteRule}\n                    organization={organization}\n                    userTeams={userTeams}\n                  />\n                ))\n              }\n            </Projects>\n          </StyledPanelTable>\n\n          <Pagination pageLinks={ruleListPageLinks} />\n        </Layout.Main>\n      </StyledLayoutBody>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader\n          organization={organization}\n          showDateSelector={false}\n          showEnvironmentSelector={false}\n        >\n          <AlertHeader organization={organization} router={router} activeTab=\"rules\" />\n          {this.renderList()}\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass AlertRulesListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location} = this.props;\n    if (prevProps.location.query?.sort !== location.query?.sort) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization, location} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_rules.viewed',\n      eventName: 'Alert Rules: Viewed',\n      organization_id: organization.id,\n      sort: Array.isArray(location.query.sort)\n        ? location.query.sort.join(',')\n        : location.query.sort,\n    });\n  }\n\n  render() {\n    return <AlertRulesList {...this.props} />;\n  }\n}\n\nexport default withGlobalSelection(withTeams(AlertRulesListContainer));\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -20px;\n`;\n\nconst StyledSortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst FilterWrapper = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n  margin-left: ${space(1.5)};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{\n  showTeamCol: boolean;\n  hasAlertList: boolean;\n}>`\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    overflow: initial;\n  }\n\n  ${PanelTableHeader} {\n    padding: ${space(2)};\n    line-height: normal;\n  }\n  font-size: ${p => p.theme.fontSizeMedium};\n  grid-template-columns: auto 1.5fr 1fr 1fr ${p => (!p.hasAlertList ? '1fr' : '')} ${p =>\n      p.showTeamCol ? '1fr' : ''} auto;\n  margin-bottom: 0;\n  white-space: nowrap;\n  ${p =>\n    p.emptyMessage &&\n    `svg:not([data-test-id='icon-check-mark']) {\n    display: none;`}\n  & > * {\n    padding: ${p => (p.hasAlertList ? `${space(2)} ${space(2)}` : space(2))};\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  color: ${p => p.theme.gray200};\n  display: block;\n`;\n\nconst Title = styled('strong')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst Description = styled('span')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  display: block;\n  margin: 0;\n`;\n"],"sourceRoot":""}