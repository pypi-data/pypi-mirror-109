{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","TeamSelect","loading","teams","debounce","query","props","api","organization","requestPromise","slug","per_page","TEAMS_PER_PAGE","setState","DEFAULT_DEBOUNCE_DURATION","event","fetchTeams","target","value","option","team","state","find","tm","onAddTeam","teamSlug","onRemoveTeam","options","disabled","selectedTeams","menuHeader","isDisabled","length","filter","includes","map","index","searchKey","label","TeamDropdownElement","items","busyItemsStillVisible","onChange","handleQueryUpdate","onSelect","handleAddTeam","emptyMessage","t","alignMenu","isOpen","aria-label","size","confirmLastTeamRemoveMessage","confirmMessage","TeamRow","orgId","onRemove","handleRemove","hasButtons","renderTeamAddDropDown","renderBody","React","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","icon","isCircled","space","PanelItem","Link","withApi"],"mappings":"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","file":"app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.f8a1d6c483492f2d8a43.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {DEFAULT_DEBOUNCE_DURATION, TEAMS_PER_PAGE} from 'app/constants';\nimport {IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Teams that are already selected.\n   */\n  selectedTeams: string[];\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (team: Team) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n};\n\ntype State = {\n  loading: boolean;\n  teams: null | Team[];\n};\n\nclass TeamSelect extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    teams: null,\n  };\n\n  componentDidMount() {\n    this.fetchTeams();\n  }\n\n  fetchTeams = debounce(async (query?: string) => {\n    const {api, organization} = this.props;\n    const teams = await api.requestPromise(`/organizations/${organization.slug}/teams/`, {\n      query: {query, per_page: TEAMS_PER_PAGE},\n    });\n    this.setState({teams, loading: false});\n  }, DEFAULT_DEBOUNCE_DURATION);\n\n  handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({loading: true});\n    this.fetchTeams(event.target.value);\n  };\n\n  handleAddTeam = (option: Item) => {\n    const team = this.state.teams?.find(tm => tm.slug === option.value);\n    if (team) {\n      this.props.onAddTeam(team);\n    }\n  };\n\n  handleRemove = (teamSlug: string) => {\n    this.props.onRemoveTeam(teamSlug);\n  };\n\n  renderTeamAddDropDown() {\n    const {disabled, selectedTeams, menuHeader} = this.props;\n    const {teams} = this.state;\n    const isDisabled = disabled;\n\n    let options: Item[] = [];\n    if (teams === null || teams.length === 0) {\n      options = [];\n    } else {\n      options = teams\n        .filter(team => !selectedTeams.includes(team.slug))\n        .map((team, index) => ({\n          index,\n          value: team.slug,\n          searchKey: team.slug,\n          label: <TeamDropdownElement>#{team.slug}</TeamDropdownElement>,\n        }));\n    }\n\n    return (\n      <DropdownAutoComplete\n        items={options}\n        busyItemsStillVisible={this.state.loading}\n        onChange={this.handleQueryUpdate}\n        onSelect={this.handleAddTeam}\n        emptyMessage={t('No teams')}\n        menuHeader={menuHeader}\n        disabled={isDisabled}\n        alignMenu=\"right\"\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            aria-label={t('Add Team')}\n            isOpen={isOpen}\n            size=\"xsmall\"\n            disabled={isDisabled}\n          >\n            {t('Add Team')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderBody() {\n    const {\n      organization,\n      selectedTeams,\n      disabled,\n      confirmLastTeamRemoveMessage,\n    } = this.props;\n\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => (\n      <TeamRow\n        key={team}\n        orgId={organization.slug}\n        team={team}\n        onRemove={this.handleRemove}\n        disabled={disabled}\n        confirmMessage={confirmMessage}\n      />\n    ));\n  }\n\n  render() {\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          {t('Team')}\n          {this.renderTeamAddDropDown()}\n        </PanelHeader>\n\n        <PanelBody>{this.renderBody()}</PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst TeamRow = props => {\n  const {orgId, team, onRemove, disabled, confirmMessage} = props;\n  return (\n    <TeamPanelItem>\n      <StyledLink to={`/settings/${orgId}/teams/${team}/`}>{`#${team}`}</StyledLink>\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemove(team)}\n        disabled={disabled}\n      >\n        <Button\n          size=\"xsmall\"\n          icon={<IconSubtract isCircled size=\"xs\" />}\n          disabled={disabled}\n        >\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n};\n\nconst TeamDropdownElement = styled('div')`\n  padding: ${space(0.5)} 0px;\n  text-transform: none;\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(TeamSelect);\n"],"sourceRoot":""}