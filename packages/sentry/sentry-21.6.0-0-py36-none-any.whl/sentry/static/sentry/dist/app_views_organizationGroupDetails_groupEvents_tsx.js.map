{"version":3,"sources":["webpack:///./app/components/acl/role.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/utils/attachmentUrl.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/components/eventsTable/eventsTableRow.tsx","webpack:///./app/components/eventsTable/eventsTable.tsx","webpack:///./app/views/organizationGroupDetails/groupEvents.tsx"],"names":["Role","user","ConfigStore","this","props","organization","role","availableRoles","currentRole","isActiveSuperuser","Array","isArray","roleIds","map","r","id","includes","requiredIndex","indexOf","children","hasRole","isRenderFunc","React","withOrganization","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","DeviceName","state","_isMounted","then","setState","value","deviceName","data-test-id","FileSize","className","bytes","getDynamicText","formatBytesBase2","fixed","AttachmentUrl","attachment","eventId","projectId","slug","attachmentsRole","getDownloadUrl","isSuperuser","Cookies","EventsTableRow","event","crashFile","crashFileType","type","url","href","name","size","orgId","groupId","tagList","hasUser","tagMap","tags","forEach","tag","key","link","to","date","dateCreated","title","substr","renderCrashFileLink","gravatar","email","EventsTable","events","find","t","Component","GroupEvents","query","targetQueryParams","location","params","browserHistory","pathname","loading","error","pick","limit","api","request","method","success","data","_","jqXHR","eventList","pageLinks","getResponseHeader","err","parseApiError","queryParams","fetchData","nextProps","search","group","filter","project","message","onRetry","length","renderResults","renderNoQueryResults","renderEmpty","style","marginBottom","defaultQuery","placeholder","onSearch","handleSearch","renderBody","withApi"],"mappings":"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","file":"app_views_organizationGroupDetails_groupEvents_tsx.27be5e9fc9d0f929f185.js","sourcesContent":["import * as React from 'react';\n\nimport ConfigStore from 'app/stores/configStore';\nimport {Organization} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype RoleRenderProps = {\n  hasRole: boolean;\n};\n\ntype ChildrenRenderFn = (props: RoleRenderProps) => React.ReactNode;\n\ntype Props = {\n  /**\n   * Minimum required role\n   */\n  role: string;\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed RoleRenderProps.\n   *\n   * The other interface is more simple, only show `children` if user has\n   * the minimum required role.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n};\n\nclass Role extends React.Component<Props> {\n  hasRole() {\n    const user = ConfigStore.get('user');\n    const {organization, role} = this.props;\n    const {availableRoles} = organization;\n    const currentRole = organization.role ?? '';\n\n    if (!user) {\n      return false;\n    }\n\n    if (isActiveSuperuser()) {\n      return true;\n    }\n\n    if (!Array.isArray(availableRoles)) {\n      return false;\n    }\n\n    const roleIds = availableRoles.map(r => r.id);\n\n    if (!roleIds.includes(role) || !roleIds.includes(currentRole)) {\n      return false;\n    }\n\n    const requiredIndex = roleIds.indexOf(role);\n    const currentIndex = roleIds.indexOf(currentRole);\n    return currentIndex >= requiredIndex;\n  }\n\n  render() {\n    const {children} = this.props;\n    const hasRole = this.hasRole();\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({hasRole});\n    }\n\n    return hasRole && children ? children : null;\n  }\n}\n\nexport default withOrganization(Role);\n","import * as React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import('ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import {formatBytesBase2} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <span className={className}>\n      {getDynamicText({value: formatBytesBase2(bytes), fixed: 'xx KB'})}\n    </span>\n  );\n}\n\nexport default FileSize;\n","import * as React from 'react';\n\nimport Role from 'app/components/acl/role';\nimport {EventAttachment, Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n  projectId: string;\n  eventId: string;\n  attachment: EventAttachment;\n  children: (downloadUrl: string | null) => React.ReactNode;\n};\n\nclass AttachmentUrl extends React.PureComponent<Props> {\n  getDownloadUrl() {\n    const {attachment, organization, eventId, projectId} = this.props;\n    return `/api/0/projects/${organization.slug}/${projectId}/events/${eventId}/attachments/${attachment.id}/`;\n  }\n\n  render() {\n    const {children, organization} = this.props;\n    return (\n      <Role role={organization.attachmentsRole}>\n        {({hasRole}) => children(hasRole ? this.getDownloadUrl() : null)}\n      </Role>\n    );\n  }\n}\n\nexport default withOrganization(AttachmentUrl);\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import * as React from 'react';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport DateTime from 'app/components/dateTime';\nimport DeviceName from 'app/components/deviceName';\nimport FileSize from 'app/components/fileSize';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport {AvatarUser, Organization, Tag} from 'app/types';\nimport {Event} from 'app/types/event';\nimport AttachmentUrl from 'app/utils/attachmentUrl';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  hasUser?: boolean;\n  orgId: string;\n  groupId: string;\n  projectId: string;\n  event: Event;\n  tagList: Tag[];\n  organization: Organization;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nclass EventsTableRow extends React.Component<Props> {\n  renderCrashFileLink() {\n    const {event, projectId} = this.props;\n    if (!event.crashFile) {\n      return null;\n    }\n\n    const crashFileType =\n      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';\n\n    return (\n      <AttachmentUrl\n        projectId={projectId}\n        eventId={event.id}\n        attachment={event.crashFile}\n      >\n        {url =>\n          url && (\n            <small>\n              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile?.name}</a> (\n              <FileSize bytes={event.crashFile?.size || 0} />)\n            </small>\n          )\n        }\n      </AttachmentUrl>\n    );\n  }\n\n  render() {\n    const {className, event, orgId, groupId, tagList, hasUser} = this.props;\n    const tagMap = {};\n    event.tags.forEach(tag => {\n      tagMap[tag.key] = tag.value;\n    });\n    const link = `/organizations/${orgId}/issues/${groupId}/events/${event.id}/`;\n\n    return (\n      <tr key={event.id} className={className}>\n        <td>\n          <h5>\n            <GlobalSelectionLink to={link}>\n              <DateTime date={event.dateCreated} />\n            </GlobalSelectionLink>\n            <small>{event.title.substr(0, 100)}</small>\n            {this.renderCrashFileLink()}\n          </h5>\n        </td>\n\n        {hasUser && (\n          <td className=\"event-user table-user-info\">\n            {event.user ? (\n              <div>\n                <UserAvatar\n                  user={event.user as AvatarUser} // TODO(ts): Some of the user fields are optional from event, this cast can probably be removed in the future\n                  size={24}\n                  className=\"avatar\"\n                  gravatar={false}\n                />\n                {event.user.email}\n              </div>\n            ) : (\n              <span>—</span>\n            )}\n          </td>\n        )}\n\n        {tagList.map(tag => (\n          <td key={tag.key}>\n            <div>\n              {tag.key === 'device' ? (\n                <DeviceName value={tagMap[tag.key]} />\n              ) : (\n                tagMap[tag.key]\n              )}\n            </div>\n          </td>\n        ))}\n      </tr>\n    );\n  }\n}\n\nexport {EventsTableRow};\nexport default withOrganization(EventsTableRow);\n","import {Component} from 'react';\n\nimport EventsTableRow from 'app/components/eventsTable/eventsTableRow';\nimport {t} from 'app/locale';\nimport {Tag} from 'app/types';\nimport {Event} from 'app/types/event';\n\ntype Props = {\n  events: Event[];\n  tagList: Tag[];\n  orgId: string;\n  projectId: string;\n  groupId: string;\n};\nclass EventsTable extends Component<Props> {\n  render() {\n    const {events, tagList, orgId, projectId, groupId} = this.props;\n\n    const hasUser = !!events.find(event => event.user);\n\n    return (\n      <table className=\"table events-table\">\n        <thead>\n          <tr>\n            <th>{t('ID')}</th>\n            {hasUser && <th>{t('User')}</th>}\n\n            {tagList.map(tag => (\n              <th key={tag.key}>{tag.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {events.map(event => (\n            <EventsTableRow\n              key={event.id}\n              event={event}\n              orgId={orgId}\n              projectId={projectId}\n              groupId={groupId}\n              tagList={tagList}\n              hasUser={hasUser}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EventsTable;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EventsTable from 'app/components/eventsTable/eventsTable';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport {t} from 'app/locale';\nimport {Group} from 'app/types';\nimport {Event} from 'app/types/event';\nimport parseApiError from 'app/utils/parseApiError';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  group: Group;\n} & RouteComponentProps<{groupId: string; orgId: string}, {}>;\n\ntype State = {\n  eventList: Event[];\n  loading: boolean;\n  error: string | false;\n  pageLinks: string;\n  query: string;\n};\n\nclass GroupEvents extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n    this.state = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.props.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, jqXHR) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? '',\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  };\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderResults() {\n    const {group, params} = this.props;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        orgId={params.orgId}\n        projectId={group.project.slug}\n        groupId={params.groupId}\n      />\n    );\n  }\n\n  renderBody() {\n    let body: React.ReactNode;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {GroupEvents};\n\nexport default withApi(GroupEvents);\n"],"sourceRoot":""}