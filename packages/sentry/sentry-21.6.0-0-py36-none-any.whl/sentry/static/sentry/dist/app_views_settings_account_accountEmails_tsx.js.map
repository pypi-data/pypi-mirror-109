{"version":3,"sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountEmails.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"names":["AlertLink","this","props","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","data-test-id","IconWrapper","AlertLinkText","IconLink","direction","React","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","route","title","fields","name","type","label","placeholder","help","showReturnButton","AsyncView","getTitle","renderComponent","AsyncComponent","ENDPOINT","_change","model","id","undefined","setValue","remountComponent","t","EmailAddresses","apiMethod","apiEndpoint","saveOnBlur","allowUndo","onSubmitSuccess","handleSubmitSuccess","forms","accountEmailsFields","email","doApiCall","method","data","endpoint","requestParams","setState","loading","emails","api","requestPromise","then","err","responseJSON","addErrorMessage","state","primary","find","isPrimary","secondary","filter","EmailRow","onRemove","handleRemove","onVerify","handleVerify","map","emailObj","onSetPrimary","handleSetPrimary","isVerified","hideRemove","EmailItem","EmailTags","gap","e","PanelItem","FormPanel","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","scrollToHash","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","Sentry","fieldsWithVisibleProp","defined","visible","length","every","formPanelProps","shouldDisplayForm","features","formGroup","i","renderForm","withRouter"],"mappings":"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","file":"app_views_settings_account_accountEmails_tsx.cb72f72f6fe412228e32.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & DefaultProps & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nclass AlertLink extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    priority: 'warning',\n    size: 'normal',\n    withoutMarginBottom: false,\n    openInNewTab: false,\n  };\n\n  render() {\n    const {\n      size,\n      priority,\n      icon,\n      children,\n      onClick,\n      withoutMarginBottom,\n      openInNewTab,\n      to,\n      href,\n      ['data-test-id']: dataTestId,\n    } = this.props;\n\n    return (\n      <StyledLink\n        data-test-id={dataTestId}\n        to={to}\n        href={href}\n        onClick={onClick}\n        size={size}\n        priority={priority}\n        withoutMarginBottom={withoutMarginBottom}\n        openInNewTab={openInNewTab}\n      >\n        {icon && <IconWrapper>{icon}</IconWrapper>}\n        <AlertLinkText>{children}</AlertLinkText>\n        <IconLink>\n          <IconChevron direction=\"right\" />\n        </IconLink>\n      </StyledLink>\n    );\n  }\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {RequestOptions} from 'app/api';\nimport AlertLink from 'app/components/alertLink';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport accountEmailsFields from 'app/data/forms/accountEmails';\nimport {IconDelete, IconStack} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {UserEmail} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst ENDPOINT = '/users/me/emails/';\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[];\n};\n\nclass AccountEmails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Emails');\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: Form['props']['onSubmitSuccess'] = (_change, model, id) => {\n    if (id === undefined) {\n      return;\n    }\n    model.setValue(id, '');\n    this.remountComponent();\n  };\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Email Addresses')} />\n        <EmailAddresses />\n        <Form\n          apiMethod=\"POST\"\n          apiEndpoint={ENDPOINT}\n          saveOnBlur\n          allowUndo={false}\n          onSubmitSuccess={this.handleSubmitSuccess}\n        >\n          <JsonForm forms={accountEmailsFields} />\n        </Form>\n\n        <AlertLink to=\"/settings/account/notifications\" icon={<IconStack />}>\n          {t('Want to change how many emails you get? Use the notifications panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountEmails;\n\nexport class EmailAddresses extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['emails', ENDPOINT]];\n  }\n  doApiCall(endpoint: string, requestParams: RequestOptions) {\n    this.setState({loading: true, emails: []}, () =>\n      this.api\n        .requestPromise(endpoint, requestParams)\n        .then(() => this.remountComponent())\n        .catch(err => {\n          this.remountComponent();\n\n          if (err?.responseJSON?.email) {\n            addErrorMessage(err.responseJSON.email);\n          }\n        })\n    );\n  }\n  handleSetPrimary = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'PUT',\n      data: {email},\n    });\n\n  handleRemove = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'DELETE',\n      data: {email},\n    });\n\n  handleVerify = (email: string) =>\n    this.doApiCall(`${ENDPOINT}confirm/`, {\n      method: 'POST',\n      data: {email},\n    });\n\n  render() {\n    const {emails, loading} = this.state;\n    const primary = emails?.find(({isPrimary}) => isPrimary);\n    const secondary = emails?.filter(({isPrimary}) => !isPrimary);\n\n    if (loading) {\n      return (\n        <Panel>\n          <PanelHeader>{t('Email Addresses')}</PanelHeader>\n          <PanelBody>\n            <LoadingIndicator />\n          </PanelBody>\n        </Panel>\n      );\n    }\n    return (\n      <Panel>\n        <PanelHeader>{t('Email Addresses')}</PanelHeader>\n        <PanelBody>\n          {primary && (\n            <EmailRow\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...primary}\n            />\n          )}\n\n          {secondary?.map(emailObj => (\n            <EmailRow\n              key={emailObj.email}\n              onSetPrimary={this.handleSetPrimary}\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...emailObj}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype EmailRowProps = {\n  email: string;\n  onRemove: (email: string, e: React.MouseEvent) => void;\n  onVerify: (email: string, e: React.MouseEvent) => void;\n  onSetPrimary?: (email: string, e: React.MouseEvent) => void;\n  isVerified?: boolean;\n  isPrimary?: boolean;\n  hideRemove?: boolean;\n};\n\nconst EmailRow = ({\n  email,\n  onRemove,\n  onVerify,\n  onSetPrimary,\n  isVerified,\n  isPrimary,\n  hideRemove,\n}: EmailRowProps) => (\n  <EmailItem>\n    <EmailTags>\n      {email}\n      {!isVerified && <Tag type=\"warning\">{t('Unverified')}</Tag>}\n      {isPrimary && <Tag type=\"success\">{t('Primary')}</Tag>}\n    </EmailTags>\n    <ButtonBar gap={1}>\n      {!isPrimary && isVerified && (\n        <Button size=\"small\" onClick={e => onSetPrimary?.(email, e)}>\n          {t('Set as primary')}\n        </Button>\n      )}\n      {!isVerified && (\n        <Button size=\"small\" onClick={e => onVerify(email, e)}>\n          {t('Resend verification')}\n        </Button>\n      )}\n      {!hideRemove && !isPrimary && (\n        <Button\n          label={t('Remove email')}\n          data-test-id=\"remove\"\n          priority=\"danger\"\n          size=\"small\"\n          icon={<IconDelete />}\n          onClick={e => onRemove(email, e)}\n        />\n      )}\n    </ButtonBar>\n  </EmailItem>\n);\n\nconst EmailTags = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst EmailItem = styled(PanelItem)`\n  justify-content: space-between;\n`;\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"sourceRoot":""}