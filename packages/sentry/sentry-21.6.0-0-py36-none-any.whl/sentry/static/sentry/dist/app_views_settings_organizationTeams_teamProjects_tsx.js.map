{"version":3,"sources":["webpack:///./app/components/projectLabel.tsx","webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.tsx"],"names":["ProjectLabel","this","props","project","className","slug","React","ProjectItem","isBookmarked","setState","organization","Wrapper","BookmarkLink","state","onToggle","handleToggleBookmark","to","Component","BookmarkStar","space","TeamProjects","error","loading","pageLinks","unlinkedProjects","linkedProjects","fetchTeamProjects","fetchUnlinkedProjects","action","params","orgId","teamId","api","request","method","success","resp","fetchAll","ProjectActions","addSuccessMessage","t","addErrorMessage","selection","find","p","id","value","handleLinkProject","evt","target","prevProps","location","requestPromise","query","cursor","includeAllArgs","then","jqXHR","getResponseHeader","projects","canWrite","Set","access","has","length","sortProjects","map","StyledPanelItem","disabled","title","size","icon","isCircled","onClick","onRetry","otherProjects","searchKey","label","ProjectListElement","hasButtons","style","textTransform","items","onChange","handleQueryUpdate","onSelect","handleProjectSelected","emptyMessage","alignMenu","isOpen","projectPanelContents","PanelItem","withApi","withOrganization"],"mappings":"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","file":"app_views_settings_organizationTeams_teamProjects_tsx.8f019b66a3ce16a99fda.js","sourcesContent":["import * as React from 'react';\n\nimport {Project} from 'app/types';\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  project: Project;\n};\n\nexport default class ProjectLabel extends React.PureComponent<Props> {\n  render() {\n    const {project, ...props} = this.props;\n\n    return (\n      <span className=\"project-label\" {...props}>\n        <span className=\"project-name\">{project.slug}</span>\n      </span>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Link from 'app/components/links/link';\nimport ProjectLabel from 'app/components/projectLabel';\nimport BookmarkStar from 'app/components/projects/bookmarkStar';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\n\ntype Props = {\n  project: Project;\n  organization: Organization;\n};\n\ntype State = {\n  isBookmarked: boolean;\n};\n\nclass ProjectItem extends Component<Props, State> {\n  state: State = {\n    isBookmarked: this.props.project.isBookmarked,\n  };\n\n  handleToggleBookmark = (isBookmarked: State['isBookmarked']) => {\n    this.setState({isBookmarked});\n  };\n\n  render() {\n    const {project, organization} = this.props;\n\n    return (\n      <Wrapper>\n        <BookmarkLink\n          organization={organization}\n          project={project}\n          isBookmarked={this.state.isBookmarked}\n          onToggle={this.handleToggleBookmark}\n        />\n        <Link to={`/settings/${organization.slug}/projects/${project.slug}/`}>\n          <ProjectLabel project={project} />\n        </Link>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst BookmarkLink = styled(BookmarkStar)`\n  margin-right: ${space(1)};\n  margin-top: -${space(0.25)};\n`;\n\nexport default ProjectItem;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconFlag, IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ProjectListItem from 'app/views/settings/components/settingsProjectItem';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  pageLinks: null | string;\n  unlinkedProjects: Project[];\n  linkedProjects: Project[];\n};\n\ntype DropdownAutoCompleteProps = React.ComponentProps<typeof DropdownAutoComplete>;\ntype Item = Parameters<NonNullable<DropdownAutoCompleteProps['onSelect']>>[0];\n\nclass TeamProjects extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects() {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, jqXHR]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  }\n\n  fetchUnlinkedProjects(query = '') {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  }\n\n  handleLinkProject = (project: Project, action: string) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: resp => {\n        this.fetchAll();\n        ProjectActions.updateSuccess(resp);\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: () => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = (selection: Item) => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n    if (project) {\n      this.handleLinkProject(project, 'add');\n    }\n  };\n\n  handleQueryUpdate = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects: Project[]) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"small\"\n              disabled={!canWrite}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => ({\n      value: p.id,\n      searchKey: p.slug,\n      label: <ProjectListElement>{p.slug}</ProjectListElement>,\n    }));\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xsmall\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xsmall\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"sourceRoot":""}