{"version":3,"sources":["webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/views/settings/projectAlerts/create.tsx"],"names":["IncidentRulesCreate","router","props","orgId","params","metric","name","push","this","project","eventView","wizardTemplate","sessionId","teams","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","userTeamIds","filter","isMember","map","id","organization","features","includes","projectTeamIds","Set","defaultOwnerId","find","has","owner","onSubmitSuccess","handleSubmitSuccess","rule","projects","slug","Component","withTeams","Create","undefined","alertType","location","pathname","uniqueId","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","project_id","session_id","query","createFromDiscover","createFromWizard","EventView","aggregate","dataset","eventTypes","browserHistory","wizardAlertType","hasMetricAlerts","projectId","routes","state","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","orgSlug","alertName","canChangeProject","AlertWizardAlertNames","AlertConditionsBody","fullWidth","isCustomMetric","Layout","space"],"mappings":"g6GAmCMA,E,uoBACkB,WAAM,IACnBC,EAAU,EAAKC,MAAfD,OACAE,EAAS,EAAKD,MAAME,OAApBD,MAEPE,oBAAsB,CAACC,KAAM,kBAC7BL,EAAOM,KAAP,yBAA8BJ,EAA9B,sB,uCAGF,WAAS,MACkEK,KAAKN,MAAvEO,EADA,EACAA,QAASC,EADT,EACSA,UAAWC,EADpB,EACoBA,eAAgBC,EADpC,EACoCA,UAAWC,EAD/C,EAC+CA,MAAUX,GADzD,uEAEDY,EAAcJ,GAChBK,QAAwBL,GACxBC,GACAK,QAA6BL,IAC7BM,UAEEC,EAAcL,EAAMM,QAAO,qBAAEC,YAAwBC,KAAI,qBAAEC,MAEjE,GAAIpB,EAAMqB,aAAaC,SAASC,SAAS,yBAA0B,OAC3DC,EAAiB,IAAIC,IAAIlB,EAAQI,MAAMQ,KAAI,qBAAEC,OAC7CM,EAAc,UAAGV,EAAYW,MAAK,SAAAP,GAAE,OAAII,EAAeI,IAAIR,aAA7C,QAAqD,KACzER,EAAYiB,MAAQH,GAAkB,QAAJ,OAAYA,GAGhD,OACE,QAAC,IAAD,GACEI,gBAAiBxB,KAAKyB,oBACtBC,KAAI,OAAMpB,GAAN,IAAmBqB,SAAU,CAAC1B,EAAQ2B,QAC1CxB,UAAWA,EACXH,QAASA,EACTS,YAAaA,GACThB,Q,GAhCsBmC,aAA5BrC,E,kCAsCN,SAAesC,OAAUtC,G,ipBChCnBuC,E,wnBACW,CACb7B,eAAW8B,EACXC,UAAW,EAAKvC,MAAMwC,SAASC,SAASlB,SAAS,kBAC7C,QACA,EAAKvB,MAAMwC,SAASC,SAASlB,SAAS,yBACtC,SACA,Q,+BA4CMmB,W,2CAEY,SAACH,GAEvB,EAAKI,SAAS,CAACJ,iB,kDA7CjB,WAAoB,MACwBjC,KAAKN,MAAxCqB,EADW,EACXA,aAAcmB,EADH,EACGA,SAAUjC,EADb,EACaA,QAU/B,IARAqC,QAAoB,CAClBC,SAAU,wBACVC,UAAW,yBACXC,gBAAiB1B,EAAaD,GAC9B4B,WAAYzC,EAAQa,GACpB6B,WAAY3C,KAAKI,YAGf8B,WAAUU,MAAO,KACZA,EAASV,EAATU,MACAC,EAAwCD,EAAxCC,mBAAoBC,EAAoBF,EAApBE,iBAC3B,GAAID,EAAoB,CACtB,IAAM3C,EAAY6C,kBAAuBb,GAEzClC,KAAKqC,SAAS,CAACJ,UAAW,SAAU/B,mBAC/B,GAAI4C,EAAkB,KACpBE,EAAkCJ,EAAlCI,UAAWC,EAAuBL,EAAvBK,QAASC,EAAcN,EAAdM,WACvBF,GAAaC,GAAWC,EAE1BlD,KAAKqC,SAAS,CACZJ,UAAW,SACX9B,eAAgB,CAAC6C,YAAWC,UAASC,gBAIvClD,KAAKqC,SAAS,CACZJ,UAAW,eAIfkB,yBAAA,yBACoBpC,EAAaa,KADjC,mBACgD3B,EAAQa,GADxD,e,oBAeN,WAAS,MAWHsC,EAXG,EAQHpD,KAAKN,MANP2D,EAFK,EAELA,gBACAtC,EAHK,EAGLA,aACAd,EAJK,EAILA,QACSqD,EALJ,EAKL1D,OAAS0D,UACTpB,EANK,EAMLA,SACAqB,EAPK,EAOLA,OAPK,EASwCvD,KAAKwD,MAA7CvB,EATA,EASAA,UAAW/B,EATX,EASWA,UAAWC,EATtB,EASsBA,eAGzB+B,SAAJ,UAAIA,EAAUU,aAAd,OAAI,EAAiBE,mBACnBM,EAAkBjD,GACdsD,OAAiCtD,GACjC,UAGN,IAAMuD,GAAQC,OAAE,kBAEhB,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,IAAD,CAAqBF,MAAOA,EAAOG,YAAaP,KAEhD,QAAC,KAAD,WACE,QAACQ,EAAD,YACE,QAAC,IAAD,CACET,gBAAiBA,EACjBU,QAAShD,EAAaa,KACtBoC,WAAWL,OAAE,kBACbD,MAAON,GAAkBO,OAAE,gBAAkBD,EAC7CG,YAAaP,EACbC,OAAQA,EACRrB,SAAUA,EACV+B,kBAAgB,KAElB,QAAC,KAAD,UACGb,EAAe,WACTO,OAAE,sBADO,YACkBO,KAAsBd,IACpDM,UAIV,QAACS,EAAD,WACE,QAAC,KAAD,CAAaC,WAAS,EAAtB,YACKf,GAAiC,UAAdpB,KACpB,QAAC,IAAD,OAAqBjC,KAAKN,OAA1B,IAAiCO,QAASA,KAG3CoD,GAAiC,WAAdpB,IAClB,QAAC,EAAD,OACMjC,KAAKN,OADX,IAEEQ,UAAWA,EACXC,eAAgBA,EAChBC,UAAWJ,KAAKI,UAChBH,QAASA,EACToE,eAAoC,WAApBjB,iB,GAlHXvB,aAAfE,E,qBA4HN,IAAMoC,GAAsB,OAAOG,KAAP,qBAAH,mBACLC,OAAM,GADD,kCAQnBT,GAAsB,OAAOQ,KAAP,qBAAH,4CAIzB","file":"app_views_settings_projectAlerts_create_tsx.fbfbc2abc0678002775a.js","sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project, Team} from 'app/types';\nimport {metric} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport withTeams from 'app/utils/withTeams';\nimport {WizardRuleTemplate} from 'app/views/alerts/wizard/options';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'app/views/settings/incidentRules/constants';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  eventView: EventView | undefined;\n  teams: Team[];\n  wizardTemplate?: WizardRuleTemplate;\n  sessionId?: string;\n  isCustomMetric?: boolean;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends Component<Props> {\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  render() {\n    const {project, eventView, wizardTemplate, sessionId, teams, ...props} = this.props;\n    const defaultRule = eventView\n      ? createRuleFromEventView(eventView)\n      : wizardTemplate\n      ? createRuleFromWizardTemplate(wizardTemplate)\n      : createDefaultRule();\n\n    const userTeamIds = teams.filter(({isMember}) => isMember).map(({id}) => id);\n\n    if (props.organization.features.includes('team-alerts-ownership')) {\n      const projectTeamIds = new Set(project.teams.map(({id}) => id));\n      const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n      defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n    }\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...defaultRule, projects: [project.slug]}}\n        sessionId={sessionId}\n        project={project}\n        userTeamIds={userTeamIds}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withTeams(IncidentRulesCreate);\n","import {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'app/components/layouts/thirds';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport {uniqueId} from 'app/utils/guid';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  WizardRuleTemplate,\n} from 'app/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'app/views/alerts/wizard/utils';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport IssueRuleEditor from 'app/views/settings/projectAlerts/issueRuleEditor';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype State = {\n  alertType: AlertType;\n  eventView: EventView | undefined;\n  wizardTemplate?: WizardRuleTemplate;\n};\n\nclass Create extends Component<Props, State> {\n  state: State = {\n    eventView: undefined,\n    alertType: this.props.location.pathname.includes('/alerts/rules/')\n      ? 'issue'\n      : this.props.location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : null,\n  };\n\n  componentDidMount() {\n    const {organization, location, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      session_id: this.sessionId,\n    });\n\n    if (location?.query) {\n      const {query} = location;\n      const {createFromDiscover, createFromWizard} = query;\n      if (createFromDiscover) {\n        const eventView = EventView.fromLocation(location);\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState({alertType: 'metric', eventView});\n      } else if (createFromWizard) {\n        const {aggregate, dataset, eventTypes} = query;\n        if (aggregate && dataset && eventTypes) {\n          // eslint-disable-next-line react/no-did-mount-set-state\n          this.setState({\n            alertType: 'metric',\n            wizardTemplate: {aggregate, dataset, eventTypes},\n          });\n        } else {\n          // eslint-disable-next-line react/no-did-mount-set-state\n          this.setState({\n            alertType: 'issue',\n          });\n        }\n      } else {\n        browserHistory.replace(\n          `/organizations/${organization.slug}/alerts/${project.id}/wizard`\n        );\n      }\n    }\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  handleChangeAlertType = (alertType: AlertType) => {\n    // alertType should be `issue` or `metric`\n    this.setState({alertType});\n  };\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      project,\n      params: {projectId},\n      location,\n      routes,\n    } = this.props;\n    const {alertType, eventView, wizardTemplate} = this.state;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (location?.query?.createFromWizard) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              hasMetricAlerts={hasMetricAlerts}\n              orgSlug={organization.slug}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={projectId}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <AlertConditionsBody>\n          <Layout.Main fullWidth>\n            {(!hasMetricAlerts || alertType === 'issue') && (\n              <IssueRuleEditor {...this.props} project={project} />\n            )}\n\n            {hasMetricAlerts && alertType === 'metric' && (\n              <IncidentRulesCreate\n                {...this.props}\n                eventView={eventView}\n                wizardTemplate={wizardTemplate}\n                sessionId={this.sessionId}\n                project={project}\n                isCustomMetric={wizardAlertType === 'custom'}\n              />\n            )}\n          </Layout.Main>\n        </AlertConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst AlertConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nexport default Create;\n"],"sourceRoot":""}