{"version":3,"sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/components/pluginConfig.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","jqXHR","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","Reflux","PluginConfig","loading","plugins","props","testResults","onDisablePlugin","setState","getPluginEndpoint","test","JSON","stringify","this","loadPlugin","nextProps","nextState","isEqual","state","organization","project","slug","id","__html","doc","className","data-test-id","hasButtons","PluginName","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","handleDisablePlugin","status","type","StyledPanelBody","dangerouslySetInnerHTML","createMarkup","renderSettings","Component","withApi","PluginIcon","space","Button","PanelBody","defaultState","error","PluginStoreConfig","updating","Map","reset","getInitialState","getState","Array","from","values","init","listenTo","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","map","plugin","updateObj","get","newPlugin","set","_updateObj","origPlugin","WrappedComponent","withOrganization","withProject","createReactClass","displayName","getDisplayName","mixins","PluginsStore","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","prevOrg","prevProject","defined","isOrgSame","isProjectSame","render","store","AsyncView","title","getTitle","renderComponent","AsyncComponent","ProjectPluginDetails","trackIntegrationEvent","integration","integration_type","view","success","pluginDetails","analyticsChangeEnableStatus","eventKey","recordDetailsViewed","value","split","find","getEnabled","enable","StyledButton","handleEnable","disable","priority","handleDisable","toggleEnable","handleReset","action","renderActions","author","url","href","trimSchema","version","description","resourceLinks","withPlugins"],"mappings":"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","file":"app_views_settings_projectPlugins_details_tsx.7625b23e2798aea25022.js","sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport PluginActions from 'app/actions/pluginActions';\nimport {Client, RequestOptions} from 'app/api';\nimport {t} from 'app/locale';\nimport {Plugin} from 'app/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, jqXHR]) => {\n      PluginActions.fetchAllSuccess(data, {\n        pageLinks: jqXHR && jqXHR.getResponseHeader('Link'),\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import Reflux from 'reflux';\n\nconst PluginActions = Reflux.createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport plugins from 'app/plugins';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Organization, Plugin, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  api: Client;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"small\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button size=\"small\" onClick={this.handleDisablePlugin}>\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n","import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    //reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\ntype PluginStore = Reflux.Store & PluginStoreInterface;\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig);\n\nexport default PluginStore as PluginStore;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype InjectedPluginProps = {\n  plugins: {plugins: Plugin[]; loading: boolean};\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nconst withPlugins = <P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withOrganization(\n    withProject(\n      createReactClass<Omit<P, keyof InjectedPluginProps> & WithPluginProps, {}>({\n        displayName: `withPlugins(${getDisplayName(WrappedComponent)})`,\n        mixins: [Reflux.connect(PluginsStore, 'store') as any],\n\n        componentDidMount() {\n          this.fetchPlugins();\n        },\n\n        componentDidUpdate(prevProps, _prevState, prevContext) {\n          const {organization, project} = this.props;\n\n          // Only fetch plugins when a org slug or project slug has changed\n          const prevOrg =\n            prevProps.organization || (prevContext && prevContext.organization);\n          const prevProject = prevProps.project || (prevContext && prevContext.project);\n\n          // If previous org/project is undefined then it means:\n          // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n          // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n          //\n          // This is for the unusual case where component is mounted and receives a new org/project prop\n          // e.g. when switching projects via breadcrumbs in settings.\n          if (!defined(prevProject) || !defined(prevOrg)) {\n            return;\n          }\n\n          const isOrgSame = prevOrg.slug === organization.slug;\n          const isProjectSame = prevProject.slug === project?.slug;\n\n          // Don't do anything if org and project are the same\n          if (isOrgSame && isProjectSame) {\n            return;\n          }\n\n          this.fetchPlugins();\n        },\n\n        fetchPlugins() {\n          const {organization, project} = this.props;\n\n          if (!project || !organization) {\n            return;\n          }\n\n          fetchPlugins({projectId: project.slug, orgId: organization.slug});\n        },\n\n        render() {\n          return (\n            <WrappedComponent\n              {...(this.props as P & WithPluginProps)}\n              plugins={this.state.store}\n            />\n          );\n        },\n      })\n    )\n  );\n\nexport default withPlugins;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport withPlugins from 'app/utils/withPlugins';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  plugins: {\n    plugins: Plugin[];\n  };\n} & WithRouterProps<{orgId: string; projectId: string; pluginId: string}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & AsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevContext: any) {\n    super.componentDidUpdate(prevProps, prevContext);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationEvent(\n      'integrations.details_viewed',\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    } else {\n      return 'Sentry';\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId, pluginId} = this.props.params;\n    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {projectId, orgId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationEvent(\n      'integrations.uninstall_clicked',\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n\n    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationEvent(\n          'integrations.uninstall_completed',\n          {\n            integration: pluginId,\n            integration_type: 'plugin',\n            view: 'plugin_details',\n          },\n          this.props.organization\n        );\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    enablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    disablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationEvent(\n      eventKey,\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"small\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"small\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"small\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>{pluginDetails.version}</dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"sourceRoot":""}