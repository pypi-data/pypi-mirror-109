{"version":3,"sources":["webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx","webpack:///./images/spot/alerts-empty-state.svg"],"names":["LineChart","this","props","series","seriesOptions","map","seriesName","data","dataArray","options","LineSeries","name","value","animation","animationThreshold","animationDuration","React","OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","ButtonBar","DEFAULT_QUERY_STATUS","DOCS_URL","IncidentsList","title","router","location","query","currentQuery","cursor","page","push","pathname","sectionId","activeFilters","team","size","status","length","params","organization","getQueryStatus","features","includes","getTeamParams","expand","orgId","Array","isArray","hasAlertHistoryFilters","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","alertRules","promptsCheck","organizationId","id","feature","prompt","dismissedTime","promptsUpdate","teams","selectedTeams","Set","selectedStatus","FilterWrapper","showStatus","handleChangeFilter","StyledSearchBar","placeholder","onSearch","handleChangeSearch","Fragment","external","href","iconProps","priority","referrer","icon","isCircled","description","tct","link","renderBody","incidentListPageLinks","allProjectsFromIncidents","flatten","projects","checkingForAlertRules","undefined","showLoadingIndicator","tryRenderOnboarding","tryRenderEmpty","slugs","from","initiallyLoaded","incident","projectsLoaded","pageLinks","openIncidentsQuery","omit","closedIncidentsQuery","orgSlug","showDateSelector","activeTab","StyledLayoutBody","fullWidth","StyledAlert","renderFilterBar","StyledButtonBar","merged","active","to","barId","renderList","AsyncComponent","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","organization_id","type","hookName","renderDisabled","renderNoAccess","Component","Alert","SearchBar","Layout","withOrganization","withTeams","makeRuleDetailsQuery","timeWindowMillis","alertRule","timeWindow","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","memoize","slug","find","project","getIncidentMetricPreset","started","duration","Date","as","alertLink","isIssueAlert","alertDetailsLink","alert","identifier","hasAlertOwnership","ownerId","owner","split","teamActor","IncidentPanelItem","Title","date","extraShort","StyledTimeSeparator","IncidentStatus","seconds","getDynamicText","fixed","ProjectBadge","avatarSize","getProject","FlexCenter","actor","IdBadge","gray200","overflowEllipsis","PanelItem","fontSizeMedium","TableLayout","TIME_OPTIONS","label","TimePeriod","TIME_WINDOWS","TimeWindow","module","exports"],"mappings":"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","file":"app_components_charts_lineChart_tsx-app_views_alerts_list_index_tsx.e947d5b2e2490af9c2e2.js","sourcesContent":["import * as React from 'react';\nimport {EChartOption} from 'echarts';\n\nimport {Series} from 'app/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport type LineChartSeries = Series &\n  Omit<EChartOption.SeriesLine, 'data' | 'name'> & {\n    dataArray?: EChartOption.SeriesLine['data'];\n  };\n\ntype Props = Omit<ChartProps, 'series'> & {\n  series: LineChartSeries[];\n  seriesOptions?: EChartOption.SeriesLine;\n};\n\nexport default class LineChart extends React.Component<Props> {\n  render() {\n    const {series, seriesOptions, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        series={series.map(({seriesName, data, dataArray, ...options}) =>\n          LineSeries({\n            ...seriesOptions,\n            ...options,\n            name: seriesName,\n            data: dataArray || data.map(({value, name}) => [name, value]),\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n          })\n        )}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\nimport omit from 'lodash/omit';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconCheckmark, IconInfo} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport TeamFilter, {getTeamParams} from '../rules/teamFilter';\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\nimport {TableLayout} from './styles';\n\nconst DEFAULT_QUERY_STATUS = 'open';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  teams: Team[];\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location, organization} = this.props;\n    const {query} = location;\n\n    const status = this.getQueryStatus(query.status);\n    // Filtering by one status, both does nothing\n    if (status.length === 1) {\n      query.status = status;\n    }\n\n    if (organization.features.includes('team-alerts-ownership')) {\n      query.team = getTeamParams(query.team);\n    }\n\n    if (organization.features.includes('alert-details-redesign')) {\n      query.expand = ['original_alert_rule'];\n    }\n\n    return [['incidentList', `/organizations/${params?.orgId}/incidents/`, {query}]];\n  }\n\n  getQueryStatus(status: string | string[]): string[] {\n    if (Array.isArray(status)) {\n      return status;\n    }\n\n    if (status === '') {\n      return [];\n    }\n\n    // No default status w/ alert-history-filters\n    const hasAlertHistoryFilters = this.props.organization.features.includes(\n      'alert-history-filters'\n    );\n\n    return ['open', 'closed'].includes(status as string)\n      ? [status as string]\n      : hasAlertHistoryFilters\n      ? []\n      : [DEFAULT_QUERY_STATUS];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (sectionId: string, activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    let team = currentQuery.team;\n    if (sectionId === 'teams') {\n      team = activeFilters.size ? [...activeFilters] : '';\n    }\n\n    let status = currentQuery.status;\n    if (sectionId === 'status') {\n      status = activeFilters.size ? [...activeFilters] : '';\n    }\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status,\n        // Preserve empty team query parameter\n        team: team.length === 0 ? '' : team,\n      },\n    });\n  };\n\n  renderFilterBar() {\n    const {teams, location} = this.props;\n    const selectedTeams = new Set(getTeamParams(location.query.team));\n    const selectedStatus = new Set(this.getQueryStatus(location.query.status));\n\n    return (\n      <FilterWrapper>\n        <TeamFilter\n          showStatus\n          teams={teams}\n          selectedStatus={selectedStatus}\n          selectedTeams={selectedTeams}\n          handleChangeFilter={this.handleChangeFilter}\n        />\n        <StyledSearchBar\n          placeholder={t('Search by name')}\n          query={location.query?.name}\n          onSearch={this.handleChangeSearch}\n        />\n      </FilterWrapper>\n    );\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  tryRenderEmpty() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length > 0) {\n      return null;\n    }\n\n    return (\n      <EmptyMessage\n        size=\"medium\"\n        icon={<IconCheckmark isCircled size=\"48\" />}\n        title={t('No incidents exist for the current query.')}\n        description={tct('Learn more about [link:Metric Alerts]', {\n          link: <ExternalLink href={DOCS_URL} />,\n        })}\n      />\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <Panel>\n            {!loading && (\n              <PanelHeader>\n                <TableLayout>\n                  <div>{t('Alert')}</div>\n                  <div>{t('Alert Rule')}</div>\n                  <div>{t('Project')}</div>\n                  <div>\n                    <Feature\n                      features={['team-alerts-ownership']}\n                      organization={organization}\n                    >\n                      {t('Team')}\n                    </Feature>\n                  </div>\n                </TableLayout>\n              </PanelHeader>\n            )}\n            {showLoadingIndicator ? (\n              <LoadingIndicator />\n            ) : (\n              this.tryRenderEmpty() ?? (\n                <PanelBody>\n                  <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                    {({initiallyLoaded, projects}) =>\n                      incidentList.map(incident => (\n                        <AlertListRow\n                          key={incident.id}\n                          projectsLoaded={initiallyLoaded}\n                          projects={projects as Project[]}\n                          incident={incident}\n                          orgId={orgId}\n                          organization={organization}\n                        />\n                      ))\n                    }\n                  </Projects>\n                </PanelBody>\n              )\n            )}\n          </Panel>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router, location} = this.props;\n    const {pathname, query} = location;\n    const {orgId} = params;\n\n    const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');\n    const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');\n    const status = this.getQueryStatus(location.query.status)[0] || DEFAULT_QUERY_STATUS;\n    const hasAlertHistoryFilters = organization.features.includes(\n      'alert-history-filters'\n    );\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <StyledLayoutBody>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <Feature\n                    features={['alert-details-redesign']}\n                    organization={organization}\n                  >\n                    <StyledAlert icon={<IconInfo />}>\n                      {t('This page only shows metric alerts.')}\n                    </StyledAlert>\n                  </Feature>\n                  {hasAlertHistoryFilters ? (\n                    this.renderFilterBar()\n                  ) : (\n                    <StyledButtonBar merged active={status}>\n                      <Button\n                        to={{pathname, query: openIncidentsQuery}}\n                        barId=\"open\"\n                        size=\"small\"\n                      >\n                        {t('Unresolved')}\n                      </Button>\n                      <Button\n                        to={{pathname, query: closedIncidentsQuery}}\n                        barId=\"closed\"\n                        size=\"small\"\n                      >\n                        {t('Resolved')}\n                      </Button>\n                    </StyledButtonBar>\n                  )}\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </StyledLayoutBody>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  width: 100px;\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst FilterWrapper = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n  margin-left: ${space(1.5)};\n`;\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -20px;\n`;\n\nexport default withOrganization(withTeams(IncidentsListContainer));\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport ActorAvatar from 'app/components/avatar/actorAvatar';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Actor, Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {alertDetailsLink} from 'app/views/alerts/details';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\nimport {TableLayout} from './styles';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  organization: Organization;\n};\n\nclass AlertListRow extends Component<Props> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  render() {\n    const {incident, orgId, projectsLoaded, projects, organization} = this.props;\n    const slug = incident.projects[0];\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n\n    const hasRedesign =\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: alertDetailsLink(organization, incident),\n          query: {alert: incident.identifier},\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n    const hasAlertOwnership = organization.features.includes('team-alerts-ownership');\n    const ownerId = incident.alertRule.owner?.split(':')[1];\n    const teamActor = ownerId\n      ? {type: 'team' as Actor['type'], id: ownerId, name: ''}\n      : null;\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout>\n            <Title>\n              <Link to={alertLink}>Alert #{incident.id}</Link>\n              <div>\n                {t('Triggered ')} <TimeSince date={incident.dateStarted} extraShort />\n                <StyledTimeSeparator> | </StyledTimeSeparator>\n                {incident.status === IncidentStatus.CLOSED\n                  ? tct('Active for [duration]', {\n                      duration: (\n                        <Duration\n                          seconds={getDynamicText({value: duration, fixed: 1200})}\n                        />\n                      ),\n                    })\n                  : t('Still Active')}\n              </div>\n            </Title>\n\n            <div>{incident.title}</div>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            <FlexCenter>\n              {hasAlertOwnership &&\n                (teamActor ? <ActorAvatar actor={teamActor} size={24} /> : '-')}\n            </FlexCenter>\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StyledTimeSeparator = styled('span')`\n  color: ${p => p.theme.gray200};\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport default AlertListRow;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 3fr 2fr 2fr 0.5fr;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nexport {TableLayout};\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/settings/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  start: string;\n  end: string;\n  period: string;\n  label: string;\n  display: React.ReactNode;\n  custom?: boolean;\n};\n","module.exports = __webpack_public_path__ + \"spot/alerts-empty-state.4d03bc.svg\";"],"sourceRoot":""}