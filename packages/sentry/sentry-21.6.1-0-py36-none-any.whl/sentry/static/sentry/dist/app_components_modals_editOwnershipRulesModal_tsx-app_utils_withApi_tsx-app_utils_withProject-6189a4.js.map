{"version":3,"sources":["webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/views/settings/project/projectOwnership/editRulesModal.tsx","webpack:///./app/components/modals/editOwnershipRulesModal.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx","webpack:///../node_modules/core-js/modules/es.array.find-index.js","webpack:///../node_modules/lodash/_isIterateeCall.js"],"names":["Reflux","EditOwnershipRulesModal","ownership","this","props","Fragment","Block","t","CodeBlock","initialText","raw","Component","TextBlock","Body","Header","onSave","closeButton","modalCss","css","theme","storeConfig","itemsById","loading","init","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","items","reduce","map","project","id","trigger","Set","Object","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","data","getById","assign","touchedIds","entries","forEach","projectId","stats","push","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","getAll","find","values","sort","a","b","getBySlugs","slugs","includes","getState","projects","WrappedComponent","persistInFlight","api","Client","clear","React","getDisplayName","createReactClass","displayName","mixins","ProjectsStore","getInitialState","onProjectUpdate","setState","render","state","loadingProjects","$","$findIndex","addToUnscopables","FIND_INDEX","SKIPS_HOLES","Array","target","proto","forced","findIndex","callbackfn","arguments","length","undefined","eq","isArrayLike","isIndex","isObject","module","exports","value","index","object","type"],"mappings":"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","file":"app_components_modals_editOwnershipRulesModal_tsx-app_utils_withApi_tsx-app_utils_withProject-6189a4.1fa17c48879b478d87b8.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {EditOwnershipRulesModalOptions} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport OwnerInput from 'app/views/settings/project/projectOwnership/ownerInput';\n\ntype Props = EditOwnershipRulesModalOptions;\ntype State = {};\n\nclass EditOwnershipRulesModal extends Component<Props, State> {\n  render() {\n    const {ownership} = this.props;\n    return (\n      <Fragment>\n        <Block>\n          {t('Rules follow the pattern: ')} <code>type:glob owner owner</code>\n        </Block>\n        <Block>\n          {t('Owners can be team identifiers starting with #, or user emails')}\n        </Block>\n        <Block>\n          {t('Globbing Syntax:')}\n          <CodeBlock>{'* matches everything\\n? matches any single character'}</CodeBlock>\n        </Block>\n        <Block>\n          {t('Examples')}\n          <CodeBlock>\n            path:src/example/pipeline/* person@sentry.io #infrastructure\n            {'\\n'}\n            url:http://example.com/settings/* #product\n            {'\\n'}\n            tags.sku_class:enterprise #enterprise\n          </CodeBlock>\n        </Block>\n        {ownership && <OwnerInput {...this.props} initialText={ownership.raw || ''} />}\n      </Fragment>\n    );\n  }\n}\n\nconst Block = styled(TextBlock)`\n  margin-bottom: 16px;\n`;\n\nconst CodeBlock = styled('pre')`\n  word-break: break-all;\n  white-space: pre-wrap;\n`;\n\nexport default EditOwnershipRulesModal;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\n\nimport {EditOwnershipRulesModalOptions, ModalRenderProps} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport theme from 'app/utils/theme';\nimport OwnershipModal from 'app/views/settings/project/projectOwnership/editRulesModal';\n\ntype Props = ModalRenderProps & EditOwnershipRulesModalOptions;\n\nconst EditOwnershipRulesModal = ({Body, Header, onSave, ...props}: Props) => {\n  return (\n    <Fragment>\n      <Header closeButton>{t('Edit Ownership Rules')}</Header>\n      <Body>\n        <OwnershipModal {...props} onSave={onSave} />\n      </Body>\n    </Fragment>\n  );\n};\n\nexport const modalCss = css`\n  @media (min-width: ${theme.breakpoints[0]}) {\n    width: 80%;\n  }\n  [role='document'] {\n    overflow: initial;\n  }\n`;\n\nexport default EditOwnershipRulesModal;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nconst withProjects = <P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  >({\n    displayName: `withProjects(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate') as any],\n    getInitialState() {\n      return ProjectsStore.getState();\n    },\n\n    onProjectUpdate() {\n      this.setState(ProjectsStore.getState());\n    },\n    render() {\n      return (\n        <WrappedComponent\n          {...this.props}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    },\n  });\n\nexport default withProjects;\n","'use strict';\nvar $ = require('../internals/export');\nvar $findIndex = require('../internals/array-iteration').findIndex;\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\nvar FIND_INDEX = 'findIndex';\nvar SKIPS_HOLES = true;\n\n// Shouldn't skip holes\nif (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.findIndex` method\n// https://tc39.es/ecma262/#sec-array.prototype.findindex\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND_INDEX);\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n"],"sourceRoot":""}