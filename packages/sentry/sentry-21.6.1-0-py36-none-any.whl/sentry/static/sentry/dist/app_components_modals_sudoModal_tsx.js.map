{"version":3,"sources":["webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/modals/sudoModal.tsx","webpack:///./app/utils/withApi.tsx"],"names":["U2fContainer","authenticators","this","getAuthenticators","api","props","requestPromise","setState","className","state","length","map","auth","id","challenge","challengeData","Component","withApi","SudoModal","error","busy","closeModal","superuser","location","router","retryRequest","replace","pathname","forceUpdate","Date","then","data","method","handleSuccess","user","ConfigStore","hasPasswordAuth","StyledTextBlock","t","StyledAlert","type","icon","size","apiMethod","apiEndpoint","submitLabel","onSubmitSuccess","onSubmitError","handleError","hideFooter","resetOnError","StyledInputField","inline","label","name","autoFocus","flexibleControlStateSize","displayMode","onTap","handleU2fTap","priority","href","encodeURIComponent","Header","Body","closeButton","renderBodyContent","React","withRouter","TextBlock","space","InputField","Alert","WrappedComponent","persistInFlight","Client","clear","getDisplayName"],"mappings":"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","file":"app_components_modals_sudoModal_tsx.dafff4ae827c3fddf89b.js","sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'app/api';\nimport {Authenticator} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\nimport U2fSign from './u2fsign';\n\ntype Props = {\n  api: Client;\n  onTap: U2fSign['props']['onTap'];\n  displayMode?: U2fSign['props']['displayMode'];\n  className?: string;\n};\ntype State = {\n  authenticators: Array<Authenticator>;\n};\n\nclass U2fContainer extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n  };\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {className} = this.props;\n    const {authenticators} = this.state;\n\n    if (!authenticators.length) {\n      return null;\n    }\n\n    return (\n      <div className={className}>\n        {authenticators.map(auth =>\n          auth.id === 'u2f' && auth.challenge ? (\n            <U2fSign key={auth.id} {...this.props} challengeData={auth.challenge} />\n          ) : null\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withApi(U2fContainer);\n","import * as React from 'react';\nimport {withRouter} from 'react-router';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport U2fContainer from 'app/components/u2f/u2fContainer';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport Form from 'app/views/settings/components/forms/form';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    superuser?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  error: boolean;\n  busy: boolean;\n};\n\nclass SudoModal extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    busy: false,\n  };\n\n  handleSuccess = () => {\n    const {closeModal, superuser, location, router, retryRequest} = this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (superuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      return;\n    }\n\n    this.setState({busy: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false}, closeModal);\n      });\n    });\n  };\n\n  handleError = () => {\n    this.setState({busy: false, error: true});\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api} = this.props;\n\n    try {\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  renderBodyContent() {\n    const {superuser} = this.props;\n    const {error} = this.state;\n    const user = ConfigStore.get('user');\n\n    if (!user.hasPasswordAuth) {\n      return (\n        <React.Fragment>\n          <TextBlock>{t('You will need to reauthenticate to continue.')}</TextBlock>\n          <Button\n            priority=\"primary\"\n            href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n          >\n            {t('Continue')}\n          </Button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StyledTextBlock>\n          {superuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            {t('Incorrect password')}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Confirm Password')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth}\n          resetOnError\n        >\n          <StyledInputField\n            type=\"password\"\n            inline={false}\n            label={t('Password')}\n            name=\"password\"\n            autoFocus\n            flexibleControlStateSize\n          />\n          <U2fContainer displayMode=\"sudo\" onTap={this.handleU2fTap} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton>{t('Confirm Password to Continue')}</Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n"],"sourceRoot":""}