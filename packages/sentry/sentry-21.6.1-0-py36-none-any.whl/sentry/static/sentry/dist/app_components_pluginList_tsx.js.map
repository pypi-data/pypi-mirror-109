{"version":3,"sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/components/pluginConfig.tsx","webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","jqXHR","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","Reflux","PluginConfig","loading","plugins","props","testResults","onDisablePlugin","setState","getPluginEndpoint","test","JSON","stringify","this","loadPlugin","nextProps","nextState","isEqual","state","organization","project","slug","id","__html","doc","className","data-test-id","hasButtons","PluginName","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","handleDisablePlugin","status","type","StyledPanelBody","dangerouslySetInnerHTML","createMarkup","renderSettings","Component","withApi","PluginIcon","space","Button","PanelBody","InactivePlugins","onEnablePlugin","length","Plugins","map","plugin","IntegrationButton","Label","shortName","p","theme","fontSizeSmall","borderRadius","PluginList","pluginList","filter","isHidden"],"mappings":"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","file":"app_components_pluginList_tsx.e8450cda55c3f4aa51f5.js","sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport PluginActions from 'app/actions/pluginActions';\nimport {Client, RequestOptions} from 'app/api';\nimport {t} from 'app/locale';\nimport {Plugin} from 'app/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, jqXHR]) => {\n      PluginActions.fetchAllSuccess(data, {\n        pageLinks: jqXHR && jqXHR.getResponseHeader('Link'),\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import Reflux from 'reflux';\n\nconst PluginActions = Reflux.createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport plugins from 'app/plugins';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Organization, Plugin, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  api: Client;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"small\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button size=\"small\" onClick={this.handleDisablePlugin}>\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Plugin} from 'app/types';\n\ntype Props = {\n  plugins: Plugin[];\n  onEnablePlugin: (plugin: Plugin) => void;\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport InactivePlugins from 'app/components/inactivePlugins';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  pluginList: Plugin[];\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n"],"sourceRoot":""}