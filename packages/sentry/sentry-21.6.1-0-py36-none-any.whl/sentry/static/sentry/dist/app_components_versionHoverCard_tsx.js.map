{"version":3,"sources":["webpack:///./app/actionCreators/release.tsx","webpack:///./app/actions/releaseActions.tsx","webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/releaseStore.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"names":["getProjectRelease","api","params","orgSlug","projectSlug","releaseVersion","path","encodeURIComponent","ReleaseStore","getReleaseStoreKey","ReleaseActions","requestPromise","method","then","res","err","status","Sentry","scope","setLevel","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","t","data","ReleaseStatus","projects","version","release","addSuccessMessage","error","addErrorMessage","responseJSON","detail","restoreRelease","Reflux","unknownUser","id","name","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","message","firstLine","split","length","truncated","substr","words","pop","join","this","props","commit","headerClass","commitAuthor","author","className","user","renderMessage","date","dateCreated","Component","p","theme","white","overflowEllipsis","gray200","fontSizeSmall","VersionHoverCard","visible","setState","organization","slug","header","body","ConnectRepo","href","priority","deploys","undefined","defined","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","size","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","map","env","idx","position","VersionRepoLabel","StyledTimeSince","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","mini","renderObj","getBody","getRepoLink","children","React","withApi","WrappedComponent","withRepositories","createReactClass","displayName","getDisplayName","mixins","getInitialState","componentDidMount","fetchRelease","fetchDeploys","releaseData","onStoreUpdate","render","state","space","RepoLabel","TimeSince","gray300","Version","ReleaseStoreConfig","Map","listenables","init","listenTo","OrganizationActions","updateOrganization","reset","trigger","org","loadRelease","releaseKey","loadReleaseError","loadReleaseSuccess","loadDeploys","loadDeploysError","loadDeploysSuccess","get","RepositoryStoreConfig","RepoActions","resetRepositories","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","INITIAL_STATE","RepositoryStore","repoData","RepositoryActions","fetchRepositories","getRepositories"],"mappings":"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","file":"app_components_versionHoverCard_tsx.f53b0e9d558e1e044778.js","sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport ReleaseActions from 'app/actions/releaseActions';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport ReleaseStore, {getReleaseStoreKey} from 'app/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[\n    getReleaseStoreKey(projectSlug, releaseVersion)\n  ] = true;\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[\n    getReleaseStoreKey(projectSlug, releaseVersion)\n  ] = true;\n  ReleaseActions.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'loadRelease', // Singular as it loads 1 release\n  'loadReleaseError',\n  'loadReleaseSuccess',\n  'loadDeploys', // Plural as it loads all deploys related to a release\n  'loadDeploysError',\n  'loadDeploysSuccess',\n]);\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import {Component} from 'react';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\nimport {AvatarUser, Commit} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nclass LastCommit extends Component<Props> {\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return truncated + '...';\n    }\n    return firstLine;\n  }\n\n  render() {\n    const {commit, headerClass} = this.props;\n    const commitAuthor = commit && commit.author;\n    return (\n      <div>\n        <h6 className={headerClass}>Last commit</h6>\n        <div className=\"commit\">\n          <div className=\"commit-avatar\">\n            <UserAvatar user={commitAuthor || unknownUser} />\n          </div>\n          <div className=\"commit-message truncate\">\n            {this.renderMessage(commit.message)}\n          </div>\n          <div className=\"commit-meta\">\n            <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LastCommit;\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport AvatarList from 'app/components/avatar/avatarList';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Hovercard from 'app/components/hovercard';\nimport LastCommit from 'app/components/lastCommit';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport RepoLabel from 'app/components/repoLabel';\nimport TimeSince from 'app/components/timeSince';\nimport Version from 'app/components/version';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'app/types';\nimport {defined} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withRelease from 'app/utils/withRelease';\nimport withRepositories from 'app/utils/withRepositories';\n\ntype Props = {\n  api: Client;\n  projectSlug: string;\n  releaseVersion: string;\n\n  organization: Organization;\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n  repositories?: Array<Repository>;\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends React.Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row row-flex\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getProjectRelease, getReleaseDeploys} from 'app/actionCreators/release';\nimport {Client} from 'app/api';\nimport ReleaseStore from 'app/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n};\n\nconst withRelease = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRelease(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(ReleaseStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      return {...releaseData};\n    },\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    },\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    },\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    },\n  });\n\nexport default withRelease;\n","import Reflux from 'reflux';\n\nimport OrganizationActions from 'app/actions/organizationActions';\nimport ReleaseActions from 'app/actions/releaseActions';\nimport {Deploy, Organization, Release} from 'app/types';\n\ntype StoreRelease = Map<string, Release>;\ntype StoreDeploys = Map<string, Array<Deploy>>;\ntype StoreLoading = Map<string, boolean>;\ntype StoreError = Map<string, Error>;\n\ntype ReleaseStoreInterface = {\n  get(\n    projectSlug: string,\n    releaseVersion: string\n  ): {\n    release: Release | undefined;\n    releaseLoading: boolean | undefined;\n    releaseError: Error | undefined;\n    deploys: Array<Deploy> | undefined;\n    deploysLoading: boolean | undefined;\n    deploysError: Error | undefined;\n  };\n\n  state: {\n    orgSlug: string | undefined;\n    release: StoreRelease;\n    releaseLoading: StoreLoading;\n    releaseError: StoreError;\n    deploys: StoreDeploys;\n    deploysLoading: StoreLoading;\n    deploysError: StoreError;\n  };\n\n  updateOrganization(org: Organization): void;\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error): void;\n};\n\nexport const getReleaseStoreKey = (projectSlug: string, releaseVersion: string) =>\n  `${projectSlug}${releaseVersion}`;\n\nconst ReleaseStoreConfig: Reflux.StoreDefinition & ReleaseStoreInterface = {\n  state: {\n    orgSlug: undefined,\n    release: new Map() as StoreRelease,\n    releaseLoading: new Map() as StoreLoading,\n    releaseError: new Map() as StoreError,\n    deploys: new Map() as StoreDeploys,\n    deploysLoading: new Map() as StoreLoading,\n    deploysError: new Map() as StoreError,\n  },\n\n  listenables: ReleaseActions,\n\n  init() {\n    this.listenTo(OrganizationActions.update, this.updateOrganization);\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      orgSlug: undefined,\n      release: new Map() as StoreRelease,\n      releaseLoading: new Map() as StoreLoading,\n      releaseError: new Map() as StoreError,\n      deploys: new Map() as StoreDeploys,\n      deploysLoading: new Map() as StoreLoading,\n      deploysError: new Map() as StoreError,\n    };\n    this.trigger(this.state);\n  },\n\n  updateOrganization(org: Organization) {\n    this.reset();\n    this.state.orgSlug = org.slug;\n    this.trigger(this.state);\n  },\n\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: true,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {release, releaseLoading, releaseError, ...state} = this.state;\n    this.state = {\n      ...state,\n      release: {\n        ...release,\n        [releaseKey]: data,\n      },\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: true,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploys, deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploys: {\n        ...deploys,\n        [releaseKey]: data,\n      },\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  get(projectSlug: string, releaseVersion: string) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n\n    return {\n      release: this.state.release[releaseKey],\n      releaseLoading: this.state.releaseLoading[releaseKey],\n      releaseError: this.state.releaseError[releaseKey],\n      deploys: this.state.deploys[releaseKey],\n      deploysLoading: this.state.deploysLoading[releaseKey],\n      deploysError: this.state.deploysError[releaseKey],\n    };\n  },\n};\n\ntype ReleaseStore = Reflux.Store & ReleaseStoreInterface;\n\nconst ReleaseStore = Reflux.createStore(ReleaseStoreConfig) as ReleaseStore;\n\nexport default ReleaseStore;\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"sourceRoot":""}