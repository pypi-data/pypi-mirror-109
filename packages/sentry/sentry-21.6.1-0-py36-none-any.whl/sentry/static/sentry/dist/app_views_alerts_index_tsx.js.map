{"version":3,"sources":["webpack:///./app/views/alerts/index.tsx"],"names":["AlertsContainer","this","props","children","organization","features","hasMetricAlerts","hasFeature","Fragment","isValidElement","cloneElement","Component","withOrganization"],"mappings":"qxBAUMA,E,wiBACJ,WAAS,MAC0BC,KAAKC,MAA/BC,EADA,EACAA,SAAUC,EADV,EACUA,aACjB,OACE,QAAC,IAAD,CAASA,aAAcA,EAAcC,SAAU,CAAC,aAAhD,SACG,gBAAcC,EAAd,EAAEC,WAAF,OACC,QAAC,EAAAC,SAAD,UACGL,IAAYM,oBAAeN,IACxBO,kBAAaP,EAAU,CACrBC,eACAE,oBAEFH,W,GAZcQ,aAAxBX,E,8BAoBN,SAAeY,OAAiBZ","file":"app_views_alerts_index_tsx.40b9c721f788c23d0e19.js","sourcesContent":["import {cloneElement, Component, Fragment, isValidElement} from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n};\n\nclass AlertsContainer extends Component<Props> {\n  render() {\n    const {children, organization} = this.props;\n    return (\n      <Feature organization={organization} features={['incidents']}>\n        {({hasFeature: hasMetricAlerts}) => (\n          <Fragment>\n            {children && isValidElement(children)\n              ? cloneElement(children, {\n                  organization,\n                  hasMetricAlerts,\n                })\n              : children}\n          </Fragment>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport default withOrganization(AlertsContainer);\n"],"sourceRoot":""}