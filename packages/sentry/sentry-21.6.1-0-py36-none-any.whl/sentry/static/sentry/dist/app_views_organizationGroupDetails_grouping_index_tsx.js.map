{"version":3,"sources":["webpack:///./app/views/organizationGroupDetails/grouping/newIssue.tsx","webpack:///./app/views/organizationGroupDetails/grouping/grouping.tsx","webpack:///./app/views/organizationGroupDetails/grouping/index.tsx"],"names":["NewIssue","sampleEvent","eventCount","isReloading","title","culprit","StyledCard","interactive","Title","CulPrint","ErrorsCount","ErrorLabel","tn","Card","space","p","theme","fontSizeLarge","fontSizeMedium","gray300","fontSizeSmall","Grouping","api","groupId","location","useState","isLoading","setIsLoading","isGroupingLevelDetailsLoading","setIsGroupingLevelDetailsLoading","undefined","error","setError","groupingLevels","setGroupingLevels","activeGroupingLevel","setActiveGroupingLevel","activeGroupingLevelDetails","setActiveGroupingLevelDetails","pagination","setPagination","useEffect","fetchGroupingLevels","currentGrouping","find","groupingLevel","isCurrent","Number","id","fetchGroupingLevelDetails","query","handleSetActiveGroupingLevel","debounce","groupingLevelId","DEFAULT_DEBOUNCE_DURATION","requestPromise","response","levels","length","method","includeAllArgs","per_page","xhr","pageLinks","getResponseHeader","Array","isArray","status","responseJSON","detail","message","code","Wrapper","size","icon","action","to","search","t","onRetry","withIcon","links","parseLinkHeader","hasMore","previous","results","next","Description","StyledList","symbol","StyledListItem","StyledRangeSlider","name","allowedValues","map","formatLabel","value","onChange","WhatHappensDescription","tct","quantity","NewIssues","hash","latestEvent","withApi","background","ListItem","RangeSlider","List","fontSizeExtraLarge","breakpoints","subText","GroupingContainer","organization","params","project","features","renderDisabled","type","withOrganization"],"mappings":"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","file":"app_views_organizationGroupDetails_grouping_index_tsx.7c3e08b50b93dbeb70e7.js","sourcesContent":["import styled from '@emotion/styled';\n\nimport Card from 'app/components/card';\nimport {tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Event} from 'app/types/event';\n\ntype Props = {\n  sampleEvent: Event;\n  eventCount: number;\n  isReloading: boolean;\n};\n\nfunction NewIssue({sampleEvent, eventCount, isReloading}: Props) {\n  const {title, culprit} = sampleEvent;\n  return (\n    <StyledCard interactive={false} isReloading={isReloading}>\n      <div>\n        <Title>{title}</Title>\n        <CulPrint>{culprit}</CulPrint>\n      </div>\n      <ErrorsCount>\n        {eventCount}\n        <ErrorLabel>{tn('Error', 'Errors', eventCount)}</ErrorLabel>\n      </ErrorsCount>\n    </StyledCard>\n  );\n}\n\nexport default NewIssue;\n\nconst StyledCard = styled(Card)<{isReloading: boolean}>`\n  margin-bottom: -1px;\n  overflow: hidden;\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  align-items: center;\n  padding: ${space(1.5)} ${space(2)};\n  grid-gap: ${space(2)};\n  word-break: break-word;\n  ${p =>\n    p.isReloading &&\n    `\n      opacity: 0.5;\n      pointer-events: none;\n    `}\n`;\n\nconst Title = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: 700;\n`;\n\nconst CulPrint = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ErrorsCount = styled('div')`\n  display: grid;\n  align-items: center;\n  justify-items: center;\n`;\n\nconst ErrorLabel = styled('div')`\n  text-transform: uppercase;\n  font-weight: 500;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n","import {useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport debounce from 'lodash/debounce';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'app/constants';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group, Organization, Project} from 'app/types';\nimport {Event} from 'app/types/event';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';\n\nimport NewIssue from './newIssue';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  groupId: Group['id'];\n  location: Location;\n  api: Client;\n};\n\ntype ErrorCode = 'not_hierarchical' | 'no_events' | 'merged_issues' | 'missing_feature';\n\ntype Error = {\n  status: number;\n  responseJSON?: {\n    detail: {\n      code: ErrorCode;\n      extra: Record<string, any>;\n      message: string;\n    };\n  };\n};\n\ntype GroupingLevelDetails = {\n  eventCount: number;\n  hash: string;\n  latestEvent: Event;\n};\n\ntype GroupingLevel = {\n  id: string;\n  isCurrent: boolean;\n};\n\nfunction Grouping({api, groupId, location}: Props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGroupingLevelDetailsLoading, setIsGroupingLevelDetailsLoading] = useState(\n    false\n  );\n  const [error, setError] = useState<undefined | Error>(undefined);\n  const [groupingLevels, setGroupingLevels] = useState<GroupingLevel[]>([]);\n  const [activeGroupingLevel, setActiveGroupingLevel] = useState<number | undefined>(\n    undefined\n  );\n  const [activeGroupingLevelDetails, setActiveGroupingLevelDetails] = useState<\n    GroupingLevelDetails[]\n  >([]);\n\n  const [pagination, setPagination] = useState('');\n\n  useEffect(() => {\n    fetchGroupingLevels();\n  }, []);\n\n  useEffect(() => {\n    setCurrentGrouping();\n  }, [groupingLevels]);\n\n  useEffect(() => {\n    fetchGroupingLevelDetails();\n  }, [activeGroupingLevel, location.query]);\n\n  const handleSetActiveGroupingLevel = debounce((groupingLevelId: string) => {\n    setActiveGroupingLevel(Number(groupingLevelId));\n  }, DEFAULT_DEBOUNCE_DURATION);\n\n  async function fetchGroupingLevels() {\n    setIsLoading(true);\n    setError(undefined);\n\n    try {\n      const response = await api.requestPromise(`/issues/${groupId}/grouping/levels/`);\n      setIsLoading(false);\n      setGroupingLevels(response.levels);\n    } catch (err) {\n      setIsLoading(false);\n      setError(err);\n    }\n  }\n\n  async function fetchGroupingLevelDetails() {\n    if (!groupingLevels.length) {\n      return;\n    }\n\n    setIsGroupingLevelDetailsLoading(true);\n    setError(undefined);\n\n    try {\n      const [response, , xhr] = await api.requestPromise(\n        `/issues/${groupId}/grouping/levels/${activeGroupingLevel}/new-issues/`,\n        {\n          method: 'GET',\n          includeAllArgs: true,\n          query: {\n            ...location.query,\n            per_page: 10,\n          },\n        }\n      );\n\n      const pageLinks = xhr && xhr.getResponseHeader?.('Link');\n      setPagination(pageLinks ?? '');\n      setActiveGroupingLevelDetails(Array.isArray(response) ? response : [response]);\n      setIsGroupingLevelDetailsLoading(false);\n    } catch (err) {\n      setIsGroupingLevelDetailsLoading(false);\n      setError(err);\n    }\n  }\n\n  function setCurrentGrouping() {\n    const currentGrouping = groupingLevels.find(groupingLevel => groupingLevel.isCurrent);\n    if (!currentGrouping) {\n      return;\n    }\n    setActiveGroupingLevel(Number(currentGrouping.id));\n  }\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    if (error.status === 403 && error.responseJSON?.detail) {\n      const {message, code} = error.responseJSON.detail;\n      return (\n        <Wrapper>\n          <EmptyMessage\n            size=\"large\"\n            icon={<IconFlag size=\"xl\" />}\n            action={\n              code === 'merged_issues' ? (\n                <Button\n                  to={`/organizations/sentry/issues/${groupId}/merged/?${location.search}`}\n                >\n                  {t('Unmerge issue')}\n                </Button>\n              ) : undefined\n            }\n          >\n            {message}\n          </EmptyMessage>\n        </Wrapper>\n      );\n    }\n\n    return (\n      <LoadingError\n        message={t('Unable to load grouping levels, please try again later')}\n        onRetry={fetchGroupingLevels}\n      />\n    );\n  }\n\n  if (!groupingLevels.length) {\n    return (\n      <EmptyStateWarning withIcon={false}>\n        {t('No grouping levels have been found.')}\n      </EmptyStateWarning>\n    );\n  }\n\n  const links = parseLinkHeader(pagination);\n  const hasMore = links.previous?.results || links.next?.results;\n\n  return (\n    <Wrapper>\n      <Description>\n        {t(\n          'Sometimes you might want to split up issues by additional frames or other criteria. Select a granularity level below and see how many new issues will be created in the process.'\n        )}\n      </Description>\n      <div>\n        <StyledList symbol=\"colored-numeric\">\n          <StyledListItem>\n            {t('Select level')}\n            <StyledRangeSlider\n              name=\"grouping-level\"\n              allowedValues={groupingLevels.map(groupingLevel =>\n                Number(groupingLevel.id)\n              )}\n              formatLabel={value => {\n                return value === 0 ? t('Automatically grouped') : t('Level %s', value);\n              }}\n              value={activeGroupingLevel ?? 0}\n              onChange={handleSetActiveGroupingLevel}\n            />\n          </StyledListItem>\n          <StyledListItem>\n            <div>\n              {t('What happens to this issue')}\n              <WhatHappensDescription>\n                {tct(\n                  `This issue will be deleted and [quantity] new issues will be created.`,\n                  {\n                    quantity: hasMore\n                      ? `${activeGroupingLevelDetails.length}+`\n                      : activeGroupingLevelDetails.length,\n                  }\n                )}\n              </WhatHappensDescription>\n            </div>\n            <NewIssues>\n              {activeGroupingLevelDetails.map(({hash, latestEvent, eventCount}) => (\n                <NewIssue\n                  key={hash}\n                  sampleEvent={latestEvent}\n                  eventCount={eventCount}\n                  isReloading={isGroupingLevelDetailsLoading}\n                />\n              ))}\n            </NewIssues>\n          </StyledListItem>\n        </StyledList>\n        <Pagination pageLinks={pagination} />\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default withApi(Grouping);\n\nconst Wrapper = styled('div')`\n  flex: 1;\n  display: grid;\n  align-content: flex-start;\n  background: ${p => p.theme.background};\n  grid-gap: ${space(2)};\n  margin: -${space(3)} -${space(4)};\n  padding: ${space(3)} ${space(4)};\n`;\n\nconst Description = styled('p')`\n  margin-bottom: ${space(0.5)};\n`;\n\nconst StyledListItem = styled(ListItem)`\n  display: grid;\n  grid-gap: ${space(1.5)};\n`;\n\nconst StyledRangeSlider = styled(RangeSlider)`\n  max-width: 300px;\n`;\n\nconst StyledList = styled(List)`\n  display: grid;\n  grid-gap: ${space(2)};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst NewIssues = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(100px, 1fr);\n  grid-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(2, minmax(100px, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(3, minmax(100px, 1fr));\n  }\n`;\n\nconst WhatHappensDescription = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n","import {RouteComponentProps} from 'react-router';\n\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Group, Organization, Project} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport Grouping from './grouping';\n\ntype RouteParams = {groupId: Group['id']; orgId: Organization['slug']};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\nfunction GroupingContainer({organization, params, location, project}: Props) {\n  return (\n    <Feature\n      features={['grouping-tree-ui']}\n      organization={organization}\n      renderDisabled={() => (\n        <PageContent>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </PageContent>\n      )}\n    >\n      <Grouping\n        location={location}\n        groupId={params.groupId}\n        organization={organization}\n        project={project}\n      />\n    </Feature>\n  );\n}\n\nexport default withOrganization(GroupingContainer);\n"],"sourceRoot":""}