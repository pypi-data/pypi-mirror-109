{"version":3,"sources":["webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx","webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx","webpack:///./app/views/settings/components/forms/controls/textarea.tsx","webpack:///./app/views/settings/components/forms/textareaField.tsx"],"names":["RequestIntegrationModal","getDefaultState","isSending","message","props","organization","slug","type","state","trackIntegrationEvent","integration_type","integration","endpoint","api","request","method","data","providerSlug","providerType","success","handleSubmitSuccess","error","handleSubmitError","closeModal","onSuccess","addSuccessMessage","t","setState","addErrorMessage","this","Header","Body","Footer","name","buttonText","Fragment","inline","flexibleControlStateSize","stacked","onChange","value","placeholder","onClick","sendRequest","AsyncComponent","RequestIntegrationButton","isOpen","isSent","openModal","renderProps","onClose","StyledRequestIntegrationButton","data-test-id","disabled","openRequestModal","priority","size","Component","Button","space","AbstractIntegrationDetailedView","integration_tab","tab","eventKey","options","params","view","integrationSlug","integrationType","already_installed","installationStatus","location","query","Error","title","_disabledFromFeatures","_userHasAccess","description","action","renderAddInstallButton","features","featureData","map","f","featureGate","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","getCategories","integrationName","hideButtonIfDisabled","getIntegrationFeatureGate","IntegrationDirectoryFeatures","featureProps","disabledReason","DisableWrapper","access","hasAccess","renderTopButton","DisabledNotice","reason","tags","cleanTags","Flex","pluginId","NameContainer","Name","StatusWrapper","status","feature","StyledTag","startCase","className","style","paddingTop","tabs","tabName","onTabChange","CapitalizedLink","getTabDisplay","IntegrationDirectoryFeatureList","FlexContainer","Description","marked","provider","key","renderPermissions","alerts","alert","i","icon","text","Metadata","author","AuthorInfo","CreatedContainer","resourceLinks","url","ExternalLinkContainer","getIcon","href","renderTopSection","renderTabs","renderInformationCard","renderConfigurations","Tag","IconCloseCircle","IconClose","p","theme","red300","display","alignItems","isCircled","gray300","TextAreaControl","React","ref","autosize","rows","maxRows","async","displayName","shouldForwardProp","includes","isPropValid","inputStyles","TextareaField","monospace","field","fieldProps","omit"],"mappings":"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","file":"app_views_organizationIntegrations_abstractIntegrationDetailedView_tsx.b41ce58ffbbbeafad86d.js","sourcesContent":["import {Fragment} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport TextareaField from 'app/views/settings/components/forms/textareaField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport RequestIntegrationButton from './RequestIntegrationButton';\n\ntype Props = {\n  onSuccess: () => void;\n} & RequestIntegrationButton['props'] &\n  ModalRenderProps &\n  AsyncComponent['props'];\ntype State = {\n  isSending: boolean;\n  message: string;\n} & AsyncComponent['state'];\n\n/**\n * This modal serves as a non-owner's confirmation step before sending\n * organization owners an email requesting a new organization integration. It\n * lets the user attach an optional message to be included in the email.\n */\nexport default class RequestIntegrationModal extends AsyncComponent<Props, State> {\n  state: State = {\n    ...this.getDefaultState(),\n    isSending: false,\n    message: '',\n  };\n\n  sendRequest = () => {\n    const {organization, slug, type} = this.props;\n    const {message} = this.state;\n\n    trackIntegrationEvent(\n      'integrations.request_install',\n      {\n        integration_type: type,\n        integration: slug,\n      },\n      organization\n    );\n\n    const endpoint = `/organizations/${organization.slug}/integration-requests/`;\n    this.api.request(endpoint, {\n      method: 'POST',\n      data: {\n        providerSlug: slug,\n        providerType: type,\n        message,\n      },\n      success: this.handleSubmitSuccess,\n      error: this.handleSubmitError,\n    });\n  };\n\n  handleSubmitSuccess = () => {\n    const {closeModal, onSuccess} = this.props;\n\n    addSuccessMessage(t('Request successfully sent.'));\n    this.setState({isSending: false});\n    onSuccess();\n    closeModal();\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Error sending the request');\n    this.setState({isSending: false});\n  };\n\n  render() {\n    const {Header, Body, Footer, name} = this.props;\n\n    const buttonText = this.state.isSending ? t('Sending Request') : t('Send Request');\n\n    return (\n      <Fragment>\n        <Header>\n          <h4>{t('Request %s Installation', name)}</h4>\n        </Header>\n        <Body>\n          <TextBlock>\n            {t(\n              'Looks like your organization owner, manager, or admin needs to install %s. Want to send them a request?',\n              name\n            )}\n          </TextBlock>\n          <TextBlock>\n            {t(\n              '(Optional) You’ve got good reasons for installing the %s Integration. Share them with your organization owner.',\n              name\n            )}\n          </TextBlock>\n          <TextareaField\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            name=\"message\"\n            type=\"string\"\n            onChange={value => this.setState({message: value})}\n            placeholder={t('Optional message…')}\n          />\n          <TextBlock>\n            {t(\n              'When you click “Send Request”, we’ll email your request to your organization’s owners. So just keep that in mind.'\n            )}\n          </TextBlock>\n        </Body>\n        <Footer>\n          <Button onClick={this.sendRequest}>{buttonText}</Button>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {IntegrationType, Organization} from 'app/types';\n\nimport RequestIntegrationModal from './RequestIntegrationModal';\n\ntype Props = {\n  organization: Organization;\n  name: string;\n  slug: string;\n  type: IntegrationType;\n};\ntype State = {\n  isOpen: boolean;\n  isSent: boolean;\n};\n\nexport default class RequestIntegrationButton extends Component<Props, State> {\n  state: State = {\n    isOpen: false,\n    isSent: false,\n  };\n\n  openRequestModal() {\n    this.setState({isOpen: true});\n    openModal(\n      renderProps => (\n        <RequestIntegrationModal\n          {...this.props}\n          {...renderProps}\n          onSuccess={() => this.setState({isSent: true})}\n        />\n      ),\n      {\n        onClose: () => this.setState({isOpen: false}),\n      }\n    );\n  }\n\n  render() {\n    const {isOpen, isSent} = this.state;\n\n    let buttonText;\n    if (isOpen) {\n      buttonText = t('Requesting Installation');\n    } else if (isSent) {\n      buttonText = t('Installation Requested');\n    } else {\n      buttonText = t('Request Installation');\n    }\n\n    return (\n      <StyledRequestIntegrationButton\n        data-test-id=\"request-integration-button\"\n        disabled={isOpen || isSent}\n        onClick={() => this.openRequestModal()}\n        priority=\"primary\"\n        size=\"small\"\n      >\n        {buttonText}\n      </StyledRequestIntegrationButton>\n    );\n  }\n}\n\nconst StyledRequestIntegrationButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport Tooltip from 'app/components/tooltip';\nimport {IconClose, IconDocs, IconGeneric, IconGithub, IconProject} from 'app/icons';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {\n  IntegrationFeature,\n  IntegrationInstallationStatus,\n  IntegrationType,\n  Organization,\n} from 'app/types';\nimport {\n  IntegrationAnalyticsKey,\n  IntegrationEventParameters,\n} from 'app/utils/integrationEvents';\nimport {\n  getCategories,\n  getIntegrationFeatureGate,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport marked, {singleLineRenderer} from 'app/utils/marked';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport RequestIntegrationButton from './integrationRequest/RequestIntegrationButton';\nimport IntegrationStatus from './integrationStatus';\n\ntype Tab = 'overview' | 'configurations';\n\ntype AlertType = React.ComponentProps<typeof Alert> & {\n  text: string;\n};\n\ntype State = {\n  tab: Tab;\n} & AsyncComponent['state'];\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; integrationSlug: string}, {}> &\n  AsyncComponent['props'];\n\nclass AbstractIntegrationDetailedView<\n  P extends Props = Props,\n  S extends State = State\n> extends AsyncComponent<P, S> {\n  tabs: Tab[] = ['overview', 'configurations'];\n\n  componentDidMount() {\n    const {location} = this.props;\n    const value = location.query.tab === 'configurations' ? 'configurations' : 'overview';\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({tab: value});\n  }\n\n  onLoadAllEndpointsSuccess() {\n    this.trackIntegrationEvent('integrations.integration_viewed', {\n      integration_tab: this.state.tab,\n    });\n  }\n\n  /***\n   * Abstract methods defined below\n   */\n\n  //The analytics type used in analytics which is snake case\n  get integrationType(): IntegrationType {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get description(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get author(): string | undefined {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get alerts(): AlertType[] {\n    //default is no alerts\n    return [];\n  }\n\n  //Returns a list of the resources displayed at the bottom of the overview card\n  get resourceLinks(): Array<{title: string; url: string}> {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get installationStatus(): IntegrationInstallationStatus | null {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get integrationName(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  // Returns an array of RawIntegrationFeatures which is used in feature gating\n  // and displaying what the integration does\n  get featureData(): IntegrationFeature[] {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  getIcon(title: string) {\n    switch (title) {\n      case 'View Source':\n        return <IconProject />;\n      case 'Report Issue':\n        return <IconGithub />;\n      case 'Documentation':\n      case 'Splunk Setup Instructions':\n      case 'Trello Setup Instructions':\n        return <IconDocs />;\n      default:\n        return <IconGeneric />;\n    }\n  }\n\n  onTabChange = (value: Tab) => {\n    this.trackIntegrationEvent('integrations.integration_tab_clicked', {\n      integration_tab: value,\n    });\n    this.setState({tab: value});\n  };\n\n  //Returns the string that is shown as the title of a tab\n  getTabDisplay(tab: Tab): string {\n    //default is return the tab\n    return tab;\n  }\n\n  //Render the button at the top which is usually just an installation button\n  renderTopButton(\n    _disabledFromFeatures: boolean, //from the feature gate\n    _userHasAccess: boolean //from user permissions\n  ): React.ReactElement {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  //Returns the permission descriptions, only use by Sentry Apps\n  renderPermissions(): React.ReactElement | null {\n    //default is don't render permissions\n    return null;\n  }\n\n  renderEmptyConfigurations() {\n    return (\n      <Panel>\n        <EmptyMessage\n          title={t(\"You haven't set anything up yet\")}\n          description={t(\n            'But that doesn’t have to be the case for long! Add an installation to get started.'\n          )}\n          action={this.renderAddInstallButton(true)}\n        />\n      </Panel>\n    );\n  }\n\n  //Returns the list of configurations for the integration\n  renderConfigurations() {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  /***\n   * Actually implemented methods below\n   */\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  //Wrapper around trackIntegrationEvent that automatically provides many fields and the org\n  trackIntegrationEvent = <T extends IntegrationAnalyticsKey>(\n    eventKey: IntegrationAnalyticsKey,\n    options?: Partial<IntegrationEventParameters[T]>\n  ) => {\n    options = options || {};\n    //If we use this intermediate type we get type checking on the things we care about\n    const params = {\n      view: 'integrations_directory_integration_detail',\n      integration: this.integrationSlug,\n      integration_type: this.integrationType,\n      already_installed: this.installationStatus !== 'Not Installed', //pending counts as installed here\n      ...options,\n    };\n    trackIntegrationEvent(eventKey, params, this.props.organization);\n  };\n\n  //Returns the props as needed by the hooks integrations:feature-gates\n  get featureProps() {\n    const {organization} = this.props;\n    const featureData = this.featureData;\n\n    // Prepare the features list\n    const features = featureData.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    return {organization, features};\n  }\n\n  cleanTags() {\n    return getCategories(this.featureData);\n  }\n\n  renderRequestIntegrationButton() {\n    return (\n      <RequestIntegrationButton\n        organization={this.props.organization}\n        name={this.integrationName}\n        slug={this.integrationSlug}\n        type={this.integrationType}\n      />\n    );\n  }\n\n  renderAddInstallButton(hideButtonIfDisabled = false) {\n    const {organization} = this.props;\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    return (\n      <IntegrationDirectoryFeatures {...this.featureProps}>\n        {({disabled, disabledReason}) => (\n          <DisableWrapper>\n            <Access organization={organization} access={['org:integrations']}>\n              {({hasAccess}) => (\n                <Tooltip\n                  title={t(\n                    'You must be an organization owner, manager or admin to install this.'\n                  )}\n                  disabled={hasAccess}\n                >\n                  {!hideButtonIfDisabled && disabled ? (\n                    <div />\n                  ) : (\n                    this.renderTopButton(disabled, hasAccess)\n                  )}\n                </Tooltip>\n              )}\n            </Access>\n            {disabled && <DisabledNotice reason={disabledReason} />}\n          </DisableWrapper>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  //Returns the content shown in the top section of the integration detail\n  renderTopSection() {\n    const tags = this.cleanTags();\n\n    return (\n      <Flex>\n        <PluginIcon pluginId={this.integrationSlug} size={50} />\n        <NameContainer>\n          <Flex>\n            <Name>{this.integrationName}</Name>\n            <StatusWrapper>\n              {this.installationStatus && (\n                <IntegrationStatus status={this.installationStatus} />\n              )}\n            </StatusWrapper>\n          </Flex>\n          <Flex>\n            {tags.map(feature => (\n              <StyledTag key={feature}>{startCase(feature)}</StyledTag>\n            ))}\n          </Flex>\n        </NameContainer>\n        {this.renderAddInstallButton()}\n      </Flex>\n    );\n  }\n\n  //Returns the tabs divider with the clickable tabs\n  renderTabs() {\n    //TODO: Convert to styled component\n    return (\n      <ul className=\"nav nav-tabs border-bottom\" style={{paddingTop: '30px'}}>\n        {this.tabs.map(tabName => (\n          <li\n            key={tabName}\n            className={this.state.tab === tabName ? 'active' : ''}\n            onClick={() => this.onTabChange(tabName)}\n          >\n            <CapitalizedLink>{t(this.getTabDisplay(tabName))}</CapitalizedLink>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  //Returns the information about the integration description and features\n  renderInformationCard() {\n    const {IntegrationDirectoryFeatureList} = getIntegrationFeatureGate();\n\n    return (\n      <React.Fragment>\n        <Flex>\n          <FlexContainer>\n            <Description dangerouslySetInnerHTML={{__html: marked(this.description)}} />\n            <IntegrationDirectoryFeatureList\n              {...this.featureProps}\n              provider={{key: this.props.params.integrationSlug}}\n            />\n            {this.renderPermissions()}\n            {this.alerts.map((alert, i) => (\n              <Alert key={i} type={alert.type} icon={alert.icon}>\n                <span\n                  dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}}\n                />\n              </Alert>\n            ))}\n          </FlexContainer>\n          <Metadata>\n            {!!this.author && (\n              <AuthorInfo>\n                <CreatedContainer>{t('Created By')}</CreatedContainer>\n                <div>{this.author}</div>\n              </AuthorInfo>\n            )}\n            {this.resourceLinks.map(({title, url}) => (\n              <ExternalLinkContainer key={url}>\n                {this.getIcon(title)}\n                <ExternalLink href={url}>{t(title)}</ExternalLink>\n              </ExternalLinkContainer>\n            ))}\n          </Metadata>\n        </Flex>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        {this.renderTopSection()}\n        {this.renderTabs()}\n        {this.state.tab === 'overview'\n          ? this.renderInformationCard()\n          : this.renderConfigurations()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n`;\n\nconst FlexContainer = styled('div')`\n  flex: 1;\n`;\n\nconst CapitalizedLink = styled('a')`\n  text-transform: capitalize;\n`;\n\nconst StyledTag = styled(Tag)`\n  text-transform: none;\n  &:not(:first-child) {\n    margin-left: ${space(0.5)};\n  }\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: ${space(2)};\n`;\n\nconst Name = styled('div')`\n  font-weight: bold;\n  font-size: 1.4em;\n  margin-bottom: ${space(1)};\n`;\n\nconst IconCloseCircle = styled(IconClose)`\n  color: ${p => p.theme.red300};\n  margin-right: ${space(1)};\n`;\n\nconst DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (\n  <div\n    style={{\n      display: 'flex',\n      alignItems: 'center',\n    }}\n    {...p}\n  >\n    <IconCloseCircle isCircled />\n    <span>{reason}</span>\n  </div>\n))`\n  padding-top: ${space(0.5)};\n  font-size: 0.9em;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst Description = styled('div')`\n  font-size: 1.5rem;\n  line-height: 2.1rem;\n  margin-bottom: ${space(2)};\n\n  li {\n    margin-bottom: 6px;\n  }\n`;\n\nconst Metadata = styled(Flex)`\n  display: grid;\n  grid-auto-rows: max-content;\n  grid-auto-flow: row;\n  grid-gap: ${space(2)};\n  font-size: 0.9em;\n  margin-left: ${space(4)};\n  margin-right: 100px;\n`;\n\nconst AuthorInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst ExternalLinkContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StatusWrapper = styled('div')`\n  margin-bottom: ${space(1)};\n  padding-left: ${space(2)};\n  line-height: 1.5em;\n`;\n\nconst DisableWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst CreatedContainer = styled('div')`\n  text-transform: uppercase;\n  padding-bottom: ${space(1)};\n  color: ${p => p.theme.gray300};\n  font-weight: 600;\n  font-size: 12px;\n`;\n\nexport default AbstractIntegrationDetailedView;\n","import * as React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\n\ntype InputProps = Omit<Parameters<typeof inputStyles>[0], 'theme'>;\ntype Props = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'css'> &\n  InputProps & {\n    /**\n     * Enable autosizing of the textarea.\n     */\n    autosize?: boolean;\n    /**\n     * Number of rows to default to.\n     */\n    rows?: number;\n    /**\n     * Max number of rows to default to.\n     */\n    maxRows?: number;\n  };\n\nconst TextAreaControl = React.forwardRef(function TextAreaControl(\n  {autosize, rows, maxRows, ...p}: Props,\n  ref: React.Ref<HTMLTextAreaElement>\n) {\n  return autosize ? (\n    <TextareaAutosize {...p} async ref={ref} rows={rows ? rows : 2} maxRows={maxRows} />\n  ) : (\n    <textarea ref={ref} {...p} />\n  );\n});\n\nTextAreaControl.displayName = 'TextAreaControl';\n\nconst propFilter = (p: string) =>\n  ['autosize', 'rows', 'maxRows'].includes(p) || isPropValid(p);\n\nconst TextArea = styled(TextAreaControl, {shouldForwardProp: propFilter})`\n  ${inputStyles};\n  min-height: 40px;\n  padding: calc(${space(1)} - 1px) ${space(1)};\n  line-height: 1.5em;\n  ${p =>\n    p.autosize &&\n    `\n      height: auto;\n      padding: calc(${space(1)} - 2px) ${space(1)};\n      line-height: 1.6em;\n    `}\n`;\n\nexport default TextArea;\n","import * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport Textarea from 'app/views/settings/components/forms/controls/textarea';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = Omit<InputField['props'], 'field'> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    'monospace' | 'autosize' | 'rows' | 'maxRows'\n  >;\n\nexport default function TextareaField({monospace, rows, autosize, ...props}: Props) {\n  return (\n    <InputField\n      {...props}\n      field={fieldProps => (\n        <Textarea\n          {...{monospace, rows, autosize}}\n          {...omit(fieldProps, ['onKeyDown', 'children'])}\n        />\n      )}\n    />\n  );\n}\n"],"sourceRoot":""}