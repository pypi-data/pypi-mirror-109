{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/projectInstall/platform.tsx","webpack:///./app/views/projectInstall/components/platformHeaderButtonBar.tsx","webpack:///./app/views/projectInstall/platformIntegrationSetup.tsx","webpack:///./app/views/projectInstall/platformOrIntegration.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","ProjectInstallPlatform","loading","error","html","props","api","params","orgId","projectId","platform","setState","loadDocs","this","fetchData","window","scrollTo","redirectToNeutralDocs","location","href","indexOf","url","browserHistory","platforms","p","id","issueStreamLink","performanceOverviewLink","gettingStartedLink","platformLink","link","undefined","Fragment","StyledPageHeader","t","name","gap","size","to","external","type","icon","tct","docLink","state","onRetry","DocumentationWrapper","dangerouslySetInnerHTML","__html","isGettingStarted","slugs","passthroughPlaceholderProject","projects","initiallyLoaded","fetching","fetchError","projectsLoading","projectFilter","length","project","showPerformancePrompt","performancePlatforms","features","hookName","hasFeature","StyledAlert","StyledButtonBar","priority","busy","pathname","query","hash","Component","space","theme","borderRadius","ButtonBar","breakpoints","PageHeader","Alert","withApi","withOrganization","PlatformHeaderButtonBar","docsLink","PlatformIntegrationSetup","installed","organization","integrationSlug","trackIntegrationEvent","integration_type","integration","view","integrations","providers","slug","provider","platformIntegration","OuterWrapper","StyledTitle","InnerWrapper","onAddIntegration","handleAddIntegration","analyticsParams","already_installed","modalParams","manual","onClick","trackSwitchToManual","AsyncComponent","PlatformOrIntegration","parsed","qs","search","platfromToIntegrationMap"],"mappings":"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","file":"app_views_projectInstall_platformOrIntegration_tsx.d09b628be17d977fe8ae.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import 'prism-sentry/index.css';\n\nimport {Component, Fragment} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {loadDocs} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {\n  performance as performancePlatforms,\n  PlatformKey,\n} from 'app/data/platformCategories';\nimport platforms from 'app/data/platforms';\nimport {IconInfo} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport Projects from 'app/utils/projects';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & WithRouterProps<{orgId: string; projectId: string; platform: string}, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  html: string;\n};\n\nclass ProjectInstallPlatform extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    html: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n    const {orgId, projectId, platform} = params;\n\n    this.setState({loading: true});\n\n    try {\n      const {html} = await loadDocs(api, orgId, projectId, platform as PlatformKey);\n      this.setState({html});\n    } catch (error) {\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  };\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  render() {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n\n    const platform = platforms.find(p => p.id === params.platform);\n\n    if (!platform) {\n      return <NotFound />;\n    }\n\n    const issueStreamLink = `/organizations/${orgId}/issues/`;\n    const performanceOverviewLink = `/organizations/${orgId}/performance/`;\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n    const platformLink = platform.link ?? undefined;\n\n    return (\n      <Fragment>\n        <StyledPageHeader>\n          <h2>{t('Configure %(platform)s', {platform: platform.name})}</h2>\n          <ButtonBar gap={1}>\n            <Button size=\"small\" to={gettingStartedLink}>\n              {t('< Back')}\n            </Button>\n            <Button size=\"small\" href={platformLink} external>\n              {t('Full Documentation')}\n            </Button>\n          </ButtonBar>\n        </StyledPageHeader>\n\n        <div>\n          <Alert type=\"info\" icon={<IconInfo />}>\n            {tct(\n              `\n             This is a quick getting started guide. For in-depth instructions\n             on integrating Sentry with [platform], view\n             [docLink:our complete documentation].`,\n              {\n                platform: platform.name,\n                docLink: <a href={platformLink} />,\n              }\n            )}\n          </Alert>\n\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : this.state.error ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <Fragment>\n              <SentryDocumentTitle\n                title={`${t('Configure')} ${platform.name}`}\n                projectSlug={projectId}\n              />\n              <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />\n            </Fragment>\n          )}\n\n          {this.isGettingStarted && (\n            <Projects\n              key={`${orgId}-${projectId}`}\n              orgId={orgId}\n              slugs={[projectId]}\n              passthroughPlaceholderProject={false}\n            >\n              {({projects, initiallyLoaded, fetching, fetchError}) => {\n                const projectsLoading = !initiallyLoaded && fetching;\n                const projectFilter =\n                  !projectsLoading && !fetchError && projects.length\n                    ? {\n                        project: (projects[0] as Project).id,\n                      }\n                    : {};\n                const showPerformancePrompt = performancePlatforms.includes(\n                  platform.id as PlatformKey\n                );\n\n                return (\n                  <Fragment>\n                    {showPerformancePrompt && (\n                      <Feature\n                        features={['performance-view']}\n                        hookName=\"feature-disabled:performance-new-project\"\n                      >\n                        {({hasFeature}) => {\n                          if (hasFeature) {\n                            return null;\n                          }\n                          return (\n                            <StyledAlert type=\"info\" icon={<IconInfo />}>\n                              {t(\n                                `Your selected platform supports performance, but your organization does not have performance enabled.`\n                              )}\n                            </StyledAlert>\n                          );\n                        }}\n                      </Feature>\n                    )}\n\n                    <StyledButtonBar gap={1}>\n                      <Button\n                        priority=\"primary\"\n                        busy={projectsLoading}\n                        to={{\n                          pathname: issueStreamLink,\n                          query: projectFilter,\n                          hash: '#welcome',\n                        }}\n                      >\n                        {t('Take me to Issues')}\n                      </Button>\n                      <Button\n                        busy={projectsLoading}\n                        to={{\n                          pathname: performanceOverviewLink,\n                          query: projectFilter,\n                        }}\n                      >\n                        {t('Take me to Performance')}\n                      </Button>\n                    </StyledButtonBar>\n                  </Fragment>\n                );\n              }}\n            </Projects>\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst DocumentationWrapper = styled('div')`\n  .gatsby-highlight {\n    margin-bottom: ${space(3)};\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  .alert {\n    margin-bottom: ${space(3)};\n    border-radius: ${p => p.theme.borderRadius};\n  }\n\n  p {\n    line-height: 1.5;\n  }\n  pre {\n    word-break: break-all;\n    white-space: pre-wrap;\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n\n  h2 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h2 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-top: ${space(2)};\n`;\n\nexport {ProjectInstallPlatform};\nexport default withApi(withOrganization(ProjectInstallPlatform));\n","import Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {t} from 'app/locale';\n\ntype Props = {\n  gettingStartedLink: string;\n  docsLink: string;\n};\nexport default function PlatformHeaderButtonBar({gettingStartedLink, docsLink}: Props) {\n  return (\n    <ButtonBar gap={1}>\n      <Button size=\"small\" to={gettingStartedLink}>\n        {t('< Back')}\n      </Button>\n      <Button size=\"small\" href={docsLink} external>\n        {t('Full Documentation')}\n      </Button>\n    </ButtonBar>\n  );\n}\n","import 'prism-sentry/index.css';\n\nimport {Fragment} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport platforms from 'app/data/platforms';\nimport {t} from 'app/locale';\nimport {PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {IntegrationProvider, Organization, Project} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport withOrganization from 'app/utils/withOrganization';\nimport FirstEventFooter from 'app/views/onboarding/components/firstEventFooter';\nimport AddInstallationInstructions from 'app/views/onboarding/components/integrations/addInstallationInstructions';\nimport PostInstallCodeSnippet from 'app/views/onboarding/components/integrations/postInstallCodeSnippet';\nimport AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';\n\nimport PlatformHeaderButtonBar from './components/platformHeaderButtonBar';\n\ntype Props = {\n  organization: Organization;\n  integrationSlug: string;\n} & WithRouterProps<{orgId: string; projectId: string; platform: string}, {}> &\n  AsyncComponent['props'];\n\ntype State = {\n  installed: boolean;\n  integrations: {providers: IntegrationProvider[]};\n  project: Project | null;\n} & AsyncComponent['state'];\n\nclass PlatformIntegrationSetup extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      installed: false,\n      integrations: {providers: []},\n      project: null,\n    };\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get provider() {\n    const {providers} = this.state.integrations;\n    return providers.length ? providers[0] : null;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, integrationSlug, params} = this.props;\n\n    if (!integrationSlug) {\n      return [];\n    }\n\n    return [\n      [\n        'integrations',\n        `/organizations/${organization.slug}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      ['project', `/projects/${organization.slug}/${params.projectId}/`],\n    ];\n  }\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  handleAddIntegration = () => {\n    this.setState({installed: true});\n  };\n\n  trackSwitchToManual = () => {\n    const {organization, integrationSlug} = this.props;\n    trackIntegrationEvent(\n      'integrations.switch_manual_sdk_setup',\n      {\n        integration_type: 'first_party',\n        integration: integrationSlug,\n        view: 'project_creation',\n      },\n      organization\n    );\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {installed, project} = this.state;\n    const {projectId, orgId, platform} = params;\n    const provider = this.provider;\n\n    const platformIntegration = platforms.find(p => p.id === platform);\n    if (!provider || !platformIntegration || !project) {\n      return null;\n    }\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    //TODO: make dynamic when adding more integrations\n    const docsLink = 'https://docs.sentry.io/product/integrations/aws-lambda/';\n\n    return (\n      <OuterWrapper>\n        <StyledPageHeader>\n          <StyledTitle>\n            {t('Automatically instrument %s', platformIntegration.name)}\n          </StyledTitle>\n          <PlatformHeaderButtonBar\n            gettingStartedLink={gettingStartedLink}\n            docsLink={docsLink}\n          />\n        </StyledPageHeader>\n        <InnerWrapper>\n          {!installed ? (\n            <Fragment>\n              <AddInstallationInstructions />\n              <StyledButtonBar gap={1}>\n                <AddIntegrationButton\n                  provider={provider}\n                  onAddIntegration={this.handleAddIntegration}\n                  organization={organization}\n                  priority=\"primary\"\n                  size=\"small\"\n                  analyticsParams={{view: 'project_creation', already_installed: false}}\n                  modalParams={{projectId: project.id}}\n                />\n                <Button\n                  size=\"small\"\n                  to={{\n                    pathname: window.location.pathname,\n                    query: {manual: '1'},\n                  }}\n                  onClick={this.trackSwitchToManual}\n                >\n                  {t('Manual Setup')}\n                </Button>\n              </StyledButtonBar>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <PostInstallCodeSnippet provider={provider} />\n              <FirstEventFooter\n                project={project}\n                organization={organization}\n                docsLink={docsLink}\n              />\n            </Fragment>\n          )}\n        </InnerWrapper>\n      </OuterWrapper>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst InnerWrapper = styled('div')`\n  width: 850px;\n`;\n\nconst OuterWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTitle = styled('h2')`\n  margin: 0 ${space(3)} 0 0;\n`;\n\nexport default withOrganization(PlatformIntegrationSetup);\n","import * as React from 'react';\nimport * as qs from 'query-string';\n\nimport {platfromToIntegrationMap} from 'app/utils/integrationUtil';\n\nimport Platform from './platform';\nimport PlatformIntegrationSetup from './platformIntegrationSetup';\n\ntype Props = React.ComponentProps<typeof Platform> &\n  Omit<React.ComponentProps<typeof PlatformIntegrationSetup>, 'integrationSlug'>;\n\nconst PlatformOrIntegration = (props: Props) => {\n  const parsed = qs.parse(window.location.search);\n  const {platform} = props.params;\n  const integrationSlug = platform && platfromToIntegrationMap[platform];\n  // check for manual override query param\n  if (integrationSlug && parsed.manual !== '1') {\n    return <PlatformIntegrationSetup integrationSlug={integrationSlug} {...props} />;\n  }\n  return <Platform {...props} />;\n};\n\nexport default PlatformOrIntegration;\n"],"sourceRoot":""}