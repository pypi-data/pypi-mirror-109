{"version":3,"sources":["webpack:///./app/views/settings/components/forms/controls/rangeSlider.tsx"],"names":["RangeSlider","sliderValue","props","allowedValues","indexOf","Number","value","setState","e","onChange","getActualValue","parseInt","target","setValue","changeValue","onBlur","isNaN","handleInput","nextProps","this","min","max","step","name","disabled","formatLabel","placeholder","showCustomInput","className","state","actualValue","displayValue","length","t","Label","htmlFor","SliderAndInputWrapper","Slider","type","onInput","onMouseUp","handleBlur","onKeyUp","hasLabel","handleCustomInputChange","handleCustomInputBlur","React","p","theme","grid","border","background","active","subText","space"],"mappings":"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","file":"app_views_settings_components_forms_controls_rangeSlider_tsx.d7469b3d5ff95eccf17a.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\ntype Props = {\n  name: string;\n\n  /**\n   * min allowed value, not needed if using `allowedValues`\n   */\n  min?: number;\n\n  /**\n   * max allowed value, not needed if using `allowedValues`\n   */\n  max?: number;\n\n  /**\n   * String is a valid type here only for empty string\n   * Otherwise react complains:\n   * \"`value` prop on `input` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.\"\n   *\n   * And we want this to be a controlled input when value is empty\n   */\n  value: number | '';\n  step?: number;\n  disabled?: boolean;\n\n  /**\n   * Render prop for slider's label\n   * Is passed the value as an argument\n   */\n  formatLabel?: (value: number | '') => React.ReactNode;\n\n  /**\n   * Array of allowed values. Make sure `value` is in this list.\n   * THIS NEEDS TO BE SORTED\n   */\n  allowedValues?: number[];\n\n  /**\n   * Show input control for custom values\n   */\n  showCustomInput?: boolean;\n\n  // Placeholder for custom input\n  placeholder?: string;\n\n  /**\n   * This is called when *any* MouseUp or KeyUp event happens.\n   * Used for \"smart\" Fields to trigger a \"blur\" event. `onChange` can\n   * be triggered quite frequently\n   */\n  onBlur?: (value, event?) => void;\n  onChange?: Function;\n  className?: string;\n};\n\ntype State = {\n  sliderValue: number | '';\n};\n\nclass RangeSlider extends React.Component<Props, State> {\n  state: State = {\n    sliderValue: this.props.allowedValues\n      ? // With `allowedValues` sliderValue will be the index to value in `allowedValues`\n        // This is so we can snap the rangeSlider using `step`\n        // This means that the range slider will have a uniform `step` in the UI\n        // and scale won't match `allowedValues\n        // e.g. with allowedValues = [0, 100, 1000, 10000] - in UI we'll have values = [0, 3] w/ step of 1\n        // so it always snaps at 25% width\n        this.props.allowedValues.indexOf(Number(this.props.value || 0))\n      : this.props.value,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    // Update local state when re-rendered with next `props.value` (e.g if this is controlled)\n    if (typeof nextProps.value !== 'undefined') {\n      const {allowedValues} = this.props;\n      let sliderValue = nextProps.value;\n\n      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n      if (allowedValues && allowedValues.indexOf(Number(sliderValue || 0)) > -1) {\n        sliderValue = allowedValues.indexOf(Number(sliderValue || 0));\n      }\n      this.setState({sliderValue});\n    }\n  }\n\n  getActualValue = (sliderValue: State['sliderValue']): number | '' => {\n    const {allowedValues} = this.props;\n    let value: number | '';\n\n    if (allowedValues) {\n      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n      value = allowedValues[sliderValue];\n    } else {\n      value = sliderValue;\n    }\n\n    return value;\n  };\n\n  setValue = value => {\n    this.setState({\n      sliderValue: value,\n    });\n  };\n\n  changeValue = (value, e) => {\n    if (this.props.onChange) {\n      this.props.onChange(this.getActualValue(value), e);\n    }\n  };\n\n  handleInput = e => {\n    const sliderValue = parseInt(e.target.value, 10);\n    this.setValue(sliderValue);\n    this.changeValue(sliderValue, e);\n  };\n\n  handleBlur = e => {\n    const {onBlur} = this.props;\n    if (typeof onBlur !== 'function') {\n      return;\n    }\n\n    onBlur(e);\n  };\n\n  handleCustomInputChange = e => {\n    const value = parseInt(e.target.value, 10);\n    this.setValue(isNaN(value) ? 0 : value);\n  };\n\n  handleCustomInputBlur = e => {\n    this.handleInput(e);\n  };\n\n  render() {\n    let {min, max, step} = this.props;\n    const {\n      name,\n      disabled,\n      allowedValues,\n      formatLabel,\n      placeholder,\n      showCustomInput,\n      className,\n    } = this.props;\n    const {sliderValue} = this.state;\n    let actualValue = sliderValue;\n    let displayValue: React.ReactNode = actualValue;\n\n    if (allowedValues) {\n      step = 1;\n      min = 0;\n      max = allowedValues.length - 1;\n      actualValue = allowedValues[sliderValue];\n      displayValue =\n        typeof actualValue !== 'undefined' ? actualValue : t('Invalid value');\n    }\n\n    displayValue =\n      typeof formatLabel === 'function' ? formatLabel(actualValue) : displayValue;\n\n    return (\n      <div className={className}>\n        {!showCustomInput && <Label htmlFor={name}>{displayValue}</Label>}\n        <SliderAndInputWrapper showCustomInput={showCustomInput}>\n          <Slider\n            type=\"range\"\n            name={name}\n            min={min}\n            max={max}\n            step={step}\n            disabled={disabled}\n            onInput={this.handleInput}\n            onChange={() => {}}\n            onMouseUp={this.handleBlur}\n            onKeyUp={this.handleBlur}\n            value={sliderValue}\n            hasLabel={!showCustomInput}\n          />\n          {showCustomInput && (\n            <Input\n              placeholder={placeholder}\n              value={sliderValue}\n              onChange={this.handleCustomInputChange}\n              onBlur={this.handleCustomInputBlur}\n            />\n          )}\n        </SliderAndInputWrapper>\n      </div>\n    );\n  }\n}\n\nexport default RangeSlider;\n\nconst Slider = styled('input')<{hasLabel: boolean}>`\n  /* stylelint-disable-next-line property-no-vendor-prefix */\n  -webkit-appearance: none;\n  width: 100%;\n  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * (p.hasLabel ? 2 : 1)}px;\n\n  &::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-moz-range-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-ms-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-webkit-slider-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-moz-range-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-fill-lower {\n    background: ${p => p.theme.border};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &::-ms-fill-upper {\n    background: ${p => p.theme.border};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::-webkit-slider-runnable-track {\n      background: ${p => p.theme.border};\n    }\n\n    &::-ms-fill-upper {\n      background: ${p => p.theme.border};\n    }\n\n    &::-ms-fill-lower {\n      background: ${p => p.theme.border};\n    }\n  }\n\n  &[disabled] {\n    &::-webkit-slider-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-moz-range-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-ms-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-webkit-slider-runnable-track {\n      cursor: default;\n    }\n\n    &::-moz-range-track {\n      cursor: default;\n    }\n\n    &::-ms-track {\n      cursor: default;\n    }\n  }\n`;\n\nconst Label = styled('label')`\n  font-size: 14px;\n  margin-bottom: ${p => p.theme.grid}px;\n  color: ${p => p.theme.subText};\n`;\n\nconst SliderAndInputWrapper = styled('div')<{showCustomInput?: boolean}>`\n  display: grid;\n  align-items: center;\n  grid-auto-flow: column;\n  grid-template-columns: 4fr ${p => p.showCustomInput && '1fr'};\n  grid-gap: ${space(1)};\n`;\n"],"sourceRoot":""}