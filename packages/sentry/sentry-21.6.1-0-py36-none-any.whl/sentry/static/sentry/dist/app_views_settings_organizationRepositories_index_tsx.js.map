{"version":3,"sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.tsx","webpack:///./app/views/settings/organizationRepositories/index.tsx"],"names":["AlertLink","this","props","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","data-test-id","IconWrapper","AlertLinkText","IconLink","direction","React","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","OrganizationRepositories","itemList","onRepositoryChange","api","orgId","params","hasItemList","length","title","t","className","tct","link","map","repo","repository","showProvider","id","description","action","OrganizationRepositoriesContainer","data","state","forEach","item","status","setState","query","routeTitleGen","itemListPageLinks","Fragment","pageLinks","AsyncView"],"mappings":"21EAkCMA,E,wiBAQJ,WAAS,MAYHC,KAAKC,MAVPC,EAFK,EAELA,KACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,KACAC,EALK,EAKLA,SACAC,EANK,EAMLA,QACAC,EAPK,EAOLA,oBACAC,EARK,EAQLA,aACAC,EATK,EASLA,GACAC,EAVK,EAULA,KACkBC,EAXb,EAWJ,gBAGH,OACE,QAACC,EAAD,CACEC,eAAcF,EACdF,GAAIA,EACJC,KAAMA,EACNJ,QAASA,EACTJ,KAAMA,EACNC,SAAUA,EACVI,oBAAqBA,EACrBC,aAAcA,EARhB,UAUGJ,IAAQ,QAACU,EAAD,UAAcV,KACvB,QAACW,EAAD,UAAgBV,KAChB,QAACW,EAAD,WACE,QAAC,KAAD,CAAaC,UAAU,mB,GApCTC,aAAlBnB,E,gCAAAA,E,eACgC,CAClCI,SAAU,UACVD,KAAM,SACNK,qBAAqB,EACrBC,cAAc,IAsClB,UAEA,IAAMI,GAAa,QAAO,YAAyD,IAAvDJ,EAAuD,EAAvDA,aAAcC,EAAyC,EAAzCA,GAAIC,EAAqC,EAArCA,KAAST,GAA4B,uCAC3EkB,EAAYC,IAAKnB,EAAO,CAAC,sBAAuB,WAAY,SAClE,OAAIS,GACK,QAAC,IAAD,OAAkBS,GAAlB,IAA6BT,KAAMA,EAAMF,aAAcA,MAGzD,QAAC,IAAD,OAAUW,GAAV,IAAqBV,GAAIA,GAAM,QANrB,qBAAH,kCASM,SAAAY,GAAC,OAAIA,EAAEC,MAAMC,MAAMF,EAAElB,UAAUqB,kBATrC,WAUL,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,YAVR,uBAWO,SAAAJ,GAAC,OAAIA,EAAEC,MAAMC,MAAMF,EAAElB,UAAUuB,SAXtC,aAYH,SAAAL,GAAC,MAAgB,UAAXA,EAAEnB,KAAF,WAAwByB,OAAM,GAA9B,aAAoCA,OAAM,OAASA,OAAM,KAZ5D,mBAaG,SAAAN,GAAC,OAAKA,EAAEd,oBAAsB,GAAIoB,OAAM,KAb3C,+FAmBE,SAAAN,GAAC,OAAIA,EAAEC,MAAMC,MAAMF,EAAElB,UAAUuB,SAnBjC,kBAuBVZ,GAAc,OAAO,OAAP,qBAAH,wBAELa,OAAM,IAFD,KAESA,OAAM,KAFf,KAEuBA,OAAM,IAF7B,OAKXX,GAAW,OAAOF,EAAP,qBAAH,WACFa,OAAM,IADJ,OAIRZ,GAAgB,OAAO,MAAP,qBAAH,wD,6HCnGnB,QAZA,SACEa,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACFC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,07DCWrCC,EAA2B,SAAC,GAAuD,IAAtDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,mBAAoBC,EAAwB,EAAxBA,IACxDC,EADgF,EAAnBC,OAC7DD,MACDE,EAAcL,GAAYA,EAASM,OAAS,EAElD,OACE,0BACE,QAAC,IAAD,CAAoBC,OAAOC,OAAE,mBAC7B,QAAC,IAAD,CAAWlC,GAAE,oBAAe6B,EAAf,kBAAb,UACGK,OACC,sHAGFH,IACA,eAAKI,UAAU,QAAf,UACE,QAAC,IAAD,YACGD,OACC,+PAFJ,KAOGE,QAAI,iDAAkD,CACrDC,MAAM,aAAGpC,KAAK,kDAMrB8B,GACC,QAAC,KAAD,YACE,QAAC,KAAD,WAAcG,OAAE,yBAChB,QAAC,IAAD,WACE,wBACGR,EAASY,KAAI,SAAAC,GAAI,OAChB,QAAC,IAAD,CAEEC,WAAYD,EACZX,IAAKA,EACLa,cAAY,EACZZ,MAAOA,EACPF,mBAAoBA,GALfY,EAAKG,eAYpB,QAAC,KAAD,WACE,QAAC,IAAD,CACE/C,MAAM,QAAC,KAAD,CAAYF,KAAK,OACvBwC,OAAOC,OAAE,qCACTS,aAAaT,OACX,2HAEFU,QACE,QAAC,KAAD,CAAQ3C,KAAK,yCAAb,UACGiC,OAAE,wBAxDbT,E,uCAkEN,U,ykBCrEqBoB,E,soBAOE,SAACC,GACpB,IAAMpB,EAAW,EAAKqB,MAAMrB,SAC5BA,WAAUsB,SAAQ,SAAAC,GACZA,EAAKP,KAAOI,EAAKJ,KACnBO,EAAKC,OAASJ,EAAKI,WAGvB,EAAKC,SAAS,CAACzB,gB,6CAbjB,WAAsD,IAC7CG,EAAStC,KAAKC,MAAMsC,OAApBD,MACP,MAAO,CAAC,CAAC,WAAD,yBAA+BA,EAA/B,WAA+C,CAACuB,MAAO,CAACF,OAAQ,S,sBAc1E,WAAW,IACFrB,EAAStC,KAAKC,MAAMsC,OAApBD,MACP,OAAOwB,QAAcnB,OAAE,gBAAiBL,GAAO,K,wBAGjD,WAAa,MAC2BtC,KAAKwD,MAApCrB,EADI,EACJA,SAAU4B,EADN,EACMA,kBAEjB,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,EAAD,OACMhE,KAAKC,OADX,IAEEkC,SAAUA,EACVE,IAAKrC,KAAKqC,IACVD,mBAAoBpC,KAAKoC,sBAE1B2B,IACC,QAAC,IAAD,GAAYE,UAAWF,GAAuB/D,KAAKC,e,GAlCEiE","file":"app_views_settings_organizationRepositories_index_tsx.5473b8098f7a3f974c7e.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & DefaultProps & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nclass AlertLink extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    priority: 'warning',\n    size: 'normal',\n    withoutMarginBottom: false,\n    openInNewTab: false,\n  };\n\n  render() {\n    const {\n      size,\n      priority,\n      icon,\n      children,\n      onClick,\n      withoutMarginBottom,\n      openInNewTab,\n      to,\n      href,\n      ['data-test-id']: dataTestId,\n    } = this.props;\n\n    return (\n      <StyledLink\n        data-test-id={dataTestId}\n        to={to}\n        href={href}\n        onClick={onClick}\n        size={size}\n        priority={priority}\n        withoutMarginBottom={withoutMarginBottom}\n        openInNewTab={openInNewTab}\n      >\n        {icon && <IconWrapper>{icon}</IconWrapper>}\n        <AlertLinkText>{children}</AlertLinkText>\n        <IconLink>\n          <IconChevron direction=\"right\" />\n        </IconLink>\n      </StyledLink>\n    );\n  }\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport RepositoryRow from 'app/components/repositoryRow';\nimport {IconCommit} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Repository, RepositoryStatus} from 'app/types';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  itemList: Repository[];\n  onRepositoryChange: (data: {id: string; status: RepositoryStatus}) => void;\n  api: Client;\n};\n\nconst OrganizationRepositories = ({itemList, onRepositoryChange, api, params}: Props) => {\n  const {orgId} = params;\n  const hasItemList = itemList && itemList.length > 0;\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Repositories')} />\n      <AlertLink to={`/settings/${orgId}/integrations/`}>\n        {t(\n          'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n        )}\n      </AlertLink>\n      {!hasItemList && (\n        <div className=\"m-b-2\">\n          <TextBlock>\n            {t(\n              'Connecting a repository allows Sentry to capture commit data via webhooks. ' +\n                'This enables features like suggested assignees and resolving issues via commit message. ' +\n                \"Once you've connected a repository, you can associate commits with releases via the API.\"\n            )}\n            &nbsp;\n            {tct('See our [link:documentation] for more details.', {\n              link: <a href=\"https://docs.sentry.io/learn/releases/\" />,\n            })}\n          </TextBlock>\n        </div>\n      )}\n\n      {hasItemList ? (\n        <Panel>\n          <PanelHeader>{t('Added Repositories')}</PanelHeader>\n          <PanelBody>\n            <div>\n              {itemList.map(repo => (\n                <RepositoryRow\n                  key={repo.id}\n                  repository={repo}\n                  api={api}\n                  showProvider\n                  orgId={orgId}\n                  onRepositoryChange={onRepositoryChange}\n                />\n              ))}\n            </div>\n          </PanelBody>\n        </Panel>\n      ) : (\n        <Panel>\n          <EmptyMessage\n            icon={<IconCommit size=\"xl\" />}\n            title={t('Sentry is better with commit data')}\n            description={t(\n              'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n            )}\n            action={\n              <Button href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            }\n          />\n        </Panel>\n      )}\n    </div>\n  );\n};\n\nexport default OrganizationRepositories;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport OrganizationRepositories from './organizationRepositories';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  itemList: Repository[] | null;\n};\n\nexport default class OrganizationRepositoriesContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}]];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = (data: Pick<Repository, 'id' | 'status'>) => {\n    const itemList = this.state.itemList;\n    itemList?.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Repositories'), orgId, false);\n  }\n\n  renderBody() {\n    const {itemList, itemListPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          itemList={itemList!}\n          api={this.api}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}