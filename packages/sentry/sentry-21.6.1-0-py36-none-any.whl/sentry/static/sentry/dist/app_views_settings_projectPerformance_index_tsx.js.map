{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/projectPerformance/projectPerformance.tsx","webpack:///./app/views/settings/projectPerformance/index.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","name","React","JsonForm","location","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","state","formGroup","i","renderForm","withRouter","ProjectPerformance","params","orgId","projectId","loading","api","request","method","complete","fetchData","routeTitleGen","t","LoadingIndicatorContainer","type","label","placeholder","help","choices","threshold","metric","organization","project","endpoint","slug","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","formFields","Actions","onClick","handleDelete","PanelItem","ProjectPerformanceContainer","withOrganization"],"mappings":"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","file":"app_views_settings_projectPerformance_index_tsx.97105fb45a11b8d5a9c5.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {PanelItem} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport {Field} from '../components/forms/type';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype ProjectThreshold = {\n  id?: string;\n  threshold: string;\n  metric: string;\n  editedBy?: string;\n};\n\ntype State = AsyncView['state'] & {\n  threshold: ProjectThreshold;\n};\n\nclass ProjectPerformance extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Performance'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n\n    const endpoints: ReturnType<AsyncView['getEndpoints']> = [\n      ['threshold', `/projects/${orgId}/${projectId}/transaction-threshold/configure/`],\n    ];\n\n    return endpoints;\n  }\n\n  handleDelete = () => {\n    const {orgId, projectId} = this.props.params;\n\n    this.setState({\n      loading: true,\n    });\n\n    this.api.request(`/projects/${orgId}/${projectId}/transaction-threshold/configure/`, {\n      method: 'DELETE',\n      complete: () => this.fetchData(),\n    });\n  };\n\n  getEmptyMessage() {\n    return t('There is no threshold set for this project.');\n  }\n\n  renderLoading() {\n    return (\n      <LoadingIndicatorContainer>\n        <LoadingIndicator />\n      </LoadingIndicatorContainer>\n    );\n  }\n\n  get formFields(): Field[] {\n    const fields: any[] = [\n      {\n        name: 'threshold',\n        type: 'string',\n        label: t('Response Time Threshold'),\n        placeholder: t('300'),\n        help: t(\n          'Set a response time threshold to help define what satisfactory and tolerable times are. These will be reflected in the calculation of your Apdex, a standard measurement in performance monitoring and the User Misery score. You can customize this per project.'\n        ),\n      },\n      {\n        name: 'metric',\n        type: 'select',\n        label: t('Metric'),\n        choices: () => ['duration', 'lcp', 'fcp'],\n        help: t(\n          'Set the measurement to apply the Response Time Threshold to. This metric will be used to calculate the Apdex and User Misery Scores.'\n        ),\n      },\n    ];\n    return fields;\n  }\n\n  get initialData() {\n    const {threshold} = this.state;\n\n    return {\n      threshold: threshold.threshold,\n      metric: threshold.metric,\n    };\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Performance')} />\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={this.initialData}\n          apiMethod=\"POST\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            this.setState({threshold: resp});\n          }}\n        >\n          <JsonForm\n            title={t('General')}\n            fields={this.formFields}\n            renderFooter={() => (\n              <Actions>\n                <Button onClick={() => this.handleDelete()}>\n                  {t('Clear Custom Threshold')}\n                </Button>\n              </Actions>\n            )}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst LoadingIndicatorContainer = styled('div')`\n  margin: 18px 18px 0;\n`;\n\nexport default ProjectPerformance;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Feature from 'app/components/acl/feature';\nimport {Organization, Project} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport ProjectPerformance from './projectPerformance';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectPerformanceContainer extends React.Component<Props> {\n  render() {\n    return (\n      <Feature features={['project-transaction-threshold']}>\n        <ProjectPerformance {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPerformanceContainer);\n"],"sourceRoot":""}